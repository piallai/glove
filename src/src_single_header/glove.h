/*
* This file is part of the Glove distribution (https://github.com/piallai/glove).
* Copyright (C) 2024 Pierre Allain.
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, version 3.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#define GLOVE_PV_SINGLE_HEADER

#define GLOVE_VERSION_MAJOR 0
#define GLOVE_VERSION_MINOR 7
#define GLOVE_VERSION_PATCH 3

#ifndef GLOVE_DISABLE_QT
#define OPTION_ENABLE_SLV_QT_PROGRESS 1
#else
#define OPTION_ENABLE_SLV_QT_PROGRESS 0
#endif
#ifdef GLOVE_ENABLE_JSON
#define OPTION_USE_THIRDPARTY_JSON 1
#else
#define OPTION_USE_THIRDPARTY_JSON 0
#endif
#ifdef GLOVE_ENABLE_BOOST
#define OPTION_USE_BOOST 1
#else
#define OPTION_USE_BOOST 0
#endif
#define OPTION_STD_BREAK_THROW_EXCEPTION 1

#ifdef GLOVE_ENABLE_JSON
#include "json.hpp"
#endif

#include <cstring>
#include <string>
#include <fstream>
#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1
#include <boost/container/vector.hpp>
#endif
#if __cplusplus > 201402L
#include <filesystem>
#endif
#include <utility>
#include <unordered_map>
#include <iostream>
#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1
#include <boost/unordered_map.hpp>
#endif
#include <array>
#include <deque>
#include <list>
#include <map>
#include <vector>
#include <typeinfo>
#include <type_traits>
#include <time.h>
#include <istream>
#include <ostream>
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
#include <QObject>
#endif
#ifndef GLOVE_DISABLE_QT
#include <QObject>
#endif
#include <sstream>
#include <cstdarg>
#include <algorithm>
#ifndef GLOVE_DISABLE_QT
#include <QModelIndex>
#include <QVector>
#include <QRect>
#include <QWidget>
#include <QVBoxLayout>
#include <QApplication>
#include <QMessageBox>
#include <QtConcurrent/QtConcurrentRun>
#include <QFutureWatcher>
#include <QDialog>
#include <QDialogButtonBox>
#include <QLineEdit>
#include <QStyledItemDelegate>
#include <QEvent>
#include <QLabel>
#include <QPushButton>
#include <QString>
#include <QIODevice>
#include <QHBoxLayout>
#include <QGroupBox>
#include <QComboBox>
#include <QStandardItemModel>
#include <QProgressDialog>
#include <QStandardItem>
#include <QHeaderView>
#include <QTableView>
#include <QTreeView>
#include <QSpinBox>
#include <QDoubleSpinBox>
#include <QCheckBox>
#include <qnamespace.h>
#include <QStringListModel>
#endif
#if !(__cplusplus > 201402L)
#include <sys/types.h>
#include <sys/stat.h>
#endif
#ifndef _MSC_VER
#include <signal.h>
#endif
#include <cmath>
#ifndef GLOVE_DISABLE_QT
#include <QAbstractItemView>
#include <QGridLayout>
#include <QScrollArea>
#include <QDir>
#include <QFileDialog>
#include <QScrollBar>
#include <QStyle>
#include <QScreen>
#include <QResizeEvent>
#include <QProgressBar>
#include <QCloseEvent>
#include <cstddef>
#include <QPainter>
#include <QSlider>
#endif

typedef std::string SlvFileExtension;
typedef std::string SlvFileStem;

template <class T>
std::ostream& operator<<(std::ostream& _os, const std::vector<T>& _vector);
template <class T>
std::istream& operator>>(std::istream& _is, std::vector<T>& _vector);

template <class T, size_t N>
std::ostream& operator<<(std::ostream& _os, const std::array<T, N>& _array);
template <class T, size_t N>
std::istream& operator>>(std::istream& _is, std::array<T, N>& _array);

template <class T>
std::ostream& operator<<(std::ostream& _os, const std::list<T>& _list);
template <class T>
std::istream& operator>>(std::istream& _is, std::list<T>& _list);

template <class T>
std::ostream& operator<<(std::ostream& _os, const std::deque<T>& _deque);
template <class T>
std::istream& operator>>(std::istream& _is, std::deque<T>& _deque);

template <class Tkey, class T>
std::ostream& operator<<(std::ostream& _os, const std::map<Tkey, T>& _map);

template <class Tkey, class T>
std::ostream& operator<<(std::ostream& _os, const std::unordered_map<Tkey, T>& _map);

template <class T1, class T2>
std::ostream& operator<<(std::ostream& _os, const std::pair<T1, T2>& _pair);
template <class T1, class T2>
std::istream& operator>>(std::istream& _is, std::pair<T1, T2>& _pair);

#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1
template <class T>
std::ostream& operator<<(std::ostream& _os, const boost::container::vector<T>& _vector);
template <class T>
std::istream& operator>>(std::istream& _is, boost::container::vector<T>& _vector);

template <class Tkey, class T>
std::ostream& operator<<(std::ostream& _os, const boost::unordered::unordered_map<Tkey, T>& _map);
template <class Tkey, class T>
std::istream& operator>>(std::istream& _is, const boost::unordered::unordered_map<Tkey, T>& _map);
#endif

//! This header is only useful for clang compiler or C++ before 17. No need to use it otherwise (adds potential unnecessary headers to include)

#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1

template <class T>
std::ostream& operator<<(std::ostream& _os, const boost::container::vector<T>& _vector) {
    _os << "[";
    for (typename boost::containe::vector<T>::const_iterator it = _vector.begin(); it != _vector.end(); ++it) {
        _os << *it;
        if (std::next(it) != _vector.end()) {
            _os << ", ";
        }
    }
    _os << "]";
    return _os;
}

template <class T>
std::istream& operator>>(std::istream& _is, boost::container::vector<T>& _vector) {
    _vector.clear();
    std::cout << "enter vector size:" << std::endl;
    unsigned int vector_size;
    _is >> vector_size;
    T value;
    for (unsigned int i = 0; i < vector_size; i++) {
        std::cout << "enter element: " << i << std::endl;
        _is >> value;
        _vector.push_back(value);
    }
    return _is;
}

template <class Tkey, class T>
std::ostream& operator<<(std::ostream& _os, const boost::unordered::unordered_map<Tkey, T>& _map) {
    _os << "[";
    for (typename boost::unordered::unordered_map<Tkey, T>::const_iterator it = _map.begin(); it != _map.end(); it++) {
        _os << " ";
        _os << "(" << it->first << "," << it->second << ")";
    }
    _os << "]";
    return _os;
}

template <class Tkey, class T>
std::istream& operator>>(std::istream& _is, const boost::unordered::unordered_map<Tkey, T>& _map) {

    slv::flag::WIP();
    return _is;
}

#endif

namespace slv {
    /*! Usefull flags, such as BREAK, or string delimiters in terminal output.*/
    namespace flag {

        /*! Output: #################*/
        const std::string& str_delimiter0();
        /*! Output: ---------------*/
        const std::string& str_delimiter1();
        /*! Output: ************ */
        const std::string& str_delimiter2();

        /*! Delimiter + \p _string.*/
        const std::string str_delimiter0(const std::string& _string);
        /*! Delimiter + \p _string.*/
        const std::string str_delimiter1(const std::string& _string);
        /*! Delimiter + \p _string.*/
        const std::string str_delimiter2(const std::string& _string);

        /*! Type of issue. Critical is by default std::runtime_error.*/
        enum FlagType { Info, Warning, Critical, InvalidArgument, EndOfFile };

        /*! Private*/
        const std::string& warning_intro();
        /*! Ouput a warning: \p _warning_message.*/
        void WARNING(std::string warning_message);

        /*! Intentional crash. Throws std::runtime_error if OPTION_STD_BREAK_THROW_EXCEPTION is ON, or basic break if OFF.*/
        void BREAK();

        /*! Critical + work in progress output.*/
        void WIP();
        /*! Critical + work in progress output + \p _work_in_progress_message.*/
        void WIP(std::string _work_in_progress_message);

        /*! Critical + _warning message.*/
        void BREAK(std::string warning_message);
        /*! Critical + _warning message + template argument output.*/
        template <class T>
        void BREAK(std::string warning_message, const T& warning_arg);
        template <class T>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2);
        template <class T, class T2>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2);
        template <class T, class T2>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3);
        template <class T, class T2, class T3>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3);
        template <class T, class T2, class T3>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4);
        template <class T, class T2, class T3, class T4>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4);
        template <class T, class T2, class T3, class T4>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5);
        template <class T, class T2, class T3, class T4, class T5>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5);
        template <class T, class T2, class T3, class T4, class T5>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6);
        template <class T, class T2, class T3, class T4, class T5, class T6>
        void BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6, const T6& warning_arg6);

        /*! Issue (type \p _flag_type) + _warning message*/
        void ISSUE(FlagType _flag_type, std::string warning_message);
        /*! Issue (type \p _flag_type) + _warning message + template argument output*/
        template <class T>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg);
        template <class T>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2);
        template <class T, class T2>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2);
        template <class T, class T2>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3);
        template <class T, class T2, class T3>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3);
        template <class T, class T2, class T3>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4);
        template <class T, class T2, class T3, class T4>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4);
        template <class T, class T2, class T3, class T4>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5);
        template <class T, class T2, class T3, class T4, class T5>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5);
        template <class T, class T2, class T3, class T4, class T5>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6);
        template <class T, class T2, class T3, class T4, class T5, class T6>
        void ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6, const T6& warning_arg6);

        void ISSUE(FlagType _flag_type, const std::ostringstream& _stream);

        /*! Output a loop message as a percentage. The fraction is defined as (_i_loop + 1) / _Nloop.
        * Can output a message only \p _Nfraction times during a full loop.*/
        void loop_display(const unsigned int _i_loop, const unsigned int _Nloop, const std::string _message, const unsigned int _Nfraction = 10);

        /*! std::cout of \p _value by dereferencing the pointer.*/
        template <class T>
        void cout_ptr(const T* _value);
        /*! Compatibility overload.*/
        template <class T>
        void cout_ptr(const T& _value);
        /*! Overload with message.*/
        template <class T>
        void cout_ptr(const std::string& _message, const T& _value);
    }
}

template <class T>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg) {
    ISSUE(FlagType::Critical, warning_message, warning_arg);
}
template <class T>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2);
}
template <class T, class T2>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2);
}
template <class T, class T2>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3);
}
template <class T, class T2, class T3>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3);
}
template <class T, class T2, class T3>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3, warning_message4);
}
template <class T, class T2, class T3, class T4>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3, warning_message4, warning_arg4);
}
template <class T, class T2, class T3, class T4>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3, warning_message4, warning_arg4, warning_message5);
}
template <class T, class T2, class T3, class T4, class T5>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3, warning_message4, warning_arg4, warning_message5, warning_arg5);
}
template <class T, class T2, class T3, class T4, class T5>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3, warning_message4, warning_arg4, warning_message5, warning_arg5, warning_message6);
}
template <class T, class T2, class T3, class T4, class T5, class T6>
void slv::flag::BREAK(std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6, const T6& warning_arg6) {
    ISSUE(FlagType::Critical, warning_message, warning_arg, warning_message2, warning_arg2, warning_message3, warning_arg3, warning_message4, warning_arg4, warning_message5, warning_arg5, warning_message6, warning_arg6);
}

template <class T>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << warning_message4 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3, class T4>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << warning_message4 << warning_arg4 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3, class T4>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << warning_message4 << warning_arg4 << warning_message5 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3, class T4, class T5>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << warning_message4 << warning_arg4 << warning_message5 << warning_arg5 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3, class T4, class T5>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << warning_message4 << warning_arg4 << warning_message5 << warning_arg5 << warning_message6 << std::endl;
    ISSUE(_flag_type, stream);
}
template <class T, class T2, class T3, class T4, class T5, class T6>
void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message, const T& warning_arg, std::string warning_message2, const T2& warning_arg2, std::string warning_message3, const T3& warning_arg3, std::string warning_message4, const T4& warning_arg4, std::string warning_message5, const T5& warning_arg5, std::string warning_message6, const T6& warning_arg6) {
    std::ostringstream stream;
    stream << warning_intro() << warning_message << warning_arg << warning_message2 << warning_arg2 << warning_message3 << warning_arg3 << warning_message4 << warning_arg4 << warning_message5 << warning_arg5 << warning_message6 << warning_arg6 << std::endl;
    ISSUE(_flag_type, stream);
}

template <class T>
void slv::flag::cout_ptr(const T& _value) {

    std::cout << _value;
}
template <class T>
void slv::flag::cout_ptr(const T* _value) {

    std::cout << *_value;
}

template <class T>
void slv::flag::cout_ptr(const std::string& _message, const T& _value) {

    std::cout << _message;
    cout_ptr(_value);
    std::cout << std::endl;
}

/*! Class representing a file path without its directory.*/
class SlvFileName {

public:
    /*! Name of the file (stem).*/
    SlvFileStem stem;
    /*! Extension of the file.*/
    SlvFileExtension extension;

public:

    SlvFileName();
    SlvFileName(const SlvFileStem& _stem, const SlvFileExtension& _extension);
    SlvFileName(const std::string& _string);
    ~SlvFileName();

    /*! Get total name of the file: name + extension*/
    std::string get_total_name() const;

    bool operator==(const SlvFileName& _file_name) const;

    bool readB(std::ifstream& _input_file);
    void writeB(std::ofstream& _output_file) const;

};

/*! Class to be inherited to provide file input stream.*/
class SlvIS {

public:

	SlvIS();
	virtual ~SlvIS();

	friend std::istream& operator>>(std::istream& _is, SlvIS& _IS);

protected:

	/*! Input stream method to reimplement.*/
	virtual void istream(std::istream& _is) = 0;

};

/*! Class to be inherited to provide file output stream.*/
class SlvOS {

public:

	SlvOS();
	virtual ~SlvOS();

	friend std::ostream& operator<<(std::ostream& _os, const SlvOS& _OS);

protected:

	/*! Output stream method to reimplement.*/
	virtual void ostream(std::ostream& _os) const = 0;

};

/*! Convenience class to inherit both from SlvIS and SlvOS.*/
class SlvIOS : virtual public SlvIS, virtual public SlvOS {

public:

	SlvIOS() {}
	~SlvIOS() {}

};

/*! Class representing a system directory.*/
class SlvDirectory : public SlvIOS {

private:
    /*! Path of the directory.*/
    std::string path;
    /*! Whether the directory's path is relative or not.*/
    bool l_relative;

public:

    SlvDirectory();
    /*Ex:   Providing /a/b/c will set directory /a/b/
    * Providing /a/b/c/ will set directory /a/b/c/ .*/
    SlvDirectory(const std::string _string);
    SlvDirectory(const char* _string);
    SlvDirectory(const SlvDirectory& _directory);
    ~SlvDirectory();

    /*! Get path of the directory.*/
    const std::string& get_path() const;
    /*! Whether the directory's path is relative or not.*/
    bool is_relative() const;

    /*! Return true if the directory exists.*/
    bool exists() const;

    bool operator==(const SlvDirectory& _directory) const;
    bool operator!=(const SlvDirectory& _directory) const;

    bool readB(std::ifstream& _input_file);
    void writeB(std::ofstream& _output_file) const;

private:

    void istream(std::istream& _is);
    void ostream(std::ostream& _os) const;

};

template <class T>
std::ostream& operator<<(std::ostream& _os, const std::vector<T>& _vector) {
    _os << "[";
    for (typename std::vector<T>::const_iterator it = _vector.begin(); it != _vector.end(); ++it) {
        _os << *it;
        if (std::next(it) != _vector.end()) {
            _os << ", ";
        }
    }
    _os << "]";
    return _os;
}

template <class T>
std::istream& operator>>(std::istream& _is, std::vector<T>& _vector) {
    _vector.clear();
    std::cout << "enter vector size:" << std::endl;
    unsigned int vector_size;
    _is >> vector_size;
    T value;
    for (unsigned int i = 0; i < vector_size; i++) {
        std::cout << "enter element: " << i << std::endl;
        _is >> value;
        _vector.push_back(value);
    }
    return _is;
}

/*! Just a class containing file extensions as strings.*/
class SlvFileExtensions {
private:
    std::vector<SlvFileExtension> extensions;

public:
    SlvFileExtensions();
    SlvFileExtensions(const std::vector<SlvFileExtension>& _extensions);
    ~SlvFileExtensions();

    const SlvFileExtension& operator[](int i) const;

    /*! Return true if \p _extension exits among the instance extensions.*/
    bool exists(const SlvFileExtension& _extension) const;

    /*! Get extensions.*/
    const std::vector<SlvFileExtension>& get() const;
    /*! Add an extension.*/
    void add(const SlvFileExtension& _extension);
    /*! Add an extension, first in the list.*/
    void add_front(const SlvFileExtension& _extension);
    /*! Remove an extension.*/
    void remove(const SlvFileExtension& _extension);

    /*! Add extensions.*/
    void add(const SlvFileExtensions& _extensions);

    /*! Whether the instance contains extensions or not.*/
    bool empty() const;

    bool operator==(const SlvFileExtensions& _file_extensions) const;

};

/*! Contains functions for the slv framework. No Qt/Glv here.*/
namespace slv {
    /*! String functions.*/
    namespace string {

        /*! Return "" */
        const std::string& str_void();

        /*! Transform \p n into a string of \p Ndigits.*/
        std::string number_to_string(int _n, int _Ndigits = 0);
        /*! Transform \p n into a string with the adequate number of digits.*/
        std::string number_to_string_auto(int n);
        /*! Convert \p _string to value.*/
        template <class T>
        T string_to_value(const std::string& _string);
        /*! Convert \p _value to string.*/
        std::string value_to_string(const double& _value);
        /*! Convert \p _string to value.*/
        unsigned int string_to_number(const std::string& _string);
        /*! Convert \p _value to string.*/
        template <class T>
        std::string to_string(const T& _value);
        /*! Convert \p _value to string.*/
        template <class T>
        std::string to_string(T* _value);

        /*! Get identifier string from instance.*/
        template <class T>
        std::string to_id_str(const T& _value);
        /*! Structure to specialize in order to get an identifier string from a template instance.*/
        template <class T>
        struct struct_to_id_str;

        /*! Get first part of \p _string (substring) up to \p _stop.*/
        template <class T>
        std::string extract_str_up_to(const std::string& _string, const T _stop);

        /*! Used by read_datas_line.*/
        template <class T>
        T read_data_line(std::string& _string_line, const std::string _separator = " ");
        /*! Extract a vector of template instances by reading \p _string_line.
        * Each instance is separated by \p _separator.
        * The max number of instances is defined by \p _Ndatas.
        * String to template is performed using string_to_value.*/
        template <class T>
        std::vector<T> read_datas_line(std::string _string_line, const std::string _separator = " ", const unsigned int _Ndatas = -1);

        /*! Remove \p _substring in \p _string.*/
        void remove_substring(const std::string& _substring, std::string& _string);

        /*! Read a string from istream with space character. Replaces _is >> _string.*/
        void istream(std::istream& _is, std::string& _string);

        /*! Parse formated \p _format arguments \p _args and returns the corresponding std::string.*/
        std::string format_va_list(const char* _format, std::va_list _args);
    }

}

template <class T>
std::string slv::string::to_string(const T& _value) {

    std::ostringstream strs;
    strs << _value;
    return strs.str();

}

template <class T>
std::string slv::string::to_string(T* _value) {

    std::ostringstream strs;
    strs << *_value;
    return strs.str();

}

template <class T>
std::string slv::string::to_id_str(const T& _value) {
    //allows specialization in somes cases (SlvFile for example)
    return struct_to_id_str<T>::to_id_str(_value);
}

template <class T>
struct slv::string::struct_to_id_str {
    static std::string to_id_str(const T& _value) {
        return to_string(_value);
    }
};

template <class T>
T slv::string::string_to_value(const std::string& _string) {

    std::istringstream buffer(_string);
    T value;
    buffer >> value;

    return value;
}

template <class T>
std::string slv::string::extract_str_up_to(const std::string& _string, const T _stop) {

    std::string::size_type pos = _string.find(_stop);
    if (pos != std::string::npos) {
        return _string.substr(0, pos);
    } else {
        return _string;
    }
}

template <class T>
T slv::string::read_data_line(std::string& _string_line, const std::string _separator) {

    std::string data_string = extract_str_up_to(_string_line, _separator);
    T data = string_to_value<T>(data_string);
    _string_line.erase(0, data_string.size() + _separator.size());
    return data;

}

template <class T>
std::vector<T> slv::string::read_datas_line(std::string _string_line, const std::string _separator, const unsigned int _Ndatas) {

    std::vector<T> datas(0);
    T buff_data;

    std::string buff_str;
    while (_string_line.size() > 0 && datas.size() < _Ndatas) {

        buff_data = read_data_line<T>(_string_line, _separator);
        datas.push_back(buff_data);
    }

    return datas;

}

/*! Represents a file location (directory) and name.*/
class SlvFile : public SlvIOS {

public:

    enum IO { Read, Write, Any };

private:

    /*! File of the file instance.*/
    SlvFileName file_name;
    /*! Directory of the file instance.*/
    SlvDirectory directory;

    /*! About file type (ex: image, etc..).*/
    std::string description;

    /*! Input or output file (read or write).*/
    IO io_mode;

    /*! Allowed extensions for the file.
    * The name used at construction provides the first allowed extension.
    * Unless adding other extensions, it is not possible to change the file's extension.*/
    SlvFileExtensions allowed_extensions;

public:

    SlvFile();
    /*! Set path of file. The extension of the file will be added to allowed extensions.*/
    SlvFile(const std::string& _path, IO _io_mode = IO::Any, std::string _description = "");
    SlvFile(const char* _string, IO _io_mode = IO::Any, std::string _description = "");
    SlvFile(const std::string& _path, const SlvFileExtensions& _allowed_extensions, IO _io_mode = IO::Any, std::string _description = "");
    SlvFile(const char* _string, const SlvFileExtensions& _allowed_extensions, IO _io_mode = IO::Any, std::string _description = "");
    SlvFile(IO _io_mode, std::string _description = "");
    SlvFile(const SlvDirectory& _directory, const SlvFileName& _file_name, IO _io_mode = IO::Any, std::string _description = "");
    SlvFile(const SlvDirectory& _directory, SlvFileExtensions _allowed_extensions = SlvFileExtensions(), IO _io_mode = IO::Any);
    SlvFile(SlvFileExtensions _allowed_extensions, IO _io_mode = IO::Any, std::string _description = "");
    ~SlvFile();

    /*! Get file name with extension.*/
    const std::string get_name() const;
    /*! Get directory + file name with extensions.*/
    const std::string get_path() const;
    /*! Get file item.*/
    const SlvFileName& get_file_name() const;
    /*! Get directory item.*/
    const SlvDirectory& get_directory() const;
    /*! Get description.*/
    const std::string& get_description() const;
    /*! Get allowed extensions for this file.*/
    const SlvFileExtensions& get_allowed_extensions() const;
    /*! Input or output file (read or write).*/
    IO get_io_mode() const;

    /*! Set file name (ignoring directories). Return true if the name was properly set.*/
    bool set_name(const std::string& _path);
    /*! Set directory (ignoring file names).
    * It means that the directory will be handled up to the last directory separator '/'.
    * Ex:   Providing /a/b/c will set directory /a/b/
    *       Providing /a/b/c/ will set directory /a/b/c/.*/
    void set_directory(const std::string& _path);

    /*! Add extension \p _ext in the allowed extensions for this file (format: .ext)*/
    void add_allowed_extension(const std::string& _ext);
    void add_allowed_extensions(const SlvFileExtensions& _extensions);

    /*! Return true if the file exists.*/
    bool exists() const;

    bool operator==(const SlvFile& _file) const;
    bool operator!=(const SlvFile& _file) const;

    bool readB(std::ifstream& _input_file);
    void writeB(std::ofstream& _output_file) const;

private:

    void istream(std::istream& _is);
    void ostream(std::ostream& _os) const;
};

template <>
std::string slv::string::to_id_str(const SlvFile& _value);

////////////ACCESSORS/////////////////////////////////

/*! Define an accessor to variable \p name.*/
#define glvm_GetVariable(const, type, name)\
const type& get_##name() const {return name;}
/*! Define a static accessor to variable \p name.*/
#define glvm_staticGetVariable(const, type, name)\
static const type& get_##name() {return name();}
/*! Define an accessor to variable \p name of type bool.*/
#define glvm_GetVariable_bool(name)\
bool is_##name() const {return l_##name;}
/*! Define a static accessor to variable \p name of type bool.*/
#define glvm_staticGetVariable_bool(name)\
static bool is_##name() {return l_##name();}
////////////MODIFIERS/////////////////////////////////
/*! Define an accessor to variable \p name.*/
#define glvm_SetVariable(type, name)\
void set_##name(const type& _arg) {name = _arg;}
/*! Define a static accessor to variable \p name.*/
#define glvm_staticSetVariable(type, name)\
static void set_##name(const type& _arg) {name() = _arg;}
/*! Define an accessor to variable \p name of type bool.*/
#define glvm_SetVariable_bool(name)\
void set_##name(bool _arg) {l_##name = _arg;}
/*! Define a static accessor to variable \p name of type bool.*/
#define glvm_staticSetVariable_bool(name)\
static void set_##name(bool _arg) {l_##name() = _arg;}

////////////BOTH//////////////////////////////////////

/*! Define a variable named \p name and of type \p type with accessors.*/
#define glvm_GetSetVariable(type, name)\
private: type name;\
public: glvm_GetVariable(const, type, name)\
public: glvm_SetVariable(type, name)
/*! Define a variable named \p name and of type bool with accessors.*/
#define glvm_GetSetVariable_bool(name)\
private: bool l_##name;\
public: glvm_GetVariable_bool(name)\
public: glvm_SetVariable_bool(name)

//////////////////////////////////////////////////////
///////////////STATIC/////////////////////////////////
//////////////////////////////////////////////////////

/*! Define a static variable.*/
#define glvm_staticVariable(const, type, name, value)\
static const type& name(){static const type* name = new type(value);return *name;}

#define glvm_staticVariable_def(const, type, name)\
static const type& name();
#define glvm_staticVariable_impl(const, type, encaspulation, name, value)\
const type& encaspulation::name(){static const type* name = new type(value);return *name;}

/*! Define a static variable with static get/set accessors.*/
#define glvm_staticVariableGetSet(type, name, init_value)\
private: glvm_staticVariable(, type, name, init_value)\
public: glvm_staticGetVariable(const, type, name)\
public: glvm_staticSetVariable(type, name)

/*! Define a static variable of type bool with static is/set accessors.*/
#define glvm_staticVariableGetSet_bool(name, init_value)\
private: glvm_staticVariable(, bool, l_##name, init_value)\
public: glvm_staticGetVariable_bool(name)\
public: glvm_staticSetVariable_bool(name)

/*! Same as staticVariable, but with buff suffix to indicate it is a static buffer.*/
#define glvm_staticVariable_buff(type, name, value)\
glvm_staticVariable(, type, name, value)

/*! Define a static variable with a non static accessor.
* Macros are explicitly written because of macro inclusion limitation.*/
#define glvm_staticVariable_const_get(type, name, value)\
public: static const type& name(){static const type* name = new type(value);return *name;}\
public: const type& get_##name() const {return name();}
// Equivalent to:
// public: glvm_staticVariable(, type, name, value)\
// public: glvm_GetVariable(const, type, name)

template <class Tkey, class T>
std::ostream& operator<<(std::ostream& _os, const std::map<Tkey, T>& _map) {
    _os << "[";
    for (typename std::map<Tkey, T>::const_iterator it = _map.begin(); it != _map.end(); it++) {
        _os << " ";
        _os << "(" << it->first << "," << it->second << ")";
    }
    _os << "]";
    return _os;
}

#pragma warning(disable: 4505)

namespace slv {
    /*! Read functions in binary file for misc types. Common data types are being specialized.*/
    namespace rw {

        template <class Tdat>
        bool readB(Tdat& _dat, std::ifstream& _input_file);
        template <class Tdat>
        bool readB(Tdat* _dat, std::ifstream& _input_file);
        template <class Tdat>
        bool readB(const Tdat* _dat, std::ifstream& _input_file);

        /*! Read an instance directly from a file.*/
        template <class Tdat>
        Tdat readB(std::ifstream& _input_file);

        /*! Read by constructor.*/
        template <class Tdat>
        Tdat readB_constr(std::ifstream& _input_file);

        glvm_staticVariable(const, std::string, end_of_file_str, "end of file")

    }
}

template <class Tdat>
bool slv::rw::readB(Tdat& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        return _dat.readB(_input_file);
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, "end of file");
        return false;
    }
}

template <class Tdat>
bool slv::rw::readB(Tdat* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        return _dat->readB(_input_file);
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, "end of file");
        return false;
    }
}

template <class Tdat>
bool slv::rw::readB(const Tdat* _dat, std::ifstream& _input_file) {
    slv::flag::ISSUE(slv::flag::InvalidArgument, "can't read const object");
    return false;
}

template <class Tdat>
Tdat slv::rw::readB(std::ifstream& _input_file) {

    Tdat data;
    slv::rw::readB(data, _input_file);
    return data;
}

template <class Tdat>
Tdat slv::rw::readB_constr(std::ifstream& _input_file) {

    Tdat data(_input_file);
    return data;
}

template <>
bool slv::rw::readB<int>(int& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<unsigned int>(unsigned int& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<long unsigned int>(long unsigned int& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<unsigned long long>(unsigned long long& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<float>(float& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<double>(double& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<bool>(bool& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<char>(char& _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<unsigned char>(unsigned char& _dat, std::ifstream& _input_file);

namespace slv {
    /*! Write functions in binary file for misc types. Common data types are being specialized.*/
    namespace rw {

        template <class Tdat>
        void writeB(const Tdat& _dat, std::ofstream& _output_file);
        template <class Tdat>
        void writeB(Tdat* const _dat, std::ofstream& _output_file);
        template <class Tdat, class Targ>
        void writeB(const Tdat& _dat, std::ofstream& _output_file, const Targ& _arg);
        template <class Tdat, class Targ>
        void writeB(Tdat* const _dat, std::ofstream& _output_file, const Targ& _arg);

    }
}

template <class Tdat>
void slv::rw::writeB(const Tdat& _dat, std::ofstream& _output_file) {
    _dat.writeB(_output_file);
}

template <class Tdat>
void slv::rw::writeB(Tdat* const _dat, std::ofstream& _output_file) {
    _dat->writeB(_output_file);
}

template <class Tdat, class Targ>
void slv::rw::writeB(const Tdat& _dat, std::ofstream& _output_file, const Targ& _arg) {
    _dat.writeB(_output_file, _arg);
}

template <class Tdat, class Targ>
void slv::rw::writeB(Tdat* const _dat, std::ofstream& _output_file, const Targ& _arg) {
    _dat->writeB(_output_file, _arg);
}

template <>
void slv::rw::writeB<int>(const int& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<unsigned int>(const unsigned int& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<long unsigned int>(const long unsigned int& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<unsigned long long>(const unsigned long long& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<float>(const float& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<double>(const double& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<bool>(const bool& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<char>(const char& _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<unsigned char>(const unsigned char& _dat, std::ofstream& _output_file);

template <>
void slv::rw::writeB<int>(int* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<unsigned int>(unsigned int* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<long unsigned int>(long unsigned int* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<unsigned long long>(unsigned long long* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<float>(float* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<double>(double* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<bool>(bool* const _dat, std::ofstream& _output_file);
template <>
void slv::rw::writeB<char>(char* const _dat, std::ofstream& _output_file);

/*! Recommended file to include for slv::rw::read and slv::rw::write functions.*/

// As standard, specialization for STL std::string and std::vector are included.

#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1

namespace slv {
    namespace rw {
        template <class Tdat>
        bool readB(boost::container::vector<Tdat>& _dat, std::ifstream& _input_file);
        template <class Tdat>
        void writeB(const boost::container::vector<Tdat>& _dat, std::ofstream& _output_file);
    }
}

#endif

namespace slv {
    /*! Read functions for misc types. Common data types are being specialized.*/
    namespace rw {

        template <class Tdat>
        bool readB(std::vector<Tdat>& _vector, std::ifstream& _input_file);
        bool readB(std::vector<bool>& _vector, std::ifstream& _input_file);

        template <class Tdat>
        void writeB(const std::vector<Tdat>& _vector, std::ofstream& _output_file);
        void writeB(const std::vector<bool>& _vector, std::ofstream& _output_file);
    }
}

template <class T, size_t N>
std::ostream& operator<<(std::ostream& _os, const std::array<T, N>& _array) {
    _os << "[";
    for (typename std::array<T, N>::const_iterator it = _array.begin(); it != _array.end(); ++it) {
        _os << *it;
        if (std::next(it) != _array.end()) {
            _os << ", ";
        }
    }
    _os << "]";
    return _os;
}

template <class T, size_t N>
std::istream& operator>>(std::istream& _is, std::array<T, N>& _array) {
    int i = 0;
    for (typename std::array<T, N>::iterator it = _array.begin(); it != _array.end(); ++it, i++) {
        std::cout << "enter element: " << i << std::endl;
        _is >> *it;
    }
    return _is;
}

namespace slv {
    /*! Read functions for misc types. Common data types are being specialized.*/
    namespace rw {

        template <class Tdat, size_t N>
        bool readB(std::array<Tdat, N>& _array, std::ifstream& _input_file);

        template <class Tdat, size_t N>
        void writeB(const std::array<Tdat, N>& _array, std::ofstream& _output_file);
    }
}

template <class T>
std::ostream& operator<<(std::ostream& _os, const std::list<T>& _list) {
    _os << "[";
    for (typename std::list<T>::const_iterator it = _list.begin(); it != _list.end(); ++it) {
        _os << " " << *it;
    }
    _os << "]";
    return _os;
}

template <class T>
std::istream& operator>>(std::istream& _is, std::list<T>& _list) {
    _list.clear();
    std::cout << "enter list size:" << std::endl;
    unsigned int list_size;
    _is >> list_size;
    T value;
    for (unsigned int i = 0; i < list_size; i++) {
        std::cout << "enter element: " << i << std::endl;
        _is >> value;
        _list.push_back(value);
    }
    return _is;
}

namespace slv {
    /*! Read functions for misc types. Common data types are being specialized.*/
    namespace rw {

        template <class Tdat>
        bool readB(std::list<Tdat>& _list, std::ifstream& _input_file);

        template <class Tdat>
        void writeB(const std::list<Tdat>& _list, std::ofstream& _output_file);
    }
}

template <class T>
std::ostream& operator<<(std::ostream& _os, const std::deque<T>& _deque) {
    _os << "[";
    for (typename std::deque<T>::const_iterator it = _deque.begin(); it != _deque.end(); ++it) {
        _os << " " << *it;
    }
    _os << "]";
    return _os;
}

template <class T>
std::istream& operator>>(std::istream& _is, std::deque<T>& _deque) {
    _deque.clear();
    std::cout << "enter deque size:" << std::endl;
    unsigned int deque_size;
    _is >> deque_size;
    T value;
    for (unsigned int i = 0; i < deque_size; i++) {
        std::cout << "enter element: " << i << std::endl;
        _is >> value;
        _deque.push_back(value);
    }
    return _is;
}

namespace slv {
    /*! Read functions for misc types. Common data types are being specialized.*/
    namespace rw {

        template <class Tdat>
        bool readB(std::deque<Tdat>& _deque, std::ifstream& _input_file);

        template <class Tdat>
        void writeB(const std::deque<Tdat>& _deque, std::ofstream& _output_file);
    }
}

namespace slv {
	namespace rw {
		template <class Tkey, class T>
		void writeB(const std::map<Tkey, T>& _map, std::ofstream& _output_file);
		template <class Tkey, class T>
		bool readB(std::map<Tkey, T>& _map, std::ifstream& _input_file);
	}
}

namespace slv {
	namespace rw {
		template <class Tkey, class T>
		void writeB(const std::unordered_map<Tkey, T>& _map, std::ofstream& _output_file);
		template <class Tkey, class T>
		bool readB(std::unordered_map<Tkey, T>& _map, std::ifstream& _input_file);
	}
}

namespace slv {
    /*! Read functions for misc types. Common data types are being specialized.*/
    namespace rw {

        /*template <class Tdat>
        bool read(std::vector<Tdat>& _dat, std::ifstream& _input_file);*/
        template <class Tdat1, class Tdat2>
        bool readB(std::pair<Tdat1, Tdat2>& _pair, std::ifstream& _input_file);
        //bool read(std::vector<bool>& _vector, std::ifstream& _input_file);
        template <class Tdat1, class Tdat2>
        void writeB(const std::pair<Tdat1, Tdat2>& _pair, std::ofstream& _output_file);
    }
}

#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1

namespace slv {
    namespace rw {
        template <class Tkey, class T>
        void writeB(const boost::unordered::unordered_map<Tkey, T>& _map, std::ofstream& _output_file);
        template <class Tkey, class T>
        bool readB(boost::unordered::unordered_map<Tkey, T>& _map, std::ifstream& _input_file);
    }

}

#endif

//! This header is only useful for clang compiler or C++ before 17. No need to use it otherwise (adds potential unnecessary headers to include)

#if !defined(GLOVE_PV_SINGLE_HEADER) || OPTION_USE_BOOST==1

template <class Tdat>
bool slv::rw::readB(boost::container::vector<Tdat>& _dat, std::ifstream& _input_file) {

    unsigned int size;
    bool l_read = slv::rw::readB(size, _input_file);
    if (!l_read) size = 0;
    _dat.resize(size);
    for (typename boost::container::vector<Tdat>::iterator it = _dat.begin(); it != _dat.end() && l_read; ++it) {
        l_read = slv::rw::readB(*it, _input_file);
    }

    return l_read;
}

template <class Tdat>
void slv::rw::writeB(const boost::container::vector<Tdat>& _dat, std::ofstream& _output_file) {

    unsigned int size = _dat.size();
    slv::rw::writeB(size, _output_file);
    for (typename boost::container::vector<Tdat>::const_iterator it = _dat.begin(); it != _dat.end(); ++it) {
        slv::rw::writeB(*it, _output_file);
    }
}

template <class Tkey, class T>
void slv::rw::writeB(const boost::unordered::unordered_map<Tkey, T>& _map, std::ofstream& _output_file) {

    slv::rw::writeB((unsigned int)_map.size(), _output_file);
    for (typename boost::unordered::unordered_map<Tkey, T>::const_iterator it = _map.begin(); it != _map.end(); it++) {

        slv::rw::writeB(it->first, _output_file);
        slv::rw::writeB(it->second, _output_file);
    }

}

template <class Tkey, class T>
bool slv::rw::readB(boost::unordered::unordered_map<Tkey, T>& _map, std::ifstream& _input_file) {

    _map.clear();
    unsigned int size;
    bool l_read = slv::rw::readB(size, _input_file);
    if (!l_read) size = 0;
    Tkey key;
    T value;
    for (unsigned int i = 0; i < size && l_read; i++) {
        l_read = slv::rw::readB(key, _input_file);
        if (l_read) l_read = slv::rw::readB(value, _input_file);
        _map[key] = value;
    }

    return l_read;

}

#endif

template <class Tdat, size_t N>
bool slv::rw::readB(std::array<Tdat, N>& _array, std::ifstream& _input_file) {
    bool l_read = true;
    for (typename std::array<Tdat, N>::iterator it = _array.begin(); it != _array.end() && l_read; ++it) {
        l_read = slv::rw::readB(*it, _input_file);
    }
    return l_read;
}

template <class Tdat, size_t N>
void slv::rw::writeB(const std::array<Tdat, N>& _array, std::ofstream& _output_file) {
    for (typename std::array<Tdat, N>::const_iterator it = _array.begin(); it != _array.end(); ++it) {
        slv::rw::writeB(*it, _output_file);
    }
}

template <>
bool slv::rw::readB<std::string>(std::string& _dat, std::ifstream& _input_file);
template <>
void slv::rw::writeB<std::string>(const std::string& _dat, std::ofstream& _output_file);

template <class Tdat>
bool slv::rw::readB(std::vector<Tdat>& _vector, std::ifstream& _input_file) {
    unsigned int size;
    bool l_read = slv::rw::readB(size, _input_file);
    if (size > 100000000) {
        slv::flag::ISSUE(slv::flag::InvalidArgument, "reading a vector of size : ", size, " is suspicious. Data formatting is probably wrong.");
    }
    if (!l_read) size = 0;
    _vector.resize(size);
    for (typename std::vector<Tdat>::iterator it = _vector.begin(); it != _vector.end() && l_read; ++it) {
        l_read = slv::rw::readB(*it, _input_file);
    }
    return l_read;
}

template <class Tdat>
void slv::rw::writeB(const std::vector<Tdat>& _vector, std::ofstream& _output_file) {
    unsigned int size = (unsigned int)_vector.size();
    slv::rw::writeB(size, _output_file);
    for (typename std::vector<Tdat>::const_iterator it = _vector.begin(); it != _vector.end(); ++it) {
        slv::rw::writeB(*it, _output_file);
    }
}

template <class Tdat>
bool slv::rw::readB(std::deque<Tdat>& _deque, std::ifstream& _input_file) {
    unsigned int size;
    bool l_read = slv::rw::readB(size, _input_file);
    if (size > 100000000) {
        slv::flag::ISSUE(slv::flag::InvalidArgument, "reading a vector of size : ", size, " is suspicious. Data formatting is probably wrong.");
    }
    if (!l_read) size = 0;
    _deque.resize(size);
    for (typename std::deque<Tdat>::iterator it = _deque.begin(); it != _deque.end() && l_read; ++it) {
        l_read = slv::rw::readB(*it, _input_file);
    }
    return l_read;
}

template <class Tdat>
void slv::rw::writeB(const std::deque<Tdat>& _deque, std::ofstream& _output_file) {
    unsigned int size = (unsigned int)_deque.size();
    slv::rw::writeB(size, _output_file);
    for (typename std::deque<Tdat>::const_iterator it = _deque.begin(); it != _deque.end(); ++it) {
        slv::rw::writeB(*it, _output_file);
    }
}

template <class Tdat>
bool slv::rw::readB(std::list<Tdat>& _list, std::ifstream& _input_file) {
    unsigned int size;
    bool l_read = slv::rw::readB(size, _input_file);
    if (size > 100000000) {
        slv::flag::ISSUE(slv::flag::InvalidArgument, "reading a vector of size : ", size, " is suspicious. Data formatting is probably wrong.");
    }
    if (!l_read) size = 0;
    _list.resize(size);
    for (typename std::list<Tdat>::iterator it = _list.begin(); it != _list.end() && l_read; ++it) {
        l_read = slv::rw::readB(*it, _input_file);
    }
    return l_read;
}

template <class Tdat>
void slv::rw::writeB(const std::list<Tdat>& _list, std::ofstream& _output_file) {
    unsigned int size = (unsigned int)_list.size();
    slv::rw::writeB(size, _output_file);
    for (typename std::list<Tdat>::const_iterator it = _list.begin(); it != _list.end(); ++it) {
        slv::rw::writeB(*it, _output_file);
    }
}

template <class Tdat1, class Tdat2>
bool slv::rw::readB(std::pair<Tdat1, Tdat2>& _pair, std::ifstream& _input_file) {
    bool l_read = slv::rw::readB(_pair.first, _input_file);
    if (l_read) l_read = slv::rw::readB(_pair.second, _input_file);
    return l_read;
}

template <class Tdat1, class Tdat2>
void slv::rw::writeB(const std::pair<Tdat1, Tdat2>& _pair, std::ofstream& _output_file) {
    slv::rw::writeB(_pair.first, _output_file);
    slv::rw::writeB(_pair.second, _output_file);
}

template <class Tkey, class T>
void slv::rw::writeB(const std::map<Tkey, T>& _map, std::ofstream& _output_file) {

	slv::rw::writeB((unsigned int)_map.size(), _output_file);
	for (typename std::map<Tkey, T>::const_iterator it = _map.begin(); it != _map.end(); it++) {

		slv::rw::writeB(it->first, _output_file);
		slv::rw::writeB(it->second, _output_file);
	}

}

template <class Tkey, class T>
bool slv::rw::readB(std::map<Tkey, T>& _map, std::ifstream& _input_file) {

	_map.clear();
	unsigned int size;
	bool l_read = slv::rw::readB(size, _input_file);
	if (!l_read) size = 0;
	Tkey key;
	T value;
	for (unsigned int i = 0; i < size && l_read; i++) {
		l_read = slv::rw::readB(key, _input_file);
		if (l_read) l_read = slv::rw::readB(value, _input_file);
		_map[key] = value;
	}

	return l_read;
}

template <class Tkey, class T>
void slv::rw::writeB(const std::unordered_map<Tkey, T>& _map, std::ofstream& _output_file) {

	slv::rw::writeB((unsigned int)_map.size(), _output_file);
	for (typename std::unordered_map<Tkey, T>::const_iterator it = _map.begin(); it != _map.end(); it++) {

		slv::rw::writeB(it->first, _output_file);
		slv::rw::writeB(it->second, _output_file);
	}

}

template <class Tkey, class T>
bool slv::rw::readB(std::unordered_map<Tkey, T>& _map, std::ifstream& _input_file) {

	_map.clear();
	unsigned int size;
	bool l_read = slv::rw::readB(size, _input_file);
	if (!l_read) size = 0;
	Tkey key;
	T value;
	for (unsigned int i = 0; i < size && l_read; i++) {
		l_read = slv::rw::readB(key, _input_file);
		if (l_read) l_read = slv::rw::readB(value, _input_file);
		_map[key] = value;
	}

	return l_read;
}

/*! Get name of template type by using typeid.*/
template <class T, typename = void>
struct SlvDataName {
    static std::string name() {
        return typeid(T).name();
    }
};

template <typename T>
class has_name_method {
    typedef char one;
    struct two { char x[2]; };
    template <typename T2> static one test(decltype(&T2::name));
    template <typename T2> static two test(...);
public:
    enum { value = sizeof(test<T>(0)) == sizeof(char) };
};

/*! Get name of template type. Specializaition. If the template type has a static name() method, use it for name.*/
template <class T>
struct SlvDataName<T, typename std::enable_if<has_name_method<T>::value>::type> {
    static const std::string& name() {
        return T::name();
    }
};

/*! Get name of template type. Specialization. If the type is a container, add container name.*/
template < template <class T> class Tbox, class T>
struct SlvDataName< Tbox<T>, typename std::enable_if<has_name_method<Tbox<T> >::value>::type> {
    static std::string name() {
        std::string name = Tbox<T>::name();
        name += "<";
        name += SlvDataName<T>::name();
        name += ">";
        return name;
    }
};

// As standard, specialization for STL std::string and std::vector are included.

// Arithmetic Types explicit specializations

/*! Get name of template type. Specialization. Name int.*/
template <>
struct SlvDataName<int> {
    glvm_staticVariable(const, std::string, name, "int");
};

/*! Get name of template type. Specialization. Name unsigned int.*/
template <>
struct SlvDataName<unsigned int> {
    glvm_staticVariable(const, std::string, name, "uint");
};

/*! Get name of template type. Specialization. Name float.*/
template <>
struct SlvDataName<float> {
    glvm_staticVariable(const, std::string, name, "float");
};

/*! Get name of template type. Specialization. Name double.*/
template <>
struct SlvDataName<double> {
    glvm_staticVariable(const, std::string, name, "double");
};

/*! Get name of template type. Specialization. Name bool.*/
template <>
struct SlvDataName<bool> {
    glvm_staticVariable(const, std::string, name, "bool");
};

/*! Get name of template type. Specialization. Name std::string.*/
template <>
struct SlvDataName<std::string> {
    glvm_staticVariable(const, std::string, name, "std::string");
};

/*! Get name of template type. Specialization. Name std::vector.*/
template <class T>
struct SlvDataName< std::vector<T> > {
    static std::string name() {
        std::string name = "std::vector";
        name += "<";
        name += SlvDataName<T>::name();
        name += ">";
        return name;
    }
};

/*! Get name of template type. Specialization. Name std::array.*/
template <class T, size_t N>
struct SlvDataName< std::array<T, N> > {
    static std::string name() {
        std::string name = "std::array";
        name += "<";
        name += SlvDataName<T>::name();
        name += ", ";
        name += std::to_string(N);
        name += ">";
        return name;
    }
};

/*! Get name of template type. Specialization. Name std::deque.*/
template <class T>
struct SlvDataName< std::deque<T> > {
    static std::string name() {
        std::string name = "std::deque";
        name += "<";
        name += SlvDataName<T>::name();
        name += ">";
        return name;
    }
};

/*! Get name of template type. Specialization. Name std::list.*/
template <class T>
struct SlvDataName< std::list<T> > {
    static std::string name() {
        std::string name = "std::list";
        name += "<";
        name += SlvDataName<T>::name();
        name += ">";
        return name;
    }
};

/*! Get name of template type. Specialization. Name std::pair.*/
template <class Tvalue1, class Tvalue2>
struct SlvDataName< std::pair<Tvalue1, Tvalue2> > {
    static std::string name() {
        std::string name = "std::pair";
        name += "<";
        name += SlvDataName<Tvalue1>::name();
        name += ", ";
        name += SlvDataName<Tvalue2>::name();
        name += ">";
        return name;
    }
};

/*! Get name of template type. Specialization. Name std::map.*/
template <class Tkey, class Tvalue>
struct SlvDataName< std::map<Tkey, Tvalue> > {
    static std::string name() {
        std::string name = "std::map";
        name += "<";
        name += SlvDataName<Tkey>::name();
        name += ", ";
        name += SlvDataName<Tvalue>::name();
        name += ">";
        return name;
    }
};

template <class Tkey, class T>
std::ostream& operator<<(std::ostream& _os, const std::unordered_map<Tkey, T>& _map) {
    _os << "[";
    for (typename std::unordered_map<Tkey, T>::const_iterator it = _map.begin(); it != _map.end(); it++) {
        _os << " ";
        _os << "(" << it->first << "," << it->second << ")";
    }
    _os << "]";
    return _os;
}

/*! Get name of template type. Specialization. Name std::unordered_map.*/
template <class Tkey, class Tvalue>
struct SlvDataName< std::unordered_map<Tkey, Tvalue> > {
    static std::string name() {
        std::string name = "std::unordered_map";
        name += "<";
        name += SlvDataName<Tkey>::name();
        name += ", ";
        name += SlvDataName<Tvalue>::name();
        name += ">";
        return name;
    }
};

#define VECTOR_EXPLICIT_ALGORITHM 0 //Explicit reimplementation of algorithms

namespace slv {

    /*! Methods related to manipulation of std::vector which is by default std::vector. See OPTION_STD_VECTOR_DEBUG.*/
    namespace vector {

        /*! Remove from \p _elements the first value which equals \p _element.
        * Return true if found and removed.*/
        template <class T>
        bool remove(const T& _element, std::vector<T>& _elements);
        /*! Remove all \p _elements in \p element.*/
        template <class T>
        void remove(std::vector<T>& elements, const std::vector<T>& _elements);
        /*! Add all \p _elements in \p elements.*/
        template <class T>
        void add(std::vector<const T*>& elements, const std::vector<T*>& _elements);
        /*! Add all \p _elements in \p element.*/
        template <class T>
        void add(std::vector<const T>& elements, const std::vector<T>& _elements);
        /*! Add all \p _elements in \p element.*/
        template <class T>
        void add(std::vector<T>& elements, const std::vector<T>& _elements);
        /*! Add all \p _elements1 and \p _elements2 (concatenate) and return result.*/
        template <class T>
        std::vector<T> add(const std::vector<T>& _elements1, const std::vector<T>& _elements2);
        /*! Add all \p _elements in \p elements (concatenate). Static cast of Targ* to T*.*/
        template <class T, class Targ>
        void add_static_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements);
        /*! Add all \p _elements in \p elements (concatenate). Static cast of Targ* to T*.*/
        template <class T, class Targ>
        void add_static_cast(std::vector<T*>& elements, const std::vector<Targ*>& _elements);
        /*! Add all \p _elements in \p elements (concatenate). Dynamic cast of Targ* to T*.*/
        template <class T, class Targ>
        void add_dynamic_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements);
        /*! Converts \p _elements into \p elements by static cast of Targ* to T*.*/
        template <class T, class Targ>
        void assign_static_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements);
        /*! Converts \p _elements into \p elements by static cast of Targ* to T*.*/
        template <class T, class Targ>
        void assign_static_cast(std::vector<T*>& elements, const std::vector<Targ*>& _elements);
        /*! Converts \p _elements into \p elements by dynamic cast of Targ* to T*.*/
        template <class T, class Targ>
        void assign_dynamic_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements);
        /*! Return the first index where \p _elements is equal to \p _element. Returns -1 if no match is found.*/
        template <class T>
        unsigned int getIndex(const T& _element, const std::vector<T>& _elements);
        /*! Check if \p _elements contains a value equal to \p _element*/
        template <class T>
        bool find(const T& _element, const std::vector<T>& _elements);
        /*! Check if \p _elements contains a value equal to \p _element*/
        template <class T>
        bool find(const T& _element, const std::vector<const T>& _elements);
        /*! Check if \p _elements contains a dereferenced pointer equal to \p _element*/
        template <class T>
        bool find(const T& _element, const std::vector<T*>& _elements);
        /*! Returns the position where \p _element should be inserted in \p _elements in descending order.*/
        template <class T>
        unsigned int sortIndex_descending(const T& _element, const std::vector<T>& _elements);
        /*! Returns the position where \p _element should be inserted in \p _elements in ascending order.*/
        template <class T>
        unsigned int sortIndex_ascending(const T& _element, const std::vector<T>& _elements);

        /*! Return true if for each element of \p _vector1, there is an equal element in \p _vector2. False otherwise.*/
        template <class T>
        bool equalUnordered(const std::vector<T>& _vector1, const std::vector<T>& _vector2);

        /*! Return ascending sequence [\p _start, \p _start + \p _increment, \p _start + 2* \p _increment, ..] of size \p _size.*/
        template <class T>
        std::vector<T> make_sequence(const unsigned int _size, const T _start = 0, const T _increment = T(1));

        /*! Sort \p _element in ascending order up to \p _range index. If \p _range is 0, sort all vector.*/
        template <class T>
        void sort_ascending(std::vector<T>& _elements, unsigned int _range = 0);
        /*! Sort \p _element in ascending order up to \p _range index. If \p _range is 0, sort all vector.
        * Provided \p _elements_arg has the same size as \p elements, rearrange \p _elements_arg in the same way as \p _elements.*/
        template <class T, class Targ>
        void sort_ascending(std::vector<T>& _elements, std::vector<Targ>& _elements_arg, unsigned int _range = 0);
        /*! Sort \p _element in descending order up to \p _range index. If \p _range is 0, sort all vector.*/
        template <class T>
        void sort_descending(std::vector<T>& _elements, unsigned int _range = 0);
        /*! Sort \p _element in descending order up to \p _range index. If \p _range is 0, sort all vector.
        * Provided \p _elements_arg has the same size as \p elements, rearrange \p _elements_arg in the same way as \p _elements.*/
        template <class T, class Targ>
        void sort_descending(std::vector<T>& _elements, std::vector<Targ>& _elements_arg, unsigned int _range = 0);

        /*! Returns the position where \p _element would be inserted in \p _elements in descending order.*/
        template <class T>
        unsigned int sortInsert_descending(const T& _element, std::vector<T>& _elements);
        /*! Returns the position where \p _element would be inserted in \p _elements in ascending order.*/
        template <class T>
        unsigned int sortInsert_ascending(const T& _element, std::vector<T>& _elements);

        /*! Return true if every element of \p _elements1 matches the element of \p _elements2 (same order).*/
        template <class T>
        bool is_equal(const std::vector<T>& _elements1, const std::vector<T>& _elements2);

    }
}

template <class T>
bool slv::vector::remove(const T& _element, std::vector<T>& _elements) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element == _elements[el]);
        el++;
    }
    if (l_found) {
        el--;
        _elements.erase(_elements.begin() + el);
    }
    return l_found;
#else

    typename std::vector<T>::iterator it = std::find(_elements.begin(), _elements.end(), _element);
    if (it != _elements.end()) {
        _elements.erase(it);
        return true;
    } else {
        return false;
    }
#endif
}

template <class T>
void slv::vector::remove(std::vector<T>& elements, const std::vector<T>& _elements) {

    for (typename std::vector<T>::const_iterator it = _elements.begin(); it != _elements.end(); ++it) {
        remove(*it, elements);
    }

}

template <class T>
void slv::vector::add(std::vector<const T*>& elements, const std::vector<T*>& _elements) {

    for (typename std::vector<T>::const_iterator it = _elements.begin(); it != _elements.end(); ++it) {
        elements.push_back(*it);
    }
}

template <class T>
void slv::vector::add(std::vector<const T>& elements, const std::vector<T>& _elements) {

    for (typename std::vector<T>::const_iterator it = _elements.begin(); it != _elements.end(); ++it) {
        elements.push_back(*it);
    }

}

template <class T>
void slv::vector::add(std::vector<T>& elements, const std::vector<T>& _elements) {
    elements.insert(elements.end(), _elements.begin(), _elements.end());
}

template <class T>
std::vector<T> slv::vector::add(const std::vector<T>& _elements1, const std::vector<T>& _elements2) {
    std::vector<T> elements = _elements1;
    slv::vector::add(elements, _elements2);
    return elements;
}

template <class T, class Targ>
void slv::vector::add_static_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements) {

    for (typename std::vector<const Targ*>::const_iterator it = _elements.begin(); it != _elements.end(); it++) {
        elements.push_back(static_cast<const T*> (*it));
    }
}

template <class T, class Targ>
void slv::vector::add_static_cast(std::vector<T*>& elements, const std::vector<Targ*>& _elements) {

    for (typename std::vector<Targ*>::const_iterator it = _elements.begin(); it != _elements.end(); it++) {
        elements.push_back(static_cast<T*> (*it));
    }
}

template <class T, class Targ>
void slv::vector::add_dynamic_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements) {

    for (typename std::vector<const Targ*>::const_iterator it = _elements.begin(); it != _elements.end(); it++) {
        elements.push_back(dynamic_cast<const T*> (*it));
    }
}

template <class T, class Targ>
void slv::vector::assign_static_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements) {

    elements.resize(0);
    add_static_cast(elements, _elements);
}

template <class T, class Targ>
void slv::vector::assign_static_cast(std::vector<T*>& elements, const std::vector<Targ*>& _elements) {

    elements.resize(0);
    add_static_cast(elements, _elements);
}

template <class T, class Targ>
void slv::vector::assign_dynamic_cast(std::vector<const T*>& elements, const std::vector<const Targ*>& _elements) {

    elements.resize(0);
    vectorAdd_dynamic_cast(elements, _elements);
}

template <class T>
unsigned int slv::vector::getIndex(const T& _element, const std::vector<T>& _elements) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element == _elements[el]);
        el++;
    }
    if (l_found) {
        el--;
        return el;
    } else {
        //std::cout << "WARNING - vectorGetIndex - there is no element " << _element << " in the vector" << std::endl;
        return -1;
    }
#else
    typename std::vector<T>::const_iterator it = std::find(_elements.begin(), _elements.end(), _element);
    if (it != _elements.end()) {
        return std::distance(_elements.begin(), it);
    } else {
        return -1;
    }
#endif
}

template <class T>
bool slv::vector::find(const T& _element, const std::vector<T>& _elements) {
#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element == _elements[el]);
        el++;
    }
    return l_found;
#else
    return std::find(_elements.begin(), _elements.end(), _element) != _elements.end();
#endif
}

template <class T>
bool slv::vector::find(const T& _element, const std::vector<const T>& _elements) {
#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element == _elements[el]);
        el++;
    }
    return l_found;
#else
    return std::find(_elements.begin(), _elements.end(), _element) != _elements.end();
#endif
}

template <class T>
bool slv::vector::find(const T& _element, const std::vector<T*>& _elements) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element == *_elements[el]);
        el++;
    }
    return l_found;
#else

    typename std::vector<T*>::const_iterator it = _elements.begin();
    while (it != _elements.end() && **it != _element) {
        ++it;
    }

    return it != _elements.end();
#endif
}

template <class T>
unsigned int slv::vector::sortIndex_descending(const T& _element, const std::vector<T>& _elements) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element > _elements[el]);
        el++;
    }
    if (l_found) {
        el--;
    }
    return el;
#else

    typename std::vector<T>::const_iterator it = _elements.begin();
    bool l_found = false;
    while (!l_found && it != _elements.end()) {
        l_found = (_element > *it);
        if (!l_found) ++it;
    }

    return std::distance(_elements.begin(), it);
#endif
}

template <class T>
unsigned int slv::vector::sortIndex_ascending(const T& _element, const std::vector<T>& _elements) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    bool l_found = false;
    unsigned int el = 0;
    while (!l_found && el < _elements.size()) {
        l_found = (_element < _elements[el]);
        el++;
    }
    if (l_found) {
        el--;
    }
    return el;
#else

    typename std::vector<T>::const_iterator it = _elements.begin();
    bool l_found = false;
    while (!l_found && it != _elements.end()) {
        l_found = (_element < *it);
        if (!l_found) ++it;
    }

    return std::distance(_elements.begin(), it);
#endif
}

template <class T>
unsigned int slv::vector::sortInsert_descending(const T& _element, std::vector<T>& _elements) {

    unsigned int el = sortIndex_decrease(_element, _elements);
    _elements.insert(_elements.begin() + el, _element);
    return el;
}

template <class T>
unsigned int slv::vector::sortInsert_ascending(const T& _element, std::vector<T>& _elements) {

    unsigned int el = sortIndex_increase(_element, _elements);
    _elements.insert(_elements.begin() + el, _element);
    return el;
}

template <class T>
bool slv::vector::equalUnordered(const std::vector<T>& _vector1, const std::vector<T>& _vector2) {

    if (_vector1.size() != _vector2.size()) {
        return false;
    } else {
        unsigned int i = 0;
        unsigned int j;
        std::vector<bool> vector2_already_match(_vector2.size(), false);
        bool l_equal = true;
        while (l_equal && i < _vector1.size()) {
            j = 0;
            while (j < _vector2.size() && (_vector1[i] != _vector2[j] || vector2_already_match[j])) {
                j++;
            }//stops : either if j out of range, either if matching is found (provided not already match)
            if (j == _vector2.size()) {
                l_equal = false;//no matching found
            } else {
                vector2_already_match[j] = true;
                i++;
            }
        }
        return l_equal;
    }

}

template <class T>
std::vector<T> slv::vector::make_sequence(const unsigned int _size, const T _start, const T _increment) {

    std::vector<T> vector_sequence;
    vector_sequence.push_back(_start);
    for (unsigned int i = 1; i < _size; i++) {
        vector_sequence.push_back(vector_sequence.back() + _increment);
    }

    return vector_sequence;
}

template <class T>
void slv::vector::sort_ascending(std::vector<T>& _elements, unsigned int _range) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    if (_range == 0) {
        _range = _elements.size();
    }

    unsigned int el, el2;
    for (el = 1; el < _range; el++) {
        el2 = el;
        while (el2 > 0 && _elements[el2] < _elements[el2 - 1]) {
            std::swap(_elements[el2 - 1], _elements[el2]);
            el2--;
        }
    }
#else
    typename std::vector<T>::iterator it;
    if (_range != 0) {
        it = _elements.begin() + _range;
    } else {
        it = _elements.end();
    }
    std::sort(_elements.begin(), it);
#endif
}

template <class T, class Targ>
void slv::vector::sort_ascending(std::vector<T>& _elements, std::vector<Targ>& _elements_arg, unsigned int _range) {

    if (_elements.size() == _elements_arg.size()) {

        if (_range == 0) {
            _range = _elements.size();
        }

        unsigned int el, el2;
        for (el = 1; el < _range; el++) {
            el2 = el;
            while (el2 > 0 && _elements[el2] < _elements[el2 - 1]) {
                std::swap(_elements[el2 - 1], _elements[el2]);
                std::swap(_elements_arg[el2 - 1], _elements_arg[el2]);
                el2--;
            }
        }

    } else {
        slv::flag::ISSUE(slv::flag::InvalidArgument, "bad size");
    }

}

template <class T>
void slv::vector::sort_descending(std::vector<T>& _elements, unsigned int _range) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    if (_range == 0) {
        _range = _elements.size();
    }

    unsigned int el, el2;
    for (el = 1; el < _range; el++) {
        el2 = el;
        while (el2 > 0 && _elements[el2] > _elements[el2 - 1]) {
            std::swap(_elements[el2 - 1], _elements[el2]);
            el2--;
        }
    }
#else

    typename std::vector<T>::iterator it;
    if (_range != 0) {
        it = _elements.begin() + _range;
    } else {
        it = _elements.end();
    }
    std::sort(_elements.begin(), it, std::greater<T>());
#endif

}

template <class T, class Targ>
void slv::vector::sort_descending(std::vector<T>& _elements, std::vector<Targ>& _elements_arg, unsigned int _range) {

    if (_elements.size() == _elements_arg.size()) {

        if (_range == 0) {
            _range = _elements.size();
        }

        unsigned int el, el2;
        for (el = 1; el < _range; el++) {
            el2 = el;
            while (el2 > 0 && _elements[el2] > _elements[el2 - 1]) {
                std::swap(_elements[el2 - 1], _elements[el2]);
                std::swap(_elements_arg[el2 - 1], _elements_arg[el2]);
                el2--;
            }
        }

    } else {
        slv::flag::ISSUE(slv::flag::InvalidArgument, "bad size");
    }

}

template <class T>
bool slv::vector::is_equal(const std::vector<T>& _elements1, const std::vector<T>& _elements2) {

#if VECTOR_EXPLICIT_ALGORITHM==1
    if (_elements1.size() == _elements2.size()) {
        unsigned int i = 0;
        bool l_ok = true;
        while (l_ok && i < _elements1.size()) {
            l_ok = (_elements1[i] == _elements2[i]);
            i++;
        }
        return l_ok;
    } else {
        return false;
    }
#else
    bool l_equal = true;
    if (_elements1.size() == _elements2.size()) {

        typename std::vector<T>::const_iterator it1 = _elements1.begin();
        typename std::vector<T>::const_iterator it2 = _elements2.begin();

        while (l_equal && it1 != _elements1.end()) {
            l_equal = (*it1 == *it2);
            ++it1;
            ++it2;
        }

    } else {
        l_equal = false;
    }
    return l_equal;
#endif

}

#undef VECTOR_EXPLICIT_ALGORITHM

/*! Class allowing to access the name of instance when the type is not known.
* Usefull for templated parametrizations to redirect pure virtual get_name() to base parametrization's.
* Usefull to be inherited by classes having a static name, defined by macro staticGetVariable.*/
class SlvVirtualGetName {

public:
    SlvVirtualGetName() {}
    virtual ~SlvVirtualGetName() {}
    /*! Get name of the instance.*/
    virtual const std::string& get_name() const = 0;
};

namespace slv {
    /*! Some typical labels. Related to SlvLabeling.*/
    namespace lbl {
        typedef unsigned int Identifier;
        static const Identifier null_Id = 99999999;
        typedef std::string Name;// Related to SlvLblName.
        static const Name null_name = "";
    }
}

/*! Label class for unicity check. Mostly used to be inherited. Allows labeling of the child class with template type Tlabel.
* The label is not supposed to change after instantation.*/
template <class Tlabel>
class SlvLabeling : virtual public SlvOS {

public:

	typedef Tlabel Tlabeling;

private:

	const Tlabel label;

public:

	SlvLabeling(const Tlabel& _label);
	~SlvLabeling();

	/*! Get label value.*/
	const Tlabel& get_label() const;

protected:

	void ostream(std::ostream& _os) const;

};

template <class Tlabel>
SlvLabeling<Tlabel>::SlvLabeling(const Tlabel& _label) :label(_label) {

}

template <class Tlabel>
SlvLabeling<Tlabel>::~SlvLabeling() {

}

template <class Tlabel>
const Tlabel& SlvLabeling<Tlabel>::get_label() const {
	return label;
}

template <class Tlabel>
void SlvLabeling<Tlabel>::ostream(std::ostream& _os) const {

	_os << "SlvLabeling: " << label << std::endl;
}

/*! Convenience class to label as name (unsigned int)*/
class SlvLblIdentifier : public SlvLabeling<slv::lbl::Identifier> {

public:

	SlvLblIdentifier(slv::lbl::Identifier _Id);
	~SlvLblIdentifier();

	/*! Reimplementation of get_label() as get_Id().*/
	const slv::lbl::Identifier& get_Id() const;

};

/*! Convenience class to label as name (std::string) using dedicated class SlvLabeling.*/
class SlvLblName : public SlvLabeling<slv::lbl::Name>, virtual public SlvOS, virtual public SlvVirtualGetName {

public:

	SlvLblName(std::string _name);
	virtual ~SlvLblName();

	/*! Reimplementation of get_label() as get_name().*/
	const std::string& get_name() const;

private:

	void ostream(std::ostream& _os) const;

};

/*! Class in charge of enum management. Not recommended to use directly. Use glvm_SlvEnum of glvm_SlvEnum_simple for instantiation.
* Example: glvm_SlvEnum(EnumName, A, B, C, D), or glvm_SlvEnum_named(EnumName, A, "A", B, "B", C, "C", D, "D").*/
template <class Tenum>
class SlvEnum {

public:
    static const std::map<Tenum, std::string>& enum_names() {
        static std::map<Tenum, std::string>* enum_names = new std::map<Tenum, std::string>(create_enum_names());
        return *enum_names;
    }
    static const std::map<Tenum, int>& enum_positions() {
        static std::map<Tenum, int>* enum_position = new std::map<Tenum, int>(create_enum_positions());
        return *enum_position;
    }
    static const std::vector<Tenum>& enum_positions_inv() {
        static std::vector<Tenum>* enum_positions_inv = new std::vector<Tenum>(create_enum_positions_inv());
        return *enum_positions_inv;
    }
private:
    static const std::map<std::string, Tenum>& enum_names_inv() {
        static std::map<std::string, Tenum>* enum_names_inv = new std::map<std::string, Tenum>(create_enum_names_inv());
        return *enum_names_inv;
    }

public:
    /*! Get enum size.*/
    static const unsigned int size() { return (unsigned int)enum_names().size(); };
    /*! Get name associated to the i-th enum element.*/
    static const std::string& get_name(const unsigned int i) {
        //return get_name(static_cast<Tenum>(i));
        return get_name(enum_positions_inv()[i]);
    }
    /*! Get name associated to enum element \p _enum_item.*/
    static const std::string& get_name(const Tenum& _enum_item) {
        return enum_names().at(_enum_item);
    }
    /*! Get index of enum element (i-th enum element) \p _enum_item.*/
    static unsigned int get_index(const Tenum& _enum_item) {
        //return static_cast<unsigned int>(_enum_item);
        return enum_positions().at(_enum_item);
    }
    /*! Get enum element corresponding to the associated name \p _enum_item_name.
    * If \p _enum_item_name is not found, returns first enum element. */
    static Tenum get_enum(const std::string& _enum_item_name) {
        typename std::map<std::string, Tenum>::const_iterator it = enum_names_inv().find(_enum_item_name);
        if (it != enum_names_inv().end()) {
            return it->second;
        } else {
            return Tenum();
        }
    }

private:
    static std::map<Tenum, std::string> create_enum_names();
    static std::map<std::string, Tenum> create_enum_names_inv() {
        std::map<std::string, Tenum> enum_names_inv;
        for (typename std::map<Tenum, std::string>::const_iterator it = enum_names().begin(); it != enum_names().end(); it++) {
            enum_names_inv[it->second] = it->first;
        }
        return enum_names_inv;
    }
    static std::map<Tenum, int> create_enum_positions() {
        std::map<Tenum, int> enum_positions;
        int count = 0;
        for (typename std::map<Tenum, std::string>::const_iterator it = enum_names().begin(); it != enum_names().end(); it++) {
            enum_positions[it->first] = count;
            count++;
        }
        return enum_positions;
    }
    static std::vector<Tenum> create_enum_positions_inv() {
        std::vector<Tenum> enum_positions_inv;
        for (typename std::map<Tenum, std::string>::const_iterator it = enum_names().begin(); it != enum_names().end(); it++) {
            enum_positions_inv.push_back(it->first);
        }
        return enum_positions_inv;
    }

};

#define glvm_pv_SlvEnum_misc(enum_Type)\
inline std::ostream& operator<<(std::ostream& _os, const enum_Type& _enum_item){_os << SlvEnum<enum_Type>::get_name(_enum_item);return _os;}\
inline std::istream& operator>>(std::istream& _is, enum_Type& _enum_item){std::string enum_item_str;_is>>enum_item_str;_enum_item=SlvEnum<enum_Type>::get_enum(enum_item_str);return _is;}\
template <> inline void slv::rw::writeB<enum_Type>(const enum_Type& _value, std::ofstream& _output_file) {slv::rw::writeB(int(_value), _output_file);}\
template <> inline bool slv::rw::readB<enum_Type>(enum_Type& _value, std::ifstream& _input_file) {int i; bool l_read = slv::rw::readB(i, _input_file); _value=static_cast<enum_Type>(i); return l_read;}\

#define glvm_SlvEnum1_declaration(enum_Type,value1)\
enum class enum_Type {value1};

#define glvm_SlvEnum1_named_implementation(enum_Type,value1, name1)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum1_named(enum_Type,value1, name1)\
glvm_SlvEnum1_declaration(enum_Type,value1)\
glvm_SlvEnum1_named_implementation(enum_Type,value1, name1)

#define glvm_SlvEnum1(enum_Type,value1) glvm_SlvEnum1_named(enum_Type,value1, #value1)
#define glvm_SlvEnum1_implementation(enum_Type,value1) glvm_SlvEnum1_named_implementation(enum_Type,value1, #value1)

#define glvm_SlvEnum2_declaration(enum_Type,value1, value2)\
enum class enum_Type {value1, value2};

#define glvm_SlvEnum2_named_implementation(enum_Type,value1, name1, value2, name2)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum2_named(enum_Type,value1, name1, value2, name2)\
glvm_SlvEnum2_declaration(enum_Type,value1, value2)\
glvm_SlvEnum2_named_implementation(enum_Type,value1, name1, value2, name2)

#define glvm_SlvEnum2(enum_Type,value1, value2) glvm_SlvEnum2_named(enum_Type,value1, #value1, value2, #value2)
#define glvm_SlvEnum2_implementation(enum_Type,value1, value2) glvm_SlvEnum2_named_implementation(enum_Type,value1, #value1, value2, #value2)

#define glvm_SlvEnum3_declaration(enum_Type,value1, value2, value3)\
enum class enum_Type {value1, value2, value3};

#define glvm_SlvEnum3_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum3_named(enum_Type,value1, name1, value2, name2, value3, name3)\
glvm_SlvEnum3_declaration(enum_Type,value1, value2, value3)\
glvm_SlvEnum3_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3)

#define glvm_SlvEnum3(enum_Type,value1, value2, value3) glvm_SlvEnum3_named(enum_Type,value1, #value1, value2, #value2, value3, #value3)
#define glvm_SlvEnum3_implementation(enum_Type,value1, value2, value3) glvm_SlvEnum3_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3)

#define glvm_SlvEnum4_declaration(enum_Type,value1, value2, value3, value4)\
enum class enum_Type {value1, value2, value3, value4};

#define glvm_SlvEnum4_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum4_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4)\
glvm_SlvEnum4_declaration(enum_Type,value1, value2, value3, value4)\
glvm_SlvEnum4_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4)

#define glvm_SlvEnum4(enum_Type,value1, value2, value3, value4) glvm_SlvEnum4_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4)
#define glvm_SlvEnum4_implementation(enum_Type,value1, value2, value3, value4) glvm_SlvEnum4_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4)

#define glvm_SlvEnum5_declaration(enum_Type,value1, value2, value3, value4, value5)\
enum class enum_Type {value1, value2, value3, value4, value5};

#define glvm_SlvEnum5_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum5_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5)\
glvm_SlvEnum5_declaration(enum_Type,value1, value2, value3, value4, value5)\
glvm_SlvEnum5_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5)

#define glvm_SlvEnum5(enum_Type,value1, value2, value3, value4, value5) glvm_SlvEnum5_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5)
#define glvm_SlvEnum5_implementation(enum_Type,value1, value2, value3, value4, value5) glvm_SlvEnum5_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5)

#define glvm_SlvEnum6_declaration(enum_Type,value1, value2, value3, value4, value5, value6)\
enum class enum_Type {value1, value2, value3, value4, value5, value6};

#define glvm_SlvEnum6_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum6_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6)\
glvm_SlvEnum6_declaration(enum_Type,value1, value2, value3, value4, value5, value6)\
glvm_SlvEnum6_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6)

#define glvm_SlvEnum6(enum_Type,value1, value2, value3, value4, value5, value6) glvm_SlvEnum6_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6)
#define glvm_SlvEnum6_implementation(enum_Type,value1, value2, value3, value4, value5, value6) glvm_SlvEnum6_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6)

#define glvm_SlvEnum7_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7};

#define glvm_SlvEnum7_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum7_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7)\
glvm_SlvEnum7_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7)\
glvm_SlvEnum7_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7)

#define glvm_SlvEnum7(enum_Type,value1, value2, value3, value4, value5, value6, value7) glvm_SlvEnum7_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7)
#define glvm_SlvEnum7_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7) glvm_SlvEnum7_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7)

#define glvm_SlvEnum8_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8};

#define glvm_SlvEnum8_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum8_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8)\
glvm_SlvEnum8_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8)\
glvm_SlvEnum8_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8)

#define glvm_SlvEnum8(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8) glvm_SlvEnum8_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8)
#define glvm_SlvEnum8_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8) glvm_SlvEnum8_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8)

#define glvm_SlvEnum9_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9};

#define glvm_SlvEnum9_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum9_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9)\
glvm_SlvEnum9_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9)\
glvm_SlvEnum9_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9)

#define glvm_SlvEnum9(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9) glvm_SlvEnum9_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9)
#define glvm_SlvEnum9_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9) glvm_SlvEnum9_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9)

#define glvm_SlvEnum10_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10};

#define glvm_SlvEnum10_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum10_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10)\
glvm_SlvEnum10_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10)\
glvm_SlvEnum10_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10)

#define glvm_SlvEnum10(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10) glvm_SlvEnum10_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10)
#define glvm_SlvEnum10_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10) glvm_SlvEnum10_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10)

#define glvm_SlvEnum11_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11};

#define glvm_SlvEnum11_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum11_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11)\
glvm_SlvEnum11_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11)\
glvm_SlvEnum11_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11)

#define glvm_SlvEnum11(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11) glvm_SlvEnum11_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11)
#define glvm_SlvEnum11_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11) glvm_SlvEnum11_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11)

#define glvm_SlvEnum12_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12};

#define glvm_SlvEnum12_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum12_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12)\
glvm_SlvEnum12_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12)\
glvm_SlvEnum12_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12)

#define glvm_SlvEnum12(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12) glvm_SlvEnum12_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12)
#define glvm_SlvEnum12_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12) glvm_SlvEnum12_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12)

#define glvm_SlvEnum13_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13};

#define glvm_SlvEnum13_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum13_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13)\
glvm_SlvEnum13_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13)\
glvm_SlvEnum13_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13)

#define glvm_SlvEnum13(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13) glvm_SlvEnum13_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13)
#define glvm_SlvEnum13_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13) glvm_SlvEnum13_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13)

#define glvm_SlvEnum14_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14};

#define glvm_SlvEnum14_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum14_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14)\
glvm_SlvEnum14_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14)\
glvm_SlvEnum14_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14)

#define glvm_SlvEnum14(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14) glvm_SlvEnum14_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14)
#define glvm_SlvEnum14_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14) glvm_SlvEnum14_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14)

#define glvm_SlvEnum15_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15};

#define glvm_SlvEnum15_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum15_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15)\
glvm_SlvEnum15_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15)\
glvm_SlvEnum15_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15)

#define glvm_SlvEnum15(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15) glvm_SlvEnum15_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15)
#define glvm_SlvEnum15_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15) glvm_SlvEnum15_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15)

#define glvm_SlvEnum16_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16};

#define glvm_SlvEnum16_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum16_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16)\
glvm_SlvEnum16_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16)\
glvm_SlvEnum16_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16)

#define glvm_SlvEnum16(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16) glvm_SlvEnum16_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16)
#define glvm_SlvEnum16_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16) glvm_SlvEnum16_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16)

#define glvm_SlvEnum17_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17};

#define glvm_SlvEnum17_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum17_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17)\
glvm_SlvEnum17_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17)\
glvm_SlvEnum17_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17)

#define glvm_SlvEnum17(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17) glvm_SlvEnum17_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17)
#define glvm_SlvEnum17_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17) glvm_SlvEnum17_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17)

#define glvm_SlvEnum18_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18};

#define glvm_SlvEnum18_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum18_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18)\
glvm_SlvEnum18_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18)\
glvm_SlvEnum18_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18)

#define glvm_SlvEnum18(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18) glvm_SlvEnum18_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18)
#define glvm_SlvEnum18_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18) glvm_SlvEnum18_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18)

#define glvm_SlvEnum19_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19};

#define glvm_SlvEnum19_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum19_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19)\
glvm_SlvEnum19_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19)\
glvm_SlvEnum19_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19)

#define glvm_SlvEnum19(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19) glvm_SlvEnum19_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19)
#define glvm_SlvEnum19_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19) glvm_SlvEnum19_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19)

#define glvm_SlvEnum20_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20};

#define glvm_SlvEnum20_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum20_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20)\
glvm_SlvEnum20_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20)\
glvm_SlvEnum20_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20)

#define glvm_SlvEnum20(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20) glvm_SlvEnum20_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20)
#define glvm_SlvEnum20_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20) glvm_SlvEnum20_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20)

#define glvm_SlvEnum21_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21};

#define glvm_SlvEnum21_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum21_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21)\
glvm_SlvEnum21_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21)\
glvm_SlvEnum21_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21)

#define glvm_SlvEnum21(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21) glvm_SlvEnum21_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21)
#define glvm_SlvEnum21_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21) glvm_SlvEnum21_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21)

#define glvm_SlvEnum22_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22};

#define glvm_SlvEnum22_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum22_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22)\
glvm_SlvEnum22_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22)\
glvm_SlvEnum22_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22)

#define glvm_SlvEnum22(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22) glvm_SlvEnum22_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22)
#define glvm_SlvEnum22_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22) glvm_SlvEnum22_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22)

#define glvm_SlvEnum23_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23};

#define glvm_SlvEnum23_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum23_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23)\
glvm_SlvEnum23_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23)\
glvm_SlvEnum23_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23)

#define glvm_SlvEnum23(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23) glvm_SlvEnum23_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23)
#define glvm_SlvEnum23_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23) glvm_SlvEnum23_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23)

#define glvm_SlvEnum24_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24};

#define glvm_SlvEnum24_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum24_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24)\
glvm_SlvEnum24_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24)\
glvm_SlvEnum24_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24)

#define glvm_SlvEnum24(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24) glvm_SlvEnum24_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24)
#define glvm_SlvEnum24_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24) glvm_SlvEnum24_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24)

#define glvm_SlvEnum25_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25};

#define glvm_SlvEnum25_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum25_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25)\
glvm_SlvEnum25_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25)\
glvm_SlvEnum25_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25)

#define glvm_SlvEnum25(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25) glvm_SlvEnum25_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25)
#define glvm_SlvEnum25_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25) glvm_SlvEnum25_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25)

#define glvm_SlvEnum26_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26};

#define glvm_SlvEnum26_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum26_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26)\
glvm_SlvEnum26_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26)\
glvm_SlvEnum26_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26)

#define glvm_SlvEnum26(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26) glvm_SlvEnum26_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26)
#define glvm_SlvEnum26_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26) glvm_SlvEnum26_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26)

#define glvm_SlvEnum27_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27};

#define glvm_SlvEnum27_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum27_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27)\
glvm_SlvEnum27_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27)\
glvm_SlvEnum27_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27)

#define glvm_SlvEnum27(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27) glvm_SlvEnum27_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27)
#define glvm_SlvEnum27_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27) glvm_SlvEnum27_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27)

#define glvm_SlvEnum28_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28};

#define glvm_SlvEnum28_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum28_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28)\
glvm_SlvEnum28_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28)\
glvm_SlvEnum28_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28)

#define glvm_SlvEnum28(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28) glvm_SlvEnum28_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28)
#define glvm_SlvEnum28_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28) glvm_SlvEnum28_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28)

#define glvm_SlvEnum29_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29};

#define glvm_SlvEnum29_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum29_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29)\
glvm_SlvEnum29_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29)\
glvm_SlvEnum29_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29)

#define glvm_SlvEnum29(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29) glvm_SlvEnum29_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29)
#define glvm_SlvEnum29_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29) glvm_SlvEnum29_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29)

#define glvm_SlvEnum30_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30};

#define glvm_SlvEnum30_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum30_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30)\
glvm_SlvEnum30_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30)\
glvm_SlvEnum30_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30)

#define glvm_SlvEnum30(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30) glvm_SlvEnum30_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30)
#define glvm_SlvEnum30_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30) glvm_SlvEnum30_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30)

#define glvm_SlvEnum31_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31};

#define glvm_SlvEnum31_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum31_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31)\
glvm_SlvEnum31_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31)\
glvm_SlvEnum31_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31)

#define glvm_SlvEnum31(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31) glvm_SlvEnum31_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31)
#define glvm_SlvEnum31_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31) glvm_SlvEnum31_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31)

#define glvm_SlvEnum32_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32};

#define glvm_SlvEnum32_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum32_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32)\
glvm_SlvEnum32_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32)\
glvm_SlvEnum32_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32)

#define glvm_SlvEnum32(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32) glvm_SlvEnum32_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32)
#define glvm_SlvEnum32_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32) glvm_SlvEnum32_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32)

#define glvm_SlvEnum33_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33};

#define glvm_SlvEnum33_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum33_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33)\
glvm_SlvEnum33_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33)\
glvm_SlvEnum33_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33)

#define glvm_SlvEnum33(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33) glvm_SlvEnum33_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33)
#define glvm_SlvEnum33_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33) glvm_SlvEnum33_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33)

#define glvm_SlvEnum34_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34};

#define glvm_SlvEnum34_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum34_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34)\
glvm_SlvEnum34_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34)\
glvm_SlvEnum34_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34)

#define glvm_SlvEnum34(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34) glvm_SlvEnum34_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34)
#define glvm_SlvEnum34_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34) glvm_SlvEnum34_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34)

#define glvm_SlvEnum35_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35};

#define glvm_SlvEnum35_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum35_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35)\
glvm_SlvEnum35_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35)\
glvm_SlvEnum35_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35)

#define glvm_SlvEnum35(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35) glvm_SlvEnum35_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35)
#define glvm_SlvEnum35_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35) glvm_SlvEnum35_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35)

#define glvm_SlvEnum36_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36};

#define glvm_SlvEnum36_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum36_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36)\
glvm_SlvEnum36_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36)\
glvm_SlvEnum36_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36)

#define glvm_SlvEnum36(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36) glvm_SlvEnum36_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36)
#define glvm_SlvEnum36_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36) glvm_SlvEnum36_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36)

#define glvm_SlvEnum37_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37};

#define glvm_SlvEnum37_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum37_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37)\
glvm_SlvEnum37_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37)\
glvm_SlvEnum37_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37)

#define glvm_SlvEnum37(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37) glvm_SlvEnum37_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37)
#define glvm_SlvEnum37_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37) glvm_SlvEnum37_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37)

#define glvm_SlvEnum38_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38};

#define glvm_SlvEnum38_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum38_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38)\
glvm_SlvEnum38_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38)\
glvm_SlvEnum38_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38)

#define glvm_SlvEnum38(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38) glvm_SlvEnum38_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38)
#define glvm_SlvEnum38_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38) glvm_SlvEnum38_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38)

#define glvm_SlvEnum39_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39};

#define glvm_SlvEnum39_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum39_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39)\
glvm_SlvEnum39_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39)\
glvm_SlvEnum39_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39)

#define glvm_SlvEnum39(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39) glvm_SlvEnum39_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39)
#define glvm_SlvEnum39_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39) glvm_SlvEnum39_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39)

#define glvm_SlvEnum40_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40};

#define glvm_SlvEnum40_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum40_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40)\
glvm_SlvEnum40_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40)\
glvm_SlvEnum40_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40)

#define glvm_SlvEnum40(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40) glvm_SlvEnum40_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40)
#define glvm_SlvEnum40_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40) glvm_SlvEnum40_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40)

#define glvm_SlvEnum41_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41};

#define glvm_SlvEnum41_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum41_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41)\
glvm_SlvEnum41_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41)\
glvm_SlvEnum41_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41)

#define glvm_SlvEnum41(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41) glvm_SlvEnum41_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41)
#define glvm_SlvEnum41_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41) glvm_SlvEnum41_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41)

#define glvm_SlvEnum42_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42};

#define glvm_SlvEnum42_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum42_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42)\
glvm_SlvEnum42_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42)\
glvm_SlvEnum42_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42)

#define glvm_SlvEnum42(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42) glvm_SlvEnum42_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42)
#define glvm_SlvEnum42_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42) glvm_SlvEnum42_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42)

#define glvm_SlvEnum43_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43};

#define glvm_SlvEnum43_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum43_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43)\
glvm_SlvEnum43_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43)\
glvm_SlvEnum43_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43)

#define glvm_SlvEnum43(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43) glvm_SlvEnum43_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43)
#define glvm_SlvEnum43_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43) glvm_SlvEnum43_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43)

#define glvm_SlvEnum44_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44};

#define glvm_SlvEnum44_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum44_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44)\
glvm_SlvEnum44_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44)\
glvm_SlvEnum44_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44)

#define glvm_SlvEnum44(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44) glvm_SlvEnum44_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44)
#define glvm_SlvEnum44_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44) glvm_SlvEnum44_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44)

#define glvm_SlvEnum45_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45};

#define glvm_SlvEnum45_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum45_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45)\
glvm_SlvEnum45_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45)\
glvm_SlvEnum45_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45)

#define glvm_SlvEnum45(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45) glvm_SlvEnum45_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45)
#define glvm_SlvEnum45_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45) glvm_SlvEnum45_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45)

#define glvm_SlvEnum46_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46};

#define glvm_SlvEnum46_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum46_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46)\
glvm_SlvEnum46_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46)\
glvm_SlvEnum46_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46)

#define glvm_SlvEnum46(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46) glvm_SlvEnum46_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46)
#define glvm_SlvEnum46_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46) glvm_SlvEnum46_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46)

#define glvm_SlvEnum47_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47};

#define glvm_SlvEnum47_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum47_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47)\
glvm_SlvEnum47_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47)\
glvm_SlvEnum47_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47)

#define glvm_SlvEnum47(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47) glvm_SlvEnum47_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47)
#define glvm_SlvEnum47_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47) glvm_SlvEnum47_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47)

#define glvm_SlvEnum48_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48};

#define glvm_SlvEnum48_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum48_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48)\
glvm_SlvEnum48_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48)\
glvm_SlvEnum48_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48)

#define glvm_SlvEnum48(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48) glvm_SlvEnum48_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48)
#define glvm_SlvEnum48_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48) glvm_SlvEnum48_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48)

#define glvm_SlvEnum49_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49};

#define glvm_SlvEnum49_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum49_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49)\
glvm_SlvEnum49_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49)\
glvm_SlvEnum49_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49)

#define glvm_SlvEnum49(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49) glvm_SlvEnum49_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49)
#define glvm_SlvEnum49_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49) glvm_SlvEnum49_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49)

#define glvm_SlvEnum50_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50};

#define glvm_SlvEnum50_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum50_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50)\
glvm_SlvEnum50_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50)\
glvm_SlvEnum50_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50)

#define glvm_SlvEnum50(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50) glvm_SlvEnum50_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50)
#define glvm_SlvEnum50_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50) glvm_SlvEnum50_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50)

#define glvm_SlvEnum51_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51};

#define glvm_SlvEnum51_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum51_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51)\
glvm_SlvEnum51_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51)\
glvm_SlvEnum51_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51)

#define glvm_SlvEnum51(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51) glvm_SlvEnum51_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51)
#define glvm_SlvEnum51_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51) glvm_SlvEnum51_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51)

#define glvm_SlvEnum52_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52};

#define glvm_SlvEnum52_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum52_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52)\
glvm_SlvEnum52_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52)\
glvm_SlvEnum52_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52)

#define glvm_SlvEnum52(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52) glvm_SlvEnum52_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52)
#define glvm_SlvEnum52_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52) glvm_SlvEnum52_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52)

#define glvm_SlvEnum53_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53};

#define glvm_SlvEnum53_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum53_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53)\
glvm_SlvEnum53_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53)\
glvm_SlvEnum53_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53)

#define glvm_SlvEnum53(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53) glvm_SlvEnum53_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53)
#define glvm_SlvEnum53_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53) glvm_SlvEnum53_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53)

#define glvm_SlvEnum54_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54};

#define glvm_SlvEnum54_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum54_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54)\
glvm_SlvEnum54_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54)\
glvm_SlvEnum54_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54)

#define glvm_SlvEnum54(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54) glvm_SlvEnum54_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54)
#define glvm_SlvEnum54_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54) glvm_SlvEnum54_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54)

#define glvm_SlvEnum55_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55};

#define glvm_SlvEnum55_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum55_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55)\
glvm_SlvEnum55_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55)\
glvm_SlvEnum55_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55)

#define glvm_SlvEnum55(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55) glvm_SlvEnum55_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55)
#define glvm_SlvEnum55_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55) glvm_SlvEnum55_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55)

#define glvm_SlvEnum56_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56};

#define glvm_SlvEnum56_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum56_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56)\
glvm_SlvEnum56_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56)\
glvm_SlvEnum56_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56)

#define glvm_SlvEnum56(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56) glvm_SlvEnum56_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56)
#define glvm_SlvEnum56_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56) glvm_SlvEnum56_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56)

#define glvm_SlvEnum57_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57};

#define glvm_SlvEnum57_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum57_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57)\
glvm_SlvEnum57_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57)\
glvm_SlvEnum57_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57)

#define glvm_SlvEnum57(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57) glvm_SlvEnum57_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57)
#define glvm_SlvEnum57_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57) glvm_SlvEnum57_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57)

#define glvm_SlvEnum58_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58};

#define glvm_SlvEnum58_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum58_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58)\
glvm_SlvEnum58_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58)\
glvm_SlvEnum58_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58)

#define glvm_SlvEnum58(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58) glvm_SlvEnum58_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58)
#define glvm_SlvEnum58_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58) glvm_SlvEnum58_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58)

#define glvm_SlvEnum59_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59};

#define glvm_SlvEnum59_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum59_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59)\
glvm_SlvEnum59_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59)\
glvm_SlvEnum59_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59)

#define glvm_SlvEnum59(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59) glvm_SlvEnum59_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59)
#define glvm_SlvEnum59_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59) glvm_SlvEnum59_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59)

#define glvm_SlvEnum60_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60};

#define glvm_SlvEnum60_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum60_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60)\
glvm_SlvEnum60_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60)\
glvm_SlvEnum60_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60)

#define glvm_SlvEnum60(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60) glvm_SlvEnum60_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60)
#define glvm_SlvEnum60_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60) glvm_SlvEnum60_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60)

#define glvm_SlvEnum61_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61};

#define glvm_SlvEnum61_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum61_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61)\
glvm_SlvEnum61_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61)\
glvm_SlvEnum61_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61)

#define glvm_SlvEnum61(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61) glvm_SlvEnum61_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61)
#define glvm_SlvEnum61_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61) glvm_SlvEnum61_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61)

#define glvm_SlvEnum62_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62};

#define glvm_SlvEnum62_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum62_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62)\
glvm_SlvEnum62_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62)\
glvm_SlvEnum62_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62)

#define glvm_SlvEnum62(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62) glvm_SlvEnum62_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62)
#define glvm_SlvEnum62_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62) glvm_SlvEnum62_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62)

#if !(defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)

#define glvm_SlvEnum63_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63};

#define glvm_SlvEnum63_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum63_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63)\
glvm_SlvEnum63_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63)\
glvm_SlvEnum63_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63)

#define glvm_SlvEnum63(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63) glvm_SlvEnum63_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63)
#define glvm_SlvEnum63_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63) glvm_SlvEnum63_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63)

#define glvm_SlvEnum64_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64};

#define glvm_SlvEnum64_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum64_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64)\
glvm_SlvEnum64_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64)\
glvm_SlvEnum64_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64)

#define glvm_SlvEnum64(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64) glvm_SlvEnum64_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64)
#define glvm_SlvEnum64_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64) glvm_SlvEnum64_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64)

#define glvm_SlvEnum65_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65};

#define glvm_SlvEnum65_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum65_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65)\
glvm_SlvEnum65_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65)\
glvm_SlvEnum65_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65)

#define glvm_SlvEnum65(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65) glvm_SlvEnum65_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65)
#define glvm_SlvEnum65_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65) glvm_SlvEnum65_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65)

#define glvm_SlvEnum66_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66};

#define glvm_SlvEnum66_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum66_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66)\
glvm_SlvEnum66_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66)\
glvm_SlvEnum66_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66)

#define glvm_SlvEnum66(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66) glvm_SlvEnum66_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66)
#define glvm_SlvEnum66_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66) glvm_SlvEnum66_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66)

#define glvm_SlvEnum67_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67};

#define glvm_SlvEnum67_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum67_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67)\
glvm_SlvEnum67_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67)\
glvm_SlvEnum67_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67)

#define glvm_SlvEnum67(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67) glvm_SlvEnum67_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67)
#define glvm_SlvEnum67_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67) glvm_SlvEnum67_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67)

#define glvm_SlvEnum68_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68};

#define glvm_SlvEnum68_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum68_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68)\
glvm_SlvEnum68_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68)\
glvm_SlvEnum68_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68)

#define glvm_SlvEnum68(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68) glvm_SlvEnum68_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68)
#define glvm_SlvEnum68_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68) glvm_SlvEnum68_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68)

#define glvm_SlvEnum69_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69};

#define glvm_SlvEnum69_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum69_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69)\
glvm_SlvEnum69_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69)\
glvm_SlvEnum69_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69)

#define glvm_SlvEnum69(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69) glvm_SlvEnum69_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69)
#define glvm_SlvEnum69_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69) glvm_SlvEnum69_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69)

#define glvm_SlvEnum70_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70};

#define glvm_SlvEnum70_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum70_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70)\
glvm_SlvEnum70_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70)\
glvm_SlvEnum70_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70)

#define glvm_SlvEnum70(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70) glvm_SlvEnum70_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70)
#define glvm_SlvEnum70_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70) glvm_SlvEnum70_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70)

#define glvm_SlvEnum71_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71};

#define glvm_SlvEnum71_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum71_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71)\
glvm_SlvEnum71_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71)\
glvm_SlvEnum71_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71)

#define glvm_SlvEnum71(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71) glvm_SlvEnum71_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71)
#define glvm_SlvEnum71_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71) glvm_SlvEnum71_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71)

#define glvm_SlvEnum72_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72};

#define glvm_SlvEnum72_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum72_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72)\
glvm_SlvEnum72_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72)\
glvm_SlvEnum72_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72)

#define glvm_SlvEnum72(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72) glvm_SlvEnum72_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72)
#define glvm_SlvEnum72_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72) glvm_SlvEnum72_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72)

#define glvm_SlvEnum73_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73};

#define glvm_SlvEnum73_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum73_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73)\
glvm_SlvEnum73_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73)\
glvm_SlvEnum73_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73)

#define glvm_SlvEnum73(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73) glvm_SlvEnum73_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73)
#define glvm_SlvEnum73_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73) glvm_SlvEnum73_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73)

#define glvm_SlvEnum74_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74};

#define glvm_SlvEnum74_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum74_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74)\
glvm_SlvEnum74_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74)\
glvm_SlvEnum74_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74)

#define glvm_SlvEnum74(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74) glvm_SlvEnum74_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74)
#define glvm_SlvEnum74_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74) glvm_SlvEnum74_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74)

#define glvm_SlvEnum75_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75};

#define glvm_SlvEnum75_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum75_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75)\
glvm_SlvEnum75_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75)\
glvm_SlvEnum75_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75)

#define glvm_SlvEnum75(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75) glvm_SlvEnum75_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75)
#define glvm_SlvEnum75_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75) glvm_SlvEnum75_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75)

#define glvm_SlvEnum76_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76};

#define glvm_SlvEnum76_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum76_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76)\
glvm_SlvEnum76_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76)\
glvm_SlvEnum76_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76)

#define glvm_SlvEnum76(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76) glvm_SlvEnum76_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76)
#define glvm_SlvEnum76_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76) glvm_SlvEnum76_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76)

#define glvm_SlvEnum77_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77};

#define glvm_SlvEnum77_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum77_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77)\
glvm_SlvEnum77_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77)\
glvm_SlvEnum77_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77)

#define glvm_SlvEnum77(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77) glvm_SlvEnum77_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77)
#define glvm_SlvEnum77_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77) glvm_SlvEnum77_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77)

#define glvm_SlvEnum78_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78};

#define glvm_SlvEnum78_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum78_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78)\
glvm_SlvEnum78_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78)\
glvm_SlvEnum78_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78)

#define glvm_SlvEnum78(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78) glvm_SlvEnum78_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78)
#define glvm_SlvEnum78_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78) glvm_SlvEnum78_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78)

#define glvm_SlvEnum79_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79};

#define glvm_SlvEnum79_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum79_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79)\
glvm_SlvEnum79_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79)\
glvm_SlvEnum79_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79)

#define glvm_SlvEnum79(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79) glvm_SlvEnum79_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79)
#define glvm_SlvEnum79_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79) glvm_SlvEnum79_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79)

#define glvm_SlvEnum80_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80};

#define glvm_SlvEnum80_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum80_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80)\
glvm_SlvEnum80_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80)\
glvm_SlvEnum80_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80)

#define glvm_SlvEnum80(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80) glvm_SlvEnum80_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80)
#define glvm_SlvEnum80_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80) glvm_SlvEnum80_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80)

#define glvm_SlvEnum81_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81};

#define glvm_SlvEnum81_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum81_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81)\
glvm_SlvEnum81_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81)\
glvm_SlvEnum81_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81)

#define glvm_SlvEnum81(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81) glvm_SlvEnum81_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81)
#define glvm_SlvEnum81_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81) glvm_SlvEnum81_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81)

#define glvm_SlvEnum82_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82};

#define glvm_SlvEnum82_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum82_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82)\
glvm_SlvEnum82_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82)\
glvm_SlvEnum82_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82)

#define glvm_SlvEnum82(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82) glvm_SlvEnum82_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82)
#define glvm_SlvEnum82_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82) glvm_SlvEnum82_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82)

#define glvm_SlvEnum83_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83};

#define glvm_SlvEnum83_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum83_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83)\
glvm_SlvEnum83_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83)\
glvm_SlvEnum83_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83)

#define glvm_SlvEnum83(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83) glvm_SlvEnum83_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83)
#define glvm_SlvEnum83_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83) glvm_SlvEnum83_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83)

#define glvm_SlvEnum84_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84};

#define glvm_SlvEnum84_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum84_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84)\
glvm_SlvEnum84_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84)\
glvm_SlvEnum84_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84)

#define glvm_SlvEnum84(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84) glvm_SlvEnum84_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84)
#define glvm_SlvEnum84_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84) glvm_SlvEnum84_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84)

#define glvm_SlvEnum85_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85};

#define glvm_SlvEnum85_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum85_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85)\
glvm_SlvEnum85_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85)\
glvm_SlvEnum85_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85)

#define glvm_SlvEnum85(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85) glvm_SlvEnum85_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85)
#define glvm_SlvEnum85_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85) glvm_SlvEnum85_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85)

#define glvm_SlvEnum86_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86};

#define glvm_SlvEnum86_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum86_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86)\
glvm_SlvEnum86_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86)\
glvm_SlvEnum86_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86)

#define glvm_SlvEnum86(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86) glvm_SlvEnum86_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86)
#define glvm_SlvEnum86_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86) glvm_SlvEnum86_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86)

#define glvm_SlvEnum87_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87};

#define glvm_SlvEnum87_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum87_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87)\
glvm_SlvEnum87_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87)\
glvm_SlvEnum87_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87)

#define glvm_SlvEnum87(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87) glvm_SlvEnum87_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87)
#define glvm_SlvEnum87_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87) glvm_SlvEnum87_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87)

#define glvm_SlvEnum88_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88};

#define glvm_SlvEnum88_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum88_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88)\
glvm_SlvEnum88_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88)\
glvm_SlvEnum88_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88)

#define glvm_SlvEnum88(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88) glvm_SlvEnum88_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88)
#define glvm_SlvEnum88_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88) glvm_SlvEnum88_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88)

#define glvm_SlvEnum89_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89};

#define glvm_SlvEnum89_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum89_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89)\
glvm_SlvEnum89_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89)\
glvm_SlvEnum89_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89)

#define glvm_SlvEnum89(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89) glvm_SlvEnum89_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89)
#define glvm_SlvEnum89_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89) glvm_SlvEnum89_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89)

#define glvm_SlvEnum90_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90};

#define glvm_SlvEnum90_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum90_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90)\
glvm_SlvEnum90_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90)\
glvm_SlvEnum90_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90)

#define glvm_SlvEnum90(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90) glvm_SlvEnum90_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90)
#define glvm_SlvEnum90_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90) glvm_SlvEnum90_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90)

#define glvm_SlvEnum91_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91};

#define glvm_SlvEnum91_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum91_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91)\
glvm_SlvEnum91_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91)\
glvm_SlvEnum91_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91)

#define glvm_SlvEnum91(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91) glvm_SlvEnum91_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91)
#define glvm_SlvEnum91_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91) glvm_SlvEnum91_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91)

#define glvm_SlvEnum92_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92};

#define glvm_SlvEnum92_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum92_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92)\
glvm_SlvEnum92_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92)\
glvm_SlvEnum92_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92)

#define glvm_SlvEnum92(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92) glvm_SlvEnum92_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92)
#define glvm_SlvEnum92_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92) glvm_SlvEnum92_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92)

#define glvm_SlvEnum93_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93};

#define glvm_SlvEnum93_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum93_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93)\
glvm_SlvEnum93_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93)\
glvm_SlvEnum93_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93)

#define glvm_SlvEnum93(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93) glvm_SlvEnum93_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93)
#define glvm_SlvEnum93_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93) glvm_SlvEnum93_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93)

#define glvm_SlvEnum94_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94};

#define glvm_SlvEnum94_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;enum_names[enum_Type::value94] = name94;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum94_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94)\
glvm_SlvEnum94_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94)\
glvm_SlvEnum94_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94)

#define glvm_SlvEnum94(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94) glvm_SlvEnum94_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94)
#define glvm_SlvEnum94_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94) glvm_SlvEnum94_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94)

#define glvm_SlvEnum95_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95};

#define glvm_SlvEnum95_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;enum_names[enum_Type::value94] = name94;enum_names[enum_Type::value95] = name95;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum95_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95)\
glvm_SlvEnum95_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95)\
glvm_SlvEnum95_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95)

#define glvm_SlvEnum95(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95) glvm_SlvEnum95_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95)
#define glvm_SlvEnum95_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95) glvm_SlvEnum95_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95)

#define glvm_SlvEnum96_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96};

#define glvm_SlvEnum96_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;enum_names[enum_Type::value94] = name94;enum_names[enum_Type::value95] = name95;enum_names[enum_Type::value96] = name96;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum96_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96)\
glvm_SlvEnum96_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96)\
glvm_SlvEnum96_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96)

#define glvm_SlvEnum96(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96) glvm_SlvEnum96_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96)
#define glvm_SlvEnum96_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96) glvm_SlvEnum96_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96)

#define glvm_SlvEnum97_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97};

#define glvm_SlvEnum97_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;enum_names[enum_Type::value94] = name94;enum_names[enum_Type::value95] = name95;enum_names[enum_Type::value96] = name96;enum_names[enum_Type::value97] = name97;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum97_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97)\
glvm_SlvEnum97_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97)\
glvm_SlvEnum97_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97)

#define glvm_SlvEnum97(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97) glvm_SlvEnum97_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96, value97, #value97)
#define glvm_SlvEnum97_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97) glvm_SlvEnum97_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96, value97, #value97)

#define glvm_SlvEnum98_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98};

#define glvm_SlvEnum98_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97, value98, name98)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;enum_names[enum_Type::value94] = name94;enum_names[enum_Type::value95] = name95;enum_names[enum_Type::value96] = name96;enum_names[enum_Type::value97] = name97;enum_names[enum_Type::value98] = name98;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum98_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97, value98, name98)\
glvm_SlvEnum98_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98)\
glvm_SlvEnum98_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97, value98, name98)

#define glvm_SlvEnum98(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98) glvm_SlvEnum98_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96, value97, #value97, value98, #value98)
#define glvm_SlvEnum98_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98) glvm_SlvEnum98_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96, value97, #value97, value98, #value98)

#define glvm_SlvEnum99_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98, value99)\
enum class enum_Type {value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98, value99};

#define glvm_SlvEnum99_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97, value98, name98, value99, name99)\
template <> inline std::map<enum_Type, std::string> SlvEnum<enum_Type>::create_enum_names() {\
std::map<enum_Type, std::string> enum_names;\
enum_names[enum_Type::value1] = name1;enum_names[enum_Type::value2] = name2;enum_names[enum_Type::value3] = name3;enum_names[enum_Type::value4] = name4;enum_names[enum_Type::value5] = name5;enum_names[enum_Type::value6] = name6;enum_names[enum_Type::value7] = name7;enum_names[enum_Type::value8] = name8;enum_names[enum_Type::value9] = name9;enum_names[enum_Type::value10] = name10;enum_names[enum_Type::value11] = name11;enum_names[enum_Type::value12] = name12;enum_names[enum_Type::value13] = name13;enum_names[enum_Type::value14] = name14;enum_names[enum_Type::value15] = name15;enum_names[enum_Type::value16] = name16;enum_names[enum_Type::value17] = name17;enum_names[enum_Type::value18] = name18;enum_names[enum_Type::value19] = name19;enum_names[enum_Type::value20] = name20;enum_names[enum_Type::value21] = name21;enum_names[enum_Type::value22] = name22;enum_names[enum_Type::value23] = name23;enum_names[enum_Type::value24] = name24;enum_names[enum_Type::value25] = name25;enum_names[enum_Type::value26] = name26;enum_names[enum_Type::value27] = name27;enum_names[enum_Type::value28] = name28;enum_names[enum_Type::value29] = name29;enum_names[enum_Type::value30] = name30;enum_names[enum_Type::value31] = name31;enum_names[enum_Type::value32] = name32;enum_names[enum_Type::value33] = name33;enum_names[enum_Type::value34] = name34;enum_names[enum_Type::value35] = name35;enum_names[enum_Type::value36] = name36;enum_names[enum_Type::value37] = name37;enum_names[enum_Type::value38] = name38;enum_names[enum_Type::value39] = name39;enum_names[enum_Type::value40] = name40;enum_names[enum_Type::value41] = name41;enum_names[enum_Type::value42] = name42;enum_names[enum_Type::value43] = name43;enum_names[enum_Type::value44] = name44;enum_names[enum_Type::value45] = name45;enum_names[enum_Type::value46] = name46;enum_names[enum_Type::value47] = name47;enum_names[enum_Type::value48] = name48;enum_names[enum_Type::value49] = name49;enum_names[enum_Type::value50] = name50;enum_names[enum_Type::value51] = name51;enum_names[enum_Type::value52] = name52;enum_names[enum_Type::value53] = name53;enum_names[enum_Type::value54] = name54;enum_names[enum_Type::value55] = name55;enum_names[enum_Type::value56] = name56;enum_names[enum_Type::value57] = name57;enum_names[enum_Type::value58] = name58;enum_names[enum_Type::value59] = name59;enum_names[enum_Type::value60] = name60;enum_names[enum_Type::value61] = name61;enum_names[enum_Type::value62] = name62;enum_names[enum_Type::value63] = name63;enum_names[enum_Type::value64] = name64;enum_names[enum_Type::value65] = name65;enum_names[enum_Type::value66] = name66;enum_names[enum_Type::value67] = name67;enum_names[enum_Type::value68] = name68;enum_names[enum_Type::value69] = name69;enum_names[enum_Type::value70] = name70;enum_names[enum_Type::value71] = name71;enum_names[enum_Type::value72] = name72;enum_names[enum_Type::value73] = name73;enum_names[enum_Type::value74] = name74;enum_names[enum_Type::value75] = name75;enum_names[enum_Type::value76] = name76;enum_names[enum_Type::value77] = name77;enum_names[enum_Type::value78] = name78;enum_names[enum_Type::value79] = name79;enum_names[enum_Type::value80] = name80;enum_names[enum_Type::value81] = name81;enum_names[enum_Type::value82] = name82;enum_names[enum_Type::value83] = name83;enum_names[enum_Type::value84] = name84;enum_names[enum_Type::value85] = name85;enum_names[enum_Type::value86] = name86;enum_names[enum_Type::value87] = name87;enum_names[enum_Type::value88] = name88;enum_names[enum_Type::value89] = name89;enum_names[enum_Type::value90] = name90;enum_names[enum_Type::value91] = name91;enum_names[enum_Type::value92] = name92;enum_names[enum_Type::value93] = name93;enum_names[enum_Type::value94] = name94;enum_names[enum_Type::value95] = name95;enum_names[enum_Type::value96] = name96;enum_names[enum_Type::value97] = name97;enum_names[enum_Type::value98] = name98;enum_names[enum_Type::value99] = name99;\
return enum_names;\
}\
glvm_pv_SlvEnum_misc(enum_Type)

#define glvm_SlvEnum99_named(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97, value98, name98, value99, name99)\
glvm_SlvEnum99_declaration(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98, value99)\
glvm_SlvEnum99_named_implementation(enum_Type,value1, name1, value2, name2, value3, name3, value4, name4, value5, name5, value6, name6, value7, name7, value8, name8, value9, name9, value10, name10, value11, name11, value12, name12, value13, name13, value14, name14, value15, name15, value16, name16, value17, name17, value18, name18, value19, name19, value20, name20, value21, name21, value22, name22, value23, name23, value24, name24, value25, name25, value26, name26, value27, name27, value28, name28, value29, name29, value30, name30, value31, name31, value32, name32, value33, name33, value34, name34, value35, name35, value36, name36, value37, name37, value38, name38, value39, name39, value40, name40, value41, name41, value42, name42, value43, name43, value44, name44, value45, name45, value46, name46, value47, name47, value48, name48, value49, name49, value50, name50, value51, name51, value52, name52, value53, name53, value54, name54, value55, name55, value56, name56, value57, name57, value58, name58, value59, name59, value60, name60, value61, name61, value62, name62, value63, name63, value64, name64, value65, name65, value66, name66, value67, name67, value68, name68, value69, name69, value70, name70, value71, name71, value72, name72, value73, name73, value74, name74, value75, name75, value76, name76, value77, name77, value78, name78, value79, name79, value80, name80, value81, name81, value82, name82, value83, name83, value84, name84, value85, name85, value86, name86, value87, name87, value88, name88, value89, name89, value90, name90, value91, name91, value92, name92, value93, name93, value94, name94, value95, name95, value96, name96, value97, name97, value98, name98, value99, name99)

#define glvm_SlvEnum99(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98, value99) glvm_SlvEnum99_named(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96, value97, #value97, value98, #value98, value99, #value99)
#define glvm_SlvEnum99_implementation(enum_Type,value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11, value12, value13, value14, value15, value16, value17, value18, value19, value20, value21, value22, value23, value24, value25, value26, value27, value28, value29, value30, value31, value32, value33, value34, value35, value36, value37, value38, value39, value40, value41, value42, value43, value44, value45, value46, value47, value48, value49, value50, value51, value52, value53, value54, value55, value56, value57, value58, value59, value60, value61, value62, value63, value64, value65, value66, value67, value68, value69, value70, value71, value72, value73, value74, value75, value76, value77, value78, value79, value80, value81, value82, value83, value84, value85, value86, value87, value88, value89, value90, value91, value92, value93, value94, value95, value96, value97, value98, value99) glvm_SlvEnum99_named_implementation(enum_Type,value1, #value1, value2, #value2, value3, #value3, value4, #value4, value5, #value5, value6, #value6, value7, #value7, value8, #value8, value9, #value9, value10, #value10, value11, #value11, value12, #value12, value13, #value13, value14, #value14, value15, #value15, value16, #value16, value17, #value17, value18, #value18, value19, #value19, value20, #value20, value21, #value21, value22, #value22, value23, #value23, value24, #value24, value25, #value25, value26, #value26, value27, #value27, value28, #value28, value29, #value29, value30, #value30, value31, #value31, value32, #value32, value33, #value33, value34, #value34, value35, #value35, value36, #value36, value37, #value37, value38, #value38, value39, #value39, value40, #value40, value41, #value41, value42, #value42, value43, #value43, value44, #value44, value45, #value45, value46, #value46, value47, #value47, value48, #value48, value49, #value49, value50, #value50, value51, #value51, value52, #value52, value53, #value53, value54, #value54, value55, #value55, value56, #value56, value57, #value57, value58, #value58, value59, #value59, value60, #value60, value61, #value61, value62, #value62, value63, #value63, value64, #value64, value65, #value65, value66, #value66, value67, #value67, value68, #value68, value69, #value69, value70, #value70, value71, #value71, value72, #value72, value73, #value73, value74, #value74, value75, #value75, value76, #value76, value77, #value77, value78, #value78, value79, #value79, value80, #value80, value81, #value81, value82, #value82, value83, #value83, value84, #value84, value85, #value85, value86, #value86, value87, #value87, value88, #value88, value89, #value89, value90, #value90, value91, #value91, value92, #value92, value93, #value93, value94, #value94, value95, #value95, value96, #value96, value97, #value97, value98, #value98, value99, #value99)

#endif

#if defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL

#define EXPAND(arg) arg

#define glvm_pv_get_macro_enum(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum(__VA_ARGS__,\
glvm_SlvEnum62, glvm_SlvEnum61, glvm_SlvEnum60, glvm_SlvEnum59, glvm_SlvEnum58, glvm_SlvEnum57, glvm_SlvEnum56, glvm_SlvEnum55, glvm_SlvEnum54, glvm_SlvEnum53, glvm_SlvEnum52, glvm_SlvEnum51, glvm_SlvEnum50, glvm_SlvEnum49, glvm_SlvEnum48, glvm_SlvEnum47, glvm_SlvEnum46, glvm_SlvEnum45, glvm_SlvEnum44, glvm_SlvEnum43, glvm_SlvEnum42, glvm_SlvEnum41, glvm_SlvEnum40, glvm_SlvEnum39, glvm_SlvEnum38, glvm_SlvEnum37, glvm_SlvEnum36, glvm_SlvEnum35, glvm_SlvEnum34, glvm_SlvEnum33, glvm_SlvEnum32, glvm_SlvEnum31, glvm_SlvEnum30, glvm_SlvEnum29, glvm_SlvEnum28, glvm_SlvEnum27, glvm_SlvEnum26, glvm_SlvEnum25, glvm_SlvEnum24, glvm_SlvEnum23, glvm_SlvEnum22, glvm_SlvEnum21, glvm_SlvEnum20, glvm_SlvEnum19, glvm_SlvEnum18, glvm_SlvEnum17, glvm_SlvEnum16, glvm_SlvEnum15, glvm_SlvEnum14, glvm_SlvEnum13, glvm_SlvEnum12, glvm_SlvEnum11, glvm_SlvEnum10, glvm_SlvEnum9, glvm_SlvEnum8, glvm_SlvEnum7, glvm_SlvEnum6, glvm_SlvEnum5, glvm_SlvEnum4, glvm_SlvEnum3, glvm_SlvEnum2, glvm_SlvEnum1)(enum_Type, __VA_ARGS__))

#define glvm_pv_get_macro_enum_named(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62,\
		_1_n, _2_n, _3_n, _4_n, _5_n, _6_n, _7_n, _8_n, _9_n, _10_n, _11_n, _12_n, _13_n, _14_n, _15_n, _16_n, _17_n, _18_n, _19_n, _20_n, _21_n, _22_n, _23_n, _24_n, _25_n, _26_n, _27_n, _28_n, _29_n, _30_n, _31_n, _32_n, _33_n, _34_n, _35_n, _36_n, _37_n, _38_n, _39_n, _40_n, _41_n, _42_n, _43_n, _44_n, _45_n, _46_n, _47_n, _48_n, _49_n, _50_n, _51_n, _52_n, _53_n, _54_n, _55_n, _56_n, _57_n, _58_n, _59_n, _60_n, _61_n, _62_n,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum_named(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum_named(__VA_ARGS__,\
glvm_SlvEnum62_named, _null62, glvm_SlvEnum61_named, _null61, glvm_SlvEnum60_named, _null60, glvm_SlvEnum59_named, _null59, glvm_SlvEnum58_named, _null58, glvm_SlvEnum57_named, _null57, glvm_SlvEnum56_named, _null56, glvm_SlvEnum55_named, _null55, glvm_SlvEnum54_named, _null54, glvm_SlvEnum53_named, _null53, glvm_SlvEnum52_named, _null52, glvm_SlvEnum51_named, _null51, glvm_SlvEnum50_named, _null50, glvm_SlvEnum49_named, _null49, glvm_SlvEnum48_named, _null48, glvm_SlvEnum47_named, _null47, glvm_SlvEnum46_named, _null46, glvm_SlvEnum45_named, _null45, glvm_SlvEnum44_named, _null44, glvm_SlvEnum43_named, _null43, glvm_SlvEnum42_named, _null42, glvm_SlvEnum41_named, _null41, glvm_SlvEnum40_named, _null40, glvm_SlvEnum39_named, _null39, glvm_SlvEnum38_named, _null38, glvm_SlvEnum37_named, _null37, glvm_SlvEnum36_named, _null36, glvm_SlvEnum35_named, _null35, glvm_SlvEnum34_named, _null34, glvm_SlvEnum33_named, _null33, glvm_SlvEnum32_named, _null32, glvm_SlvEnum31_named, _null31, glvm_SlvEnum30_named, _null30, glvm_SlvEnum29_named, _null29, glvm_SlvEnum28_named, _null28, glvm_SlvEnum27_named, _null27, glvm_SlvEnum26_named, _null26, glvm_SlvEnum25_named, _null25, glvm_SlvEnum24_named, _null24, glvm_SlvEnum23_named, _null23, glvm_SlvEnum22_named, _null22, glvm_SlvEnum21_named, _null21, glvm_SlvEnum20_named, _null20, glvm_SlvEnum19_named, _null19, glvm_SlvEnum18_named, _null18, glvm_SlvEnum17_named, _null17, glvm_SlvEnum16_named, _null16, glvm_SlvEnum15_named, _null15, glvm_SlvEnum14_named, _null14, glvm_SlvEnum13_named, _null13, glvm_SlvEnum12_named, _null12, glvm_SlvEnum11_named, _null11, glvm_SlvEnum10_named, _null10, glvm_SlvEnum9_named, _null9, glvm_SlvEnum8_named, _null8, glvm_SlvEnum7_named, _null7, glvm_SlvEnum6_named, _null6, glvm_SlvEnum5_named, _null5, glvm_SlvEnum4_named, _null4, glvm_SlvEnum3_named, _null3, glvm_SlvEnum2_named, _null2, glvm_SlvEnum1_named)(enum_Type, __VA_ARGS__))

#define glvm_pv_get_macro_enum_impl(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum_implementation(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum_impl(__VA_ARGS__,\
glvm_SlvEnum62_implementation, glvm_SlvEnum61_implementation, glvm_SlvEnum60_implementation, glvm_SlvEnum59_implementation, glvm_SlvEnum58_implementation, glvm_SlvEnum57_implementation, glvm_SlvEnum56_implementation, glvm_SlvEnum55_implementation, glvm_SlvEnum54_implementation, glvm_SlvEnum53_implementation, glvm_SlvEnum52_implementation, glvm_SlvEnum51_implementation, glvm_SlvEnum50_implementation, glvm_SlvEnum49_implementation, glvm_SlvEnum48_implementation, glvm_SlvEnum47_implementation, glvm_SlvEnum46_implementation, glvm_SlvEnum45_implementation, glvm_SlvEnum44_implementation, glvm_SlvEnum43_implementation, glvm_SlvEnum42_implementation, glvm_SlvEnum41_implementation, glvm_SlvEnum40_implementation, glvm_SlvEnum39_implementation, glvm_SlvEnum38_implementation, glvm_SlvEnum37_implementation, glvm_SlvEnum36_implementation, glvm_SlvEnum35_implementation, glvm_SlvEnum34_implementation, glvm_SlvEnum33_implementation, glvm_SlvEnum32_implementation, glvm_SlvEnum31_implementation, glvm_SlvEnum30_implementation, glvm_SlvEnum29_implementation, glvm_SlvEnum28_implementation, glvm_SlvEnum27_implementation, glvm_SlvEnum26_implementation, glvm_SlvEnum25_implementation, glvm_SlvEnum24_implementation, glvm_SlvEnum23_implementation, glvm_SlvEnum22_implementation, glvm_SlvEnum21_implementation, glvm_SlvEnum20_implementation, glvm_SlvEnum19_implementation, glvm_SlvEnum18_implementation, glvm_SlvEnum17_implementation, glvm_SlvEnum16_implementation, glvm_SlvEnum15_implementation, glvm_SlvEnum14_implementation, glvm_SlvEnum13_implementation, glvm_SlvEnum12_implementation, glvm_SlvEnum11_implementation, glvm_SlvEnum10_implementation, glvm_SlvEnum9_implementation, glvm_SlvEnum8_implementation, glvm_SlvEnum7_implementation, glvm_SlvEnum6_implementation, glvm_SlvEnum5_implementation, glvm_SlvEnum4_implementation, glvm_SlvEnum3_implementation, glvm_SlvEnum2_implementation, glvm_SlvEnum1_implementation)(enum_Type, __VA_ARGS__))

#define glvm_pv_get_macro_enum_named_impl(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62,\
		_1_n, _2_n, _3_n, _4_n, _5_n, _6_n, _7_n, _8_n, _9_n, _10_n, _11_n, _12_n, _13_n, _14_n, _15_n, _16_n, _17_n, _18_n, _19_n, _20_n, _21_n, _22_n, _23_n, _24_n, _25_n, _26_n, _27_n, _28_n, _29_n, _30_n, _31_n, _32_n, _33_n, _34_n, _35_n, _36_n, _37_n, _38_n, _39_n, _40_n, _41_n, _42_n, _43_n, _44_n, _45_n, _46_n, _47_n, _48_n, _49_n, _50_n, _51_n, _52_n, _53_n, _54_n, _55_n, _56_n, _57_n, _58_n, _59_n, _60_n, _61_n, _62_n,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum_named_implementation(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum_named_impl(__VA_ARGS__,\
glvm_SlvEnum62_named_implementation, _null62, glvm_SlvEnum61_named_implementation, _null61, glvm_SlvEnum60_named_implementation, _null60, glvm_SlvEnum59_named_implementation, _null59, glvm_SlvEnum58_named_implementation, _null58, glvm_SlvEnum57_named_implementation, _null57, glvm_SlvEnum56_named_implementation, _null56, glvm_SlvEnum55_named_implementation, _null55, glvm_SlvEnum54_named_implementation, _null54, glvm_SlvEnum53_named_implementation, _null53, glvm_SlvEnum52_named_implementation, _null52, glvm_SlvEnum51_named_implementation, _null51, glvm_SlvEnum50_named_implementation, _null50, glvm_SlvEnum49_named_implementation, _null49, glvm_SlvEnum48_named_implementation, _null48, glvm_SlvEnum47_named_implementation, _null47, glvm_SlvEnum46_named_implementation, _null46, glvm_SlvEnum45_named_implementation, _null45, glvm_SlvEnum44_named_implementation, _null44, glvm_SlvEnum43_named_implementation, _null43, glvm_SlvEnum42_named_implementation, _null42, glvm_SlvEnum41_named_implementation, _null41, glvm_SlvEnum40_named_implementation, _null40, glvm_SlvEnum39_named_implementation, _null39, glvm_SlvEnum38_named_implementation, _null38, glvm_SlvEnum37_named_implementation, _null37, glvm_SlvEnum36_named_implementation, _null36, glvm_SlvEnum35_named_implementation, _null35, glvm_SlvEnum34_named_implementation, _null34, glvm_SlvEnum33_named_implementation, _null33, glvm_SlvEnum32_named_implementation, _null32, glvm_SlvEnum31_named_implementation, _null31, glvm_SlvEnum30_named_implementation, _null30, glvm_SlvEnum29_named_implementation, _null29, glvm_SlvEnum28_named_implementation, _null28, glvm_SlvEnum27_named_implementation, _null27, glvm_SlvEnum26_named_implementation, _null26, glvm_SlvEnum25_named_implementation, _null25, glvm_SlvEnum24_named_implementation, _null24, glvm_SlvEnum23_named_implementation, _null23, glvm_SlvEnum22_named_implementation, _null22, glvm_SlvEnum21_named_implementation, _null21, glvm_SlvEnum20_named_implementation, _null20, glvm_SlvEnum19_named_implementation, _null19, glvm_SlvEnum18_named_implementation, _null18, glvm_SlvEnum17_named_implementation, _null17, glvm_SlvEnum16_named_implementation, _null16, glvm_SlvEnum15_named_implementation, _null15, glvm_SlvEnum14_named_implementation, _null14, glvm_SlvEnum13_named_implementation, _null13, glvm_SlvEnum12_named_implementation, _null12, glvm_SlvEnum11_named_implementation, _null11, glvm_SlvEnum10_named_implementation, _null10, glvm_SlvEnum9_named_implementation, _null9, glvm_SlvEnum8_named_implementation, _null8, glvm_SlvEnum7_named_implementation, _null7, glvm_SlvEnum6_named_implementation, _null6, glvm_SlvEnum5_named_implementation, _null5, glvm_SlvEnum4_named_implementation, _null4, glvm_SlvEnum3_named_implementation, _null3, glvm_SlvEnum2_named_implementation, _null2, glvm_SlvEnum1_named_implementation)(enum_Type, __VA_ARGS__))

#endif

#if !(defined(_MSVC_TRADITIONAL) && _MSVC_TRADITIONAL)

#define EXPAND(arg) arg

#define glvm_pv_get_macro_enum(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum(__VA_ARGS__,\
glvm_SlvEnum99, glvm_SlvEnum98, glvm_SlvEnum97, glvm_SlvEnum96, glvm_SlvEnum95, glvm_SlvEnum94, glvm_SlvEnum93, glvm_SlvEnum92, glvm_SlvEnum91, glvm_SlvEnum90, glvm_SlvEnum89, glvm_SlvEnum88, glvm_SlvEnum87, glvm_SlvEnum86, glvm_SlvEnum85, glvm_SlvEnum84, glvm_SlvEnum83, glvm_SlvEnum82, glvm_SlvEnum81, glvm_SlvEnum80, glvm_SlvEnum79, glvm_SlvEnum78, glvm_SlvEnum77, glvm_SlvEnum76, glvm_SlvEnum75, glvm_SlvEnum74, glvm_SlvEnum73, glvm_SlvEnum72, glvm_SlvEnum71, glvm_SlvEnum70, glvm_SlvEnum69, glvm_SlvEnum68, glvm_SlvEnum67, glvm_SlvEnum66, glvm_SlvEnum65, glvm_SlvEnum64, glvm_SlvEnum63, glvm_SlvEnum62, glvm_SlvEnum61, glvm_SlvEnum60, glvm_SlvEnum59, glvm_SlvEnum58, glvm_SlvEnum57, glvm_SlvEnum56, glvm_SlvEnum55, glvm_SlvEnum54, glvm_SlvEnum53, glvm_SlvEnum52, glvm_SlvEnum51, glvm_SlvEnum50, glvm_SlvEnum49, glvm_SlvEnum48, glvm_SlvEnum47, glvm_SlvEnum46, glvm_SlvEnum45, glvm_SlvEnum44, glvm_SlvEnum43, glvm_SlvEnum42, glvm_SlvEnum41, glvm_SlvEnum40, glvm_SlvEnum39, glvm_SlvEnum38, glvm_SlvEnum37, glvm_SlvEnum36, glvm_SlvEnum35, glvm_SlvEnum34, glvm_SlvEnum33, glvm_SlvEnum32, glvm_SlvEnum31, glvm_SlvEnum30, glvm_SlvEnum29, glvm_SlvEnum28, glvm_SlvEnum27, glvm_SlvEnum26, glvm_SlvEnum25, glvm_SlvEnum24, glvm_SlvEnum23, glvm_SlvEnum22, glvm_SlvEnum21, glvm_SlvEnum20, glvm_SlvEnum19, glvm_SlvEnum18, glvm_SlvEnum17, glvm_SlvEnum16, glvm_SlvEnum15, glvm_SlvEnum14, glvm_SlvEnum13, glvm_SlvEnum12, glvm_SlvEnum11, glvm_SlvEnum10, glvm_SlvEnum9, glvm_SlvEnum8, glvm_SlvEnum7, glvm_SlvEnum6, glvm_SlvEnum5, glvm_SlvEnum4, glvm_SlvEnum3, glvm_SlvEnum2, glvm_SlvEnum1)(enum_Type, __VA_ARGS__))

#define glvm_pv_get_macro_enum_named(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99,\
		_1_n, _2_n, _3_n, _4_n, _5_n, _6_n, _7_n, _8_n, _9_n, _10_n, _11_n, _12_n, _13_n, _14_n, _15_n, _16_n, _17_n, _18_n, _19_n, _20_n, _21_n, _22_n, _23_n, _24_n, _25_n, _26_n, _27_n, _28_n, _29_n, _30_n, _31_n, _32_n, _33_n, _34_n, _35_n, _36_n, _37_n, _38_n, _39_n, _40_n, _41_n, _42_n, _43_n, _44_n, _45_n, _46_n, _47_n, _48_n, _49_n, _50_n, _51_n, _52_n, _53_n, _54_n, _55_n, _56_n, _57_n, _58_n, _59_n, _60_n, _61_n, _62_n, _63_n, _64_n, _65_n, _66_n, _67_n, _68_n, _69_n, _70_n, _71_n, _72_n, _73_n, _74_n, _75_n, _76_n, _77_n, _78_n, _79_n, _80_n, _81_n, _82_n, _83_n, _84_n, _85_n, _86_n, _87_n, _88_n, _89_n, _90_n, _91_n, _92_n, _93_n, _94_n, _95_n, _96_n, _97_n, _98_n, _99_n,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum_named(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum_named(__VA_ARGS__,\
glvm_SlvEnum99_named, _null99, glvm_SlvEnum98_named, _null98, glvm_SlvEnum97_named, _null97, glvm_SlvEnum96_named, _null96, glvm_SlvEnum95_named, _null95, glvm_SlvEnum94_named, _null94, glvm_SlvEnum93_named, _null93, glvm_SlvEnum92_named, _null92, glvm_SlvEnum91_named, _null91, glvm_SlvEnum90_named, _null90, glvm_SlvEnum89_named, _null89, glvm_SlvEnum88_named, _null88, glvm_SlvEnum87_named, _null87, glvm_SlvEnum86_named, _null86, glvm_SlvEnum85_named, _null85, glvm_SlvEnum84_named, _null84, glvm_SlvEnum83_named, _null83, glvm_SlvEnum82_named, _null82, glvm_SlvEnum81_named, _null81, glvm_SlvEnum80_named, _null80, glvm_SlvEnum79_named, _null79, glvm_SlvEnum78_named, _null78, glvm_SlvEnum77_named, _null77, glvm_SlvEnum76_named, _null76, glvm_SlvEnum75_named, _null75, glvm_SlvEnum74_named, _null74, glvm_SlvEnum73_named, _null73, glvm_SlvEnum72_named, _null72, glvm_SlvEnum71_named, _null71, glvm_SlvEnum70_named, _null70, glvm_SlvEnum69_named, _null69, glvm_SlvEnum68_named, _null68, glvm_SlvEnum67_named, _null67, glvm_SlvEnum66_named, _null66, glvm_SlvEnum65_named, _null65, glvm_SlvEnum64_named, _null64, glvm_SlvEnum63_named, _null63, glvm_SlvEnum62_named, _null62, glvm_SlvEnum61_named, _null61, glvm_SlvEnum60_named, _null60, glvm_SlvEnum59_named, _null59, glvm_SlvEnum58_named, _null58, glvm_SlvEnum57_named, _null57, glvm_SlvEnum56_named, _null56, glvm_SlvEnum55_named, _null55, glvm_SlvEnum54_named, _null54, glvm_SlvEnum53_named, _null53, glvm_SlvEnum52_named, _null52, glvm_SlvEnum51_named, _null51, glvm_SlvEnum50_named, _null50, glvm_SlvEnum49_named, _null49, glvm_SlvEnum48_named, _null48, glvm_SlvEnum47_named, _null47, glvm_SlvEnum46_named, _null46, glvm_SlvEnum45_named, _null45, glvm_SlvEnum44_named, _null44, glvm_SlvEnum43_named, _null43, glvm_SlvEnum42_named, _null42, glvm_SlvEnum41_named, _null41, glvm_SlvEnum40_named, _null40, glvm_SlvEnum39_named, _null39, glvm_SlvEnum38_named, _null38, glvm_SlvEnum37_named, _null37, glvm_SlvEnum36_named, _null36, glvm_SlvEnum35_named, _null35, glvm_SlvEnum34_named, _null34, glvm_SlvEnum33_named, _null33, glvm_SlvEnum32_named, _null32, glvm_SlvEnum31_named, _null31, glvm_SlvEnum30_named, _null30, glvm_SlvEnum29_named, _null29, glvm_SlvEnum28_named, _null28, glvm_SlvEnum27_named, _null27, glvm_SlvEnum26_named, _null26, glvm_SlvEnum25_named, _null25, glvm_SlvEnum24_named, _null24, glvm_SlvEnum23_named, _null23, glvm_SlvEnum22_named, _null22, glvm_SlvEnum21_named, _null21, glvm_SlvEnum20_named, _null20, glvm_SlvEnum19_named, _null19, glvm_SlvEnum18_named, _null18, glvm_SlvEnum17_named, _null17, glvm_SlvEnum16_named, _null16, glvm_SlvEnum15_named, _null15, glvm_SlvEnum14_named, _null14, glvm_SlvEnum13_named, _null13, glvm_SlvEnum12_named, _null12, glvm_SlvEnum11_named, _null11, glvm_SlvEnum10_named, _null10, glvm_SlvEnum9_named, _null9, glvm_SlvEnum8_named, _null8, glvm_SlvEnum7_named, _null7, glvm_SlvEnum6_named, _null6, glvm_SlvEnum5_named, _null5, glvm_SlvEnum4_named, _null4, glvm_SlvEnum3_named, _null3, glvm_SlvEnum2_named, _null2, glvm_SlvEnum1_named)(enum_Type, __VA_ARGS__))

#define glvm_pv_get_macro_enum_impl(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum_implementation(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum_impl(__VA_ARGS__,\
glvm_SlvEnum99_implementation, glvm_SlvEnum98_implementation, glvm_SlvEnum97_implementation, glvm_SlvEnum96_implementation, glvm_SlvEnum95_implementation, glvm_SlvEnum94_implementation, glvm_SlvEnum93_implementation, glvm_SlvEnum92_implementation, glvm_SlvEnum91_implementation, glvm_SlvEnum90_implementation, glvm_SlvEnum89_implementation, glvm_SlvEnum88_implementation, glvm_SlvEnum87_implementation, glvm_SlvEnum86_implementation, glvm_SlvEnum85_implementation, glvm_SlvEnum84_implementation, glvm_SlvEnum83_implementation, glvm_SlvEnum82_implementation, glvm_SlvEnum81_implementation, glvm_SlvEnum80_implementation, glvm_SlvEnum79_implementation, glvm_SlvEnum78_implementation, glvm_SlvEnum77_implementation, glvm_SlvEnum76_implementation, glvm_SlvEnum75_implementation, glvm_SlvEnum74_implementation, glvm_SlvEnum73_implementation, glvm_SlvEnum72_implementation, glvm_SlvEnum71_implementation, glvm_SlvEnum70_implementation, glvm_SlvEnum69_implementation, glvm_SlvEnum68_implementation, glvm_SlvEnum67_implementation, glvm_SlvEnum66_implementation, glvm_SlvEnum65_implementation, glvm_SlvEnum64_implementation, glvm_SlvEnum63_implementation, glvm_SlvEnum62_implementation, glvm_SlvEnum61_implementation, glvm_SlvEnum60_implementation, glvm_SlvEnum59_implementation, glvm_SlvEnum58_implementation, glvm_SlvEnum57_implementation, glvm_SlvEnum56_implementation, glvm_SlvEnum55_implementation, glvm_SlvEnum54_implementation, glvm_SlvEnum53_implementation, glvm_SlvEnum52_implementation, glvm_SlvEnum51_implementation, glvm_SlvEnum50_implementation, glvm_SlvEnum49_implementation, glvm_SlvEnum48_implementation, glvm_SlvEnum47_implementation, glvm_SlvEnum46_implementation, glvm_SlvEnum45_implementation, glvm_SlvEnum44_implementation, glvm_SlvEnum43_implementation, glvm_SlvEnum42_implementation, glvm_SlvEnum41_implementation, glvm_SlvEnum40_implementation, glvm_SlvEnum39_implementation, glvm_SlvEnum38_implementation, glvm_SlvEnum37_implementation, glvm_SlvEnum36_implementation, glvm_SlvEnum35_implementation, glvm_SlvEnum34_implementation, glvm_SlvEnum33_implementation, glvm_SlvEnum32_implementation, glvm_SlvEnum31_implementation, glvm_SlvEnum30_implementation, glvm_SlvEnum29_implementation, glvm_SlvEnum28_implementation, glvm_SlvEnum27_implementation, glvm_SlvEnum26_implementation, glvm_SlvEnum25_implementation, glvm_SlvEnum24_implementation, glvm_SlvEnum23_implementation, glvm_SlvEnum22_implementation, glvm_SlvEnum21_implementation, glvm_SlvEnum20_implementation, glvm_SlvEnum19_implementation, glvm_SlvEnum18_implementation, glvm_SlvEnum17_implementation, glvm_SlvEnum16_implementation, glvm_SlvEnum15_implementation, glvm_SlvEnum14_implementation, glvm_SlvEnum13_implementation, glvm_SlvEnum12_implementation, glvm_SlvEnum11_implementation, glvm_SlvEnum10_implementation, glvm_SlvEnum9_implementation, glvm_SlvEnum8_implementation, glvm_SlvEnum7_implementation, glvm_SlvEnum6_implementation, glvm_SlvEnum5_implementation, glvm_SlvEnum4_implementation, glvm_SlvEnum3_implementation, glvm_SlvEnum2_implementation, glvm_SlvEnum1_implementation)(enum_Type, __VA_ARGS__))

#define glvm_pv_get_macro_enum_named_impl(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99,\
		_1_n, _2_n, _3_n, _4_n, _5_n, _6_n, _7_n, _8_n, _9_n, _10_n, _11_n, _12_n, _13_n, _14_n, _15_n, _16_n, _17_n, _18_n, _19_n, _20_n, _21_n, _22_n, _23_n, _24_n, _25_n, _26_n, _27_n, _28_n, _29_n, _30_n, _31_n, _32_n, _33_n, _34_n, _35_n, _36_n, _37_n, _38_n, _39_n, _40_n, _41_n, _42_n, _43_n, _44_n, _45_n, _46_n, _47_n, _48_n, _49_n, _50_n, _51_n, _52_n, _53_n, _54_n, _55_n, _56_n, _57_n, _58_n, _59_n, _60_n, _61_n, _62_n, _63_n, _64_n, _65_n, _66_n, _67_n, _68_n, _69_n, _70_n, _71_n, _72_n, _73_n, _74_n, _75_n, _76_n, _77_n, _78_n, _79_n, _80_n, _81_n, _82_n, _83_n, _84_n, _85_n, _86_n, _87_n, _88_n, _89_n, _90_n, _91_n, _92_n, _93_n, _94_n, _95_n, _96_n, _97_n, _98_n, _99_n,\
		macro_arg, ...) macro_arg
#define glvm_SlvEnum_named_implementation(enum_Type, ...) EXPAND( glvm_pv_get_macro_enum_named_impl(__VA_ARGS__,\
glvm_SlvEnum99_named_implementation, _null99, glvm_SlvEnum98_named_implementation, _null98, glvm_SlvEnum97_named_implementation, _null97, glvm_SlvEnum96_named_implementation, _null96, glvm_SlvEnum95_named_implementation, _null95, glvm_SlvEnum94_named_implementation, _null94, glvm_SlvEnum93_named_implementation, _null93, glvm_SlvEnum92_named_implementation, _null92, glvm_SlvEnum91_named_implementation, _null91, glvm_SlvEnum90_named_implementation, _null90, glvm_SlvEnum89_named_implementation, _null89, glvm_SlvEnum88_named_implementation, _null88, glvm_SlvEnum87_named_implementation, _null87, glvm_SlvEnum86_named_implementation, _null86, glvm_SlvEnum85_named_implementation, _null85, glvm_SlvEnum84_named_implementation, _null84, glvm_SlvEnum83_named_implementation, _null83, glvm_SlvEnum82_named_implementation, _null82, glvm_SlvEnum81_named_implementation, _null81, glvm_SlvEnum80_named_implementation, _null80, glvm_SlvEnum79_named_implementation, _null79, glvm_SlvEnum78_named_implementation, _null78, glvm_SlvEnum77_named_implementation, _null77, glvm_SlvEnum76_named_implementation, _null76, glvm_SlvEnum75_named_implementation, _null75, glvm_SlvEnum74_named_implementation, _null74, glvm_SlvEnum73_named_implementation, _null73, glvm_SlvEnum72_named_implementation, _null72, glvm_SlvEnum71_named_implementation, _null71, glvm_SlvEnum70_named_implementation, _null70, glvm_SlvEnum69_named_implementation, _null69, glvm_SlvEnum68_named_implementation, _null68, glvm_SlvEnum67_named_implementation, _null67, glvm_SlvEnum66_named_implementation, _null66, glvm_SlvEnum65_named_implementation, _null65, glvm_SlvEnum64_named_implementation, _null64, glvm_SlvEnum63_named_implementation, _null63, glvm_SlvEnum62_named_implementation, _null62, glvm_SlvEnum61_named_implementation, _null61, glvm_SlvEnum60_named_implementation, _null60, glvm_SlvEnum59_named_implementation, _null59, glvm_SlvEnum58_named_implementation, _null58, glvm_SlvEnum57_named_implementation, _null57, glvm_SlvEnum56_named_implementation, _null56, glvm_SlvEnum55_named_implementation, _null55, glvm_SlvEnum54_named_implementation, _null54, glvm_SlvEnum53_named_implementation, _null53, glvm_SlvEnum52_named_implementation, _null52, glvm_SlvEnum51_named_implementation, _null51, glvm_SlvEnum50_named_implementation, _null50, glvm_SlvEnum49_named_implementation, _null49, glvm_SlvEnum48_named_implementation, _null48, glvm_SlvEnum47_named_implementation, _null47, glvm_SlvEnum46_named_implementation, _null46, glvm_SlvEnum45_named_implementation, _null45, glvm_SlvEnum44_named_implementation, _null44, glvm_SlvEnum43_named_implementation, _null43, glvm_SlvEnum42_named_implementation, _null42, glvm_SlvEnum41_named_implementation, _null41, glvm_SlvEnum40_named_implementation, _null40, glvm_SlvEnum39_named_implementation, _null39, glvm_SlvEnum38_named_implementation, _null38, glvm_SlvEnum37_named_implementation, _null37, glvm_SlvEnum36_named_implementation, _null36, glvm_SlvEnum35_named_implementation, _null35, glvm_SlvEnum34_named_implementation, _null34, glvm_SlvEnum33_named_implementation, _null33, glvm_SlvEnum32_named_implementation, _null32, glvm_SlvEnum31_named_implementation, _null31, glvm_SlvEnum30_named_implementation, _null30, glvm_SlvEnum29_named_implementation, _null29, glvm_SlvEnum28_named_implementation, _null28, glvm_SlvEnum27_named_implementation, _null27, glvm_SlvEnum26_named_implementation, _null26, glvm_SlvEnum25_named_implementation, _null25, glvm_SlvEnum24_named_implementation, _null24, glvm_SlvEnum23_named_implementation, _null23, glvm_SlvEnum22_named_implementation, _null22, glvm_SlvEnum21_named_implementation, _null21, glvm_SlvEnum20_named_implementation, _null20, glvm_SlvEnum19_named_implementation, _null19, glvm_SlvEnum18_named_implementation, _null18, glvm_SlvEnum17_named_implementation, _null17, glvm_SlvEnum16_named_implementation, _null16, glvm_SlvEnum15_named_implementation, _null15, glvm_SlvEnum14_named_implementation, _null14, glvm_SlvEnum13_named_implementation, _null13, glvm_SlvEnum12_named_implementation, _null12, glvm_SlvEnum11_named_implementation, _null11, glvm_SlvEnum10_named_implementation, _null10, glvm_SlvEnum9_named_implementation, _null9, glvm_SlvEnum8_named_implementation, _null8, glvm_SlvEnum7_named_implementation, _null7, glvm_SlvEnum6_named_implementation, _null6, glvm_SlvEnum5_named_implementation, _null5, glvm_SlvEnum4_named_implementation, _null4, glvm_SlvEnum3_named_implementation, _null3, glvm_SlvEnum2_named_implementation, _null2, glvm_SlvEnum1_named_implementation)(enum_Type, __VA_ARGS__))

#endif

template <class Tdata, class Tvalue>
class SlvCombo;

/*! Class containing one or multiple message associated with a level of criticity and automatically sorted to highlight the most critical one.
* Convenient to return possible errors.
* Practical use: create instances by setting an error type and a message.
* += instances to stack errors and return the overall status result.*/
//class SlvStatus : public SlvOS {
class SlvStatus : public SlvOS {

public:

    /*! Possible types of status.*/
    enum class statusType { ok, information, warning, critical };

private:

    typedef SlvCombo<std::string, statusType> SlvStatusSignal;

    /*! Vector of status messages sorted by descending order so that the more a status is critical, the more it will be set to front.
    * int is for statusType to be treated as a numerical value.*/
    //SlvSortDescending< SlvStatusSignal, int >* status_signals;//pointer to just use forward decalaration
    std::vector<SlvStatusSignal>* status_signals;//pointer to just use forward decalaration

    /*! Status that are related to this one.*/
    std::vector<SlvStatus*> sub_status;

    /*! Add a status \p _type with a corresponding \p \message.*/
    void push(const statusType& _type, const std::string& _message);

public:

    SlvStatus(statusType _type = statusType::ok, std::string _message = "");
    SlvStatus(statusType _type, const char* _format, ...);
    SlvStatus(const SlvStatus& _status);
    ~SlvStatus();

    typedef typename std::vector<SlvStatusSignal>::const_iterator const_iterator;
    /*! Iterator to the first element.*/
    const_iterator begin() const;
    /*! Iterator to the last element.*/
    const_iterator end() const;

    typedef typename std::vector<SlvStatus*>::const_iterator const_iterator_sub;
    /*! Iterator to the first element of sub status.*/
    const_iterator_sub begin_sub() const;
    /*! Iterator to the last element of sub status.*/
    const_iterator_sub end_sub() const;

    /*! Number of status contained.*/
    size_t size() const;
    /*! Get the most critical status.*/
    const statusType& get_type() const;
    /*! Get the most critical message.*/
    const std::string& get_message() const;
    /*! Get status number \p i.*/
    const statusType& get_type(const unsigned int i) const;
    /*! Get message number \p i.*/
    const std::string& get_message(const unsigned int i) const;

    /*! Check operator. Return true if the most critical status is equal to statusType::ok.*/
    operator bool() const;

    SlvStatus& operator=(const SlvStatus& _status);
    /*! Sum status and reordrer them.*/
    SlvStatus& operator+=(const SlvStatus& _status);

    /*! Number of sub status contained.*/
    size_t size_sub() const;
    /*! Whether the status has sub status or not.*/
    bool has_sub_status() const;
    /*! Get sub status number \p i.*/
    const SlvStatus& get_sub_status(const unsigned int i) const;
    /*! Add a \p _status which is specifically related to this status.*/
    void add_sub_status(const SlvStatus& _status);
    
    /*! Get string corresponding to the status messages.
    * \p _l_show_all : if false get only most critical message (if any). If true get all messages.*/
    std::string to_string(bool _l_show_all) const;

private:

    static bool sortStatusSignal(SlvStatusSignal _signal1, SlvStatusSignal _signal2);
    static bool sortStatus(const SlvStatus* _status1, const SlvStatus* _status2);
    /* Recursively get the most critical status signal.*/
    const SlvStatusSignal& get_status_signal() const;
    /*! Delete and clear sub status.*/
    void clear_sub_status();
    void ostream(std::ostream& _os) const;
    /*! Get string corresponding to the status messages.
    * \p _l_show_all : if false get only most critical message (if any). If true get all messages.*/
    std::string to_string(bool _l_show_all, int _depth) const;

};

glvm_SlvEnum_implementation(SlvStatus::statusType, ok, information, warning, critical)

#define _COMMA ,
#define _PARENTHESIS1 (
#define _PARENTHESIS2 )

#define COMMA _COMMA
#define PARENTHESIS1 _PARENTHESIS1
#define PARENTHESIS2 _PARENTHESIS2

#define BRACKET1 {
#define BRACKET2 }

#define _STRINGIFY(arg) #arg
#define STRINGIFY(arg) _STRINGIFY(arg)

#define EXPAND(arg) arg

#define MYDEBUG1(value1) std::cout << std::string(#value1) +" = " << value1 << std::endl;
#define MYDEBUG2(value1,value2) std::cout << std::string(#value1) +" = " << value1 << std::string(", ")+ #value2 + " = " << value2 << std::endl;

#define INCLUDE_HEADER(file_name) STRINGIFY(file_name.h)

//OS TYPE MACROS
#ifdef _WIN32
#define OS_WIN
#ifdef _WIN64
#define OS_WIN
#endif
#elif __APPLE__
#if TARGET_OS_MAC
#define OS_MAC
#else
#   error "Apple platform not managed"
#endif
#elif __linux__
#define OS_LINUX
#elif __unix__ // all "unices" not caught above
#define OS_UNIX
#else
#   error "Compiler not managed"
#endif

#if defined(__clang__)
#define COMPILER_CLANG
#elif defined(__GNUC__) || defined(__GNUG__)
#define COMPILER_GCC
#elif defined(_MSC_VER)
#define COMPILER_MSVC
#endif

/*! Static methods for file management.*/
class SlvFileMgr {

public:

    /*! Default file name extension: .data*/
    glvm_staticVariable(const, std::string, default_name_extension, ".data")

    /*! Path applied before any RELATIVE path managed by the SlvFileMgr framework.
    * Example: if set to "../../foo/", any relative path will be prefixed as so.*/
    glvm_staticVariable(, std::string, master_relative_path, "")

public:

    /*! Get extension of \p _name (last found dot). Return empty string if no extension found.*/
    static std::string get_extension(const std::string& _name);
    /*! Remove extension of \p _name. Stem. test.abc => test.*/
    static std::string remove_extension(const std::string& _name);

    /*! Get file name of a path \p _path. With our without (stem) extension \p _l_extension.*/
    static std::string get_file_name_str(const std::string& _path, bool _l_extension);

    /*! Get the directory part of a path \p _path.*/
    static std::string get_directory_str(const std::string& _path);

    /*! Get the effective path of \p _directory, relatively to master_relative_path() if relative.*/
    static std::string get_path(const SlvDirectory& _directory);
    /*! Get the effective path of \p _file, relatively to master_relative_path() if relative.*/
    static std::string get_path(const SlvFile& _file);

    /*! Return true if \p _path is relative, by analyzing first characters of the string.
    * On Windows: not relative if second character is ':'.
    * Otherwise: not relative if first character is '/'.*/
    static bool is_path_relative(const std::string& _path);

private:
    //glvm_staticVariable(const, std::vector<char>, forbidden_file_characters, std::vector<char>({ '*','/', '\\', '<' ,'>', ':', '|', '?' }))
    glvm_staticVariable(const, std::string, forbidden_file_characters, "*/\\<>:|?,")
public:
    /*! Replace forbiden characters by \p _replacement character.
    * \p _l_consecutive : if enabled, consecutive forbidden characters are replaced to a single replacement character.
    * \p _l_extension : if enabled, adds space character to list of forbidden characters.*/
    static std::string replace_forbidden_file_characters(const std::string& _string, char _replacement, bool _l_consecutive, bool _l_extension = false);

    /*! Write a template object \p _dat in a BINARY file located at \p _file_path.*/
    template <class Tdat>
    static SlvStatus write_binary(const Tdat& _dat, const std::string& _file_path, std::ios::openmode _position = std::ios::trunc);

    /*! Read a template object \p _dat from a BINARY file located at \p _file_path.*/
    template <class Tdat>
    static SlvStatus read_binary(Tdat& _dat, const std::string& _file_path);

    /*! Write a template object \p _dat in a TEXT file located at \p _file_path.*/
    template <class Tdat>
    static SlvStatus write_text(const Tdat& _dat, const std::string& _file_path, std::ios::openmode _position = std::ios::trunc);
    /*! Read a template object \p _dat from a TEXT file located at \p _file_path.*/
    template <class Tdat>
    static SlvStatus read_text(Tdat& _dat, const std::string& _file_path);

    /*! Open file \p _file_stream located at \p _file_path.*/
    template <class Tfile>
    static SlvStatus open_file(Tfile& _file_stream, const std::string& _file_path, std::ios::openmode _mode1, std::ios::openmode _mode2, std::ios::openmode _mode3);
    /*! Open file \p _file_stream located at \p _file_path.*/
    template <class Tfile>
    static SlvStatus open_file(Tfile& _file_stream, const std::string& _file_path, std::ios::openmode _mode1, std::ios::openmode _mode2);
    /*! Open file \p _file_stream located at \p _file_path.*/
    template <class Tfile>
    static SlvStatus open_file(Tfile& _file_stream, const std::string& _file_path, std::ios::openmode _mode1);

    /*! Return true if opening \p _file is possible using the mode \p _io_mode.*/
    static bool test_file(const SlvFile& _file, std::ios::openmode _io_mode);

    /*! Open file \p _file_stream located at \p _file.*/
    template <class Tfile>
    static SlvStatus open_file(Tfile& _file_stream, const SlvFile& _file, std::ios::openmode _mode1, std::ios::openmode _mode2, std::ios::openmode _mode3);
    /*! Open file \p _file_stream located at \p _file.*/
    template <class Tfile>
    static SlvStatus open_file(Tfile& _file_stream, const SlvFile& _file, std::ios::openmode _mode1, std::ios::openmode _mode2);
    /*! Open file \p _file_stream located at \p _file.*/
    template <class Tfile>
    static SlvStatus open_file(Tfile& _file_stream, const SlvFile& _file, std::ios::openmode _mode1);

    /*! Open file \p _file_stream located at \p _file in truncated mode. Convenience function.*/
    static SlvStatus open_file(std::ofstream& _file_stream, const SlvFile& _file);
    /*! Open file \p _file_stream located at \p _file. Convenience function.*/
    static SlvStatus open_file(std::ifstream& _file_stream, const SlvFile& _file);

    /*! Create directory \p _subpath relatively to master_relative_path(). Also create intermediate directories if they do not exist with \p _l_force_parents.*/
    static bool mkdir(const std::string& _subpath, bool _l_force_parents = false);

};

template <class Tdat>
SlvStatus SlvFileMgr::write_binary(const Tdat& _dat, const std::string& _file_path, std::ios::openmode _position) {

    SlvStatus status;

    std::ofstream output_file;
    status = SlvFileMgr::open_file(output_file, _file_path, std::ios::out, _position, std::ios::binary);

    if (status) {
        slv::rw::writeB(_dat, output_file);
        output_file.close();
    }

    return status;

}

template <class Tdat>
SlvStatus SlvFileMgr::read_binary(Tdat& _dat, const std::string& _file_path) {

    SlvStatus status;

    std::ifstream input_file;
    status = SlvFileMgr::open_file(input_file, _file_path, std::ios::in, std::ios::binary);

    if (status) {
        bool l_read = slv::rw::readB(_dat, input_file);
        input_file.close();
        if (!l_read) status = SlvStatus(SlvStatus::statusType::warning, "Failed reading the file :\n" + _file_path);
    }

    return status;

}

template <class Tdat>
SlvStatus SlvFileMgr::write_text(const Tdat& _dat, const std::string& _file_path, std::ios::openmode _position) {

    SlvStatus status;

    std::ofstream output_file;
    status = SlvFileMgr::open_file(output_file, _file_path, std::ios::out, _position);

    if (status) {
        output_file << _dat;
        output_file.close();
    }

    return status;

}

template <class Tdat>
SlvStatus SlvFileMgr::read_text(Tdat& _dat, const std::string& _file_path) {

    SlvStatus status;

    std::ifstream input_file;
    status = SlvFileMgr::open_file(input_file, _file_path, std::ios::in);

    if (status) {
        input_file >> _dat;
        input_file.close();
    }

    return status;

}

template <class Tfile>
SlvStatus SlvFileMgr::open_file(Tfile& _file_stream, const std::string& _file_path, std::ios::openmode _mode1, std::ios::openmode _mode2, std::ios::openmode _mode3) {

    SlvFile file(_file_path);
    return open_file(_file_stream, file, _mode1, _mode2, _mode3);

}

template <class Tfile>
SlvStatus SlvFileMgr::open_file(Tfile& _file_stream, const std::string& _file_path, std::ios::openmode _mode1, std::ios::openmode _mode2) {

    SlvFile file(_file_path);
    return open_file(_file_stream, file, _mode1, _mode2);

}

template <class Tfile>
SlvStatus SlvFileMgr::open_file(Tfile& _file_stream, const std::string& _file_path, std::ios::openmode _mode1) {

    SlvFile file(_file_path);
    return open_file(_file_stream, file, _mode1);

}

template <class Tfile>
SlvStatus SlvFileMgr::open_file(Tfile& _file_stream, const SlvFile& _file, std::ios::openmode _mode1, std::ios::openmode _mode2, std::ios::openmode _mode3) {

    SlvStatus status;

    _file_stream.open(SlvFileMgr::get_path(_file).c_str(), _mode1 | _mode2 | _mode3);
    if (!_file_stream.is_open()) {
        const int max_errorlen = 95;// no access to strerrorlen_s
        char* errmsg = new char[max_errorlen];
#if defined(OS_WIN)
        strerror_s(errmsg, max_errorlen, errno);
#elif defined(OS_LINUX) || defined(OS_UNIX)
        errmsg = strerror_r(errno, errmsg, max_errorlen);
#endif
        status = SlvStatus(SlvStatus::statusType::information, std::string(errmsg) + ", couldn't open file: " + SlvFileMgr::get_path(_file));
        delete[] errmsg;
    }

    return status;

}

template <class Tfile>
SlvStatus SlvFileMgr::open_file(Tfile& _file_stream, const SlvFile& _file, std::ios::openmode _mode1, std::ios::openmode _mode2) {

    SlvStatus status;

    _file_stream.open(SlvFileMgr::get_path(_file).c_str(), _mode1 | _mode2);
    if (!_file_stream.is_open()) {
        const int max_errorlen = 95;// no access to strerrorlen_s
        char* errmsg = new char[max_errorlen];
#if defined(OS_WIN)
        strerror_s(errmsg, max_errorlen, errno);
#elif defined(OS_LINUX) || defined(OS_UNIX)
        errmsg = strerror_r(errno, errmsg, max_errorlen);
#endif
        status = SlvStatus(SlvStatus::statusType::information, std::string(errmsg) + ", couldn't open file: " + SlvFileMgr::get_path(_file));
        delete[] errmsg;
    }

    return status;

}
template <class Tfile>
SlvStatus SlvFileMgr::open_file(Tfile& _file_stream, const SlvFile& _file, std::ios::openmode _mode1) {

    SlvStatus status;

    _file_stream.open(SlvFileMgr::get_path(_file).c_str(), _mode1);
    if (!_file_stream.is_open()) {
        const int max_errorlen = 95;// no access to strerrorlen_s
        char* errmsg = new char[max_errorlen];
#if defined(OS_WIN)
        strerror_s(errmsg, max_errorlen, errno);
#elif defined(OS_LINUX) || defined(OS_UNIX)
        errmsg = strerror_r(errno, errmsg, max_errorlen);
#endif
        status = SlvStatus(SlvStatus::statusType::information, std::string(errmsg) + ", couldn't open file: " + SlvFileMgr::get_path(_file));
#if defined(OS_WIN)
        delete[] errmsg;
#endif
    }

    return status;

}

#ifndef GLOVE_DISABLE_QT

class GlvOpenFile;
class QBoxLayout;

/*! Base widget managing save/load (pure virtual).*/
class GlvWidgetSaveLoad_base : public QWidget {

	Q_OBJECT

private:

	QBoxLayout* main_layout;
	GlvOpenFile* open_file;
	SlvFileExtensions allowed_extensions;

	void paintEvent(QPaintEvent* _event);

protected:
	/* \p _orientation : Orientation of Save/Load buttons. Stacked or side-by-side.*/
	GlvWidgetSaveLoad_base(const SlvFileExtensions& _allowed_extensions, Qt::Orientation _orientation, std::string _data_name);
public:
	virtual ~GlvWidgetSaveLoad_base();

	/* \p _orientation : Orientation of Save/Load buttons. Stacked or side-by-side.*/
	void set_orientation(Qt::Orientation _orientation);

	/*! Return the allowed extensions for saving/loading the file.*/
	SlvFileExtensions get_allowed_extensions() const;
	/*! Set the allowed extensions for saving/loading the file.*/
	void set_allowed_extensions(const SlvFileExtensions& _allowed_extensions);

protected:
	/*! Methods to avoid template GlvWidgetSaveLoad class to include GlvOpenFile.*/
	void open_file_save();
	bool open_file_load();
	bool is_ready(QIODevice::OpenMode _mode);
	std::string get_file_name() const;
	void delete_open_file();

	/*! If \p _status is not ok, pop up a question widget to ask whether loading must be done or not.*/
	bool interactive_load_parameters(const std::string& _file_name, const SlvStatus& _status);

public:

	virtual void save(const std::string& _file_name) = 0;
	virtual SlvStatus load(const std::string& _file_name) = 0;

private slots:

	void save_slot();
	void load_slot();

};

class QGridLayout;
class QLabel;
class GlvParametersWidget_base;

/*! Widget displaying data interface with name and tool tip description.*/
class GlvDescribedWidget_base : public QWidget {

    Q_OBJECT

protected:

    QGridLayout* layout;
    QLabel* data_name_label;
    QLabel* optional_text_label;

    const std::string data_name;

    GlvDescribedWidget_base(const std::string& _data_name);
    virtual ~GlvDescribedWidget_base();

    /*! Manage display of data type in 'WhatsThis'*/
    virtual void enable_data_type_info(bool _l_enable) = 0;

    void set_data_widget(QWidget* _data_widget, const QString& _optional_text_str);
    /*! \p _data_widget is is added to the instance layout. In case it was set in the layout of GlvParametersWidget (grid).*/
    void reclaim_widgets_ownership(QWidget* _data_widget);

    /*! For grid layout of parameters. Allows external ownership of data_name_label and optional_text.*/
    friend GlvParametersWidget_base;

signals:
    /*! Emits signal when value of widget has changed.*/
    void valueChanged();

};

class GlvWidgetSaveLoad_base;

class GlvSaveLoad {

protected:

	GlvWidgetSaveLoad_base* save_load_widget;

public:

	GlvSaveLoad();
	~GlvSaveLoad();

	/*! Delete the save/load widget. Return true if the widget existed and was deleted, false otherwise.*/
	bool delete_save_load_widget();

};

class QHBoxLayout;

class GlvWidget_base : public QWidget, public GlvSaveLoad {

    Q_OBJECT

public:
    class GlvWidgetConnector;

private:

    std::vector<QWidget*> optional_widgets;

protected:

    /*! Main data widget. Is a GlvWidgetData in general, unless there is a GlvWidgetMaker specialization.*/
    QWidget* data_widget;
    QHBoxLayout* layout;
    GlvWidgetConnector* connector;

protected:

    GlvWidget_base(QWidget* _parent = 0);
public:
    virtual ~GlvWidget_base();

    /*! Remove and delete optional widget from layout.
    * Return corresponding iterator in vector of optional widgets.*/
    std::vector<QWidget*>::iterator delete_optional_widget(QWidget* _widget);
    /*! Remove and delete all optional widgets.*/
    void delete_optional_widgets();

protected:

    /*! Set save/load widget. Called in GlvParametrizationSaveLoad.*/
    void set_save_load_widget(GlvWidgetSaveLoad_base* _save_load_widget);

    void resizeEvent(QResizeEvent* _resize_event);
    /*! Set data_widget to layout.*/
    void set_widget();

private:

    /*! Add optional widget to layout.
    * Takes ownership of the widget. Caution when deleting the instance.*/
    void add_optional_widget(QWidget* _widget);

    template <class Tvalue>
    friend struct GlvWidgetMaker;

    template <class T>
    friend class GlvWidgetSaveLoad;

signals:
    /*! Emitted whenever the value of the widget has changed.*/
    void valueChanged();
    /*! Emitted whenever the size of the widget has changed.*/
    void sizeChanged();

};

class GlvWidgetData_base : public QWidget {

    Q_OBJECT

protected:
    GlvWidgetData_base(QWidget* _parent) :QWidget(_parent) {}
    virtual ~GlvWidgetData_base() {}

signals:

    void sizeChanged();
};

/* Key widget to specialize depending on Tdata. Different from GlvWidget (deal with any type).
* Not supposed to be manipulated directly. Use GlvWidget publicly.
* In short GlvWidgetData is at the end of GlvWidget's chain.
* Must have methods: get_value(), set_value() and set_editable() methods.
* These methods can be directly available if the inherited widget contains them, or the methods can be implemented in the class.*/
template <class Tdata, typename = void>
class GlvWidgetData;

/*! Macro to add a connected type.*/
#define glvm_pv_GlvWidgetConnector(type)\
signals:\
void valueChanged(type _value);\
public slots:\
void valueChanged_slot(type _value) {\
    emit(valueChanged(_value));/*emits same signal as original*/\
    emit(glvwidget->valueChanged());/*emits neutral signal*/\
}

/*! Class is in charge to bridge signals from GlvWidgetData to GlvWidget_base.
* Basically, any GlvWidget<T> can emit ValueChanged() for any basic type
* The connector is here to bridge signals of particular types to slots of this class. Ex: void valueChanged_slot(double _value).
* Each time valueChanged_slot is called by connectionn it emits the corresponding (type wise) signal valueChanged(xxx), and emits glvwidget's valueChanged() signal.
* Work in progress to add other types.*/
class GlvWidget_base::GlvWidgetConnector : public QObject {

    Q_OBJECT

private:

    GlvWidget_base* glvwidget;

public:
    GlvWidgetConnector(GlvWidget_base* _glvwidget);
    GlvWidgetConnector();
    ~GlvWidgetConnector();

signals:

    void valueChanged(double _value);
    void valueChanged(int _value);
    void valueChanged(std::string _value);
    void valueChanged(const QString& _value);
    void valueChanged(const std::vector<int>& _coordinates);
    void sizeChanged();

private slots:
    void valueChanged_slot();
    void valueChanged_slot(double _value);
    void valueChanged_slot(int _value);
    void valueChanged_slot(std::string _value);
    void valueChanged_slot(const QString& _value);
    void valueChanged_slot(const std::vector<int>& _coordinates);

};

/*! Structure to manage signal bridge connection of GlvWidgetData<_Tdata>.
* Has to be specialized.
* See files GlvWidgetData_spec_xxx for examples.*/
template <class _Tdata, typename = void>
struct GlvWidgetMakerConnect;

// AT: Arithmetic Types.
// GlvWidgetData for arithemtic types such as int, unsigned int, float, double, bool

#define Tdata int
/*! GlvWidgetData specialization for type: int.*/
template <>
class GlvWidgetData<Tdata> : public QSpinBox {
public:
    GlvWidgetData(QWidget* _parent = 0);
    GlvWidgetData(const Tdata& _value, QWidget* _parent = 0);
    ~GlvWidgetData();
    void set_editable(bool l_editable);
    Tdata get_value() const;
    void set_value(const Tdata& _value);
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

#undef Tdata
#define Tdata unsigned int
/*! GlvWidgetData specialization for type: unsigned int.*/
template <>
class GlvWidgetData<Tdata> : public QSpinBox {
public:
    GlvWidgetData(QWidget* _parent = 0);
    GlvWidgetData(const Tdata& _value, QWidget* _parent = 0);
    ~GlvWidgetData();
    void set_editable(bool l_editable);
    Tdata get_value() const;
    void set_value(const Tdata& _value);
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

#undef Tdata
#define Tdata float
/*! GlvWidgetData specialization for type: float.*/
template <>
class GlvWidgetData<Tdata> : public QDoubleSpinBox {
public:
    GlvWidgetData(QWidget* _parent = 0);
    GlvWidgetData(const Tdata& _value, QWidget* _parent = 0);
    ~GlvWidgetData();
    void set_editable(bool l_editable);
    Tdata get_value() const;
    void set_value(const Tdata& _value);
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(double)), _widget_connector, SLOT(valueChanged_slot(double)));
    }
};

#undef Tdata
#define Tdata double
/*! GlvWidgetData specialization for type: double.*/
template <>
class GlvWidgetData<Tdata> : public QDoubleSpinBox {
public:
    GlvWidgetData(QWidget* _parent = 0);
    GlvWidgetData(const Tdata& _value, QWidget* _parent = 0);
    ~GlvWidgetData();
    void set_editable(bool l_editable);
    Tdata get_value() const;
    void set_value(const Tdata& _value);
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(double)), _widget_connector, SLOT(valueChanged_slot(double)));
    }
};

#undef Tdata
#define Tdata bool
/*! GlvWidgetData specialization for type: bool.*/
template <>
class GlvWidgetData<Tdata> : public QCheckBox {
public:
    GlvWidgetData(QWidget* _parent = 0);
    GlvWidgetData(const Tdata& _value, QWidget* _parent = 0);
    ~GlvWidgetData();
    void set_editable(bool l_editable);
    Tdata get_value() const;
    void set_value(const Tdata& _value);
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(stateChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

#undef Tdata

#endif

/*! Class managing a value ranging in [0, 1].*/
class SlvProportion : public SlvIOS {

public:

    typedef double Tvalue;

private:

    Tvalue value;

public:

    SlvProportion(Tvalue _value = 0.);
    ~SlvProportion();

    /*! Cast SlvProportion to value type.*/
    operator Tvalue() const;

    /*! Assign a \p _value to the instance.*/
    SlvProportion& operator=(const Tvalue& _value);

    bool readB(std::ifstream& _input_file);
    void writeB(std::ofstream& _output_file) const;

private:

    void istream(std::istream& _is);
    void ostream(std::ostream& _os) const;

};

#ifndef GLOVE_DISABLE_QT

class QSlider;
class QLabel;

/*! Widget managing a ratio value SlvProportion.
* The value is in the range [0, 1].
* The interaction can be done using a slider or a direct value input.*/
class GlvProportionWidget : public QWidget {

    Q_OBJECT

private:

    QDoubleSpinBox* value_widget;
    QLabel* percentage_label;
    QSlider* slider;

    int slider_size;

public:

    /*! \p _proportion : initial value.
    * \p _slider_size : number of sampled values for the slider.*/
    GlvProportionWidget(SlvProportion _proportion = 0, int _slider_size = 100, QWidget* _parent = 0);
    ~GlvProportionWidget();

    SlvProportion get_value() const;

    /*! Set the number of sampled values for the slider.*/
    void set_slider_size(int _slider_size);

    void set_editable(bool l_editable);

public slots:

    void set_value(const SlvProportion& _proportion);

private slots:

    void set_value_to_spinbox(int _value);
    void set_value_to_slider(double _value);
    void valueChanged_slot(double _value);

signals:
    void valueChanged(double _value);

};

#define Tdata SlvProportion

/*! GlvWidgetData for type SlvProportion.*/
template <>
class GlvWidgetData<Tdata> : public GlvProportionWidget {

public:
    GlvWidgetData(Tdata _ratio = Tdata(), QWidget* _parent = 0);
    ~GlvWidgetData();

};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(double)), _widget_connector, SLOT(valueChanged_slot(double)));
    }
};

#undef Tdata

#define Tdata std::string
/*! GlvWidgetData specialization for type: std::string.*/
template <>
class GlvWidgetData<Tdata> : public QLineEdit {
public:
    GlvWidgetData(QWidget* _parent = 0);
    GlvWidgetData(const Tdata& _value, QWidget* _parent = 0);
    ~GlvWidgetData();
    void set_editable(bool l_editable);
    Tdata get_value() const;
    void set_value(const Tdata& _value);
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(textChanged(const QString&)), _widget_connector, SLOT(valueChanged_slot(const QString&)));
    }
};
#undef Tdata

#endif

template <class T1, class T2>
std::ostream& operator<<(std::ostream& _os, const std::pair<T1, T2>& _pair) {
    _os << "[" << _pair.first << " ; " << _pair.second << "]";
    return _os;
}

template <class T1, class T2>
std::istream& operator>>(std::istream& _is, std::pair<T1, T2>& _pair) {
    _is >> _pair.first;
    _is >> _pair.second;
    return _is;
}

struct SlvCLI {

	/*! Parse \p _argc and \p _argv and return the corresponding parametrization.*/
	template <class Tparametrization>
	static Tparametrization parse(int _argc, char* _argv[]);

	struct Arguments;

	/*! Parse \p _argc and \p _argv and apply to \p _parametrization.*/
	template <class Tparametrization>
	static std::pair<Arguments, SlvStatus> parse(Tparametrization& _parametrization, int _argc, char* _argv[]);
	/*! Apply \p _arguments to \p _parametrization.
	* If conflicts exist in the arguments, they are being filtered out of \p _arguments. Ex: redundant multiple parameter name correspondences.*/
	template <class Tparametrization>
	static SlvStatus parse(Tparametrization& _parametrization, Arguments& _arguments);

	/*! Returns true if \p _argv contains "-glove".*/
	static bool has_glove(int _argc, char* _argv[]);

	/*! Create argc/argv based on provided arguments.*/
	static std::pair<int, char**> get_arguments(const std::vector< std::pair<std::string, std::string> >& _parameter_arguments, const std::vector<std::string>& _solo_arguments);

	struct Arguments {

	public :

		/*! Parameter identifier (starting with '-') and corresponding value.*/
		typedef std::map<std::string, std::vector<std::string> > Tparameters;

	private:

		/*! Parameter identifier (starting with '-') and corresponding value.*/
		Tparameters parameter_arguments;
		/*! Arguments that are not parameters.*/
		std::vector<std::string> solo_arguments;
		/*! Single argument of the -glove cli input. Used for loading a parametrization.*/
		std::string glove_argument;
		/*! Parse arguments.*/
		void parse(int _argc, char* _argv[]);

	public:

		Arguments(int _argc, char* _argv[]);
		/*! Get arguments that are not parameters. Ex: "-option".*/
		const std::vector<std::string>& get_solo_arguments() const;
		/*! Get list of arguments and their corresponding value. Ex: "-param 17".
		* Each parameter argument cas be accessed by its name (ex: "-param"), and return a vector of associated values.
		* A vector is used in case multiple identical arguments are provided (ex: "-param -17 -param 5").*/
		const Tparameters& get_parameter_arguments() const;
		/*! Get single argument of the -glove cli input. Used for loading a parametrization.*/
		const std::string& get_glove_argument() const;
		/*! Return true if the instance does not store any parameter.*/
		bool is_empty() const;
		/*! Remove all arguments except those which name is in \p _arguments_remaining.*/
		void filter(const std::vector<std::string>& _arguments_remaining);
		
	};

};

template <class Tparametrization>
Tparametrization SlvCLI::parse(int _argc, char* _argv[]) {

	Tparametrization parametrization;
	parse(parametrization, _argc, _argv);

	return parametrization;
}

template <class Tparametrization>
std::pair<SlvCLI::Arguments, SlvStatus> SlvCLI::parse(Tparametrization& _parametrization, int _argc, char* _argv[]) {

	Arguments arguments(_argc, _argv);

	SlvStatus status = parse(_parametrization, arguments);

	return { arguments, status };
}

template <class Tparametrization>
SlvStatus SlvCLI::parse(Tparametrization& _parametrization, Arguments& _arguments) {

	SlvStatus status;

	if (!_arguments.is_empty()) {

		std::map<std::string, std::string> stream_values;
		for (Arguments::Tparameters::const_iterator it = _arguments.get_parameter_arguments().begin(); it != _arguments.get_parameter_arguments().end(); ++it) {
			stream_values[it->first] = it->second[0];
		}

		for (std::vector<std::string>::const_iterator it = _arguments.get_solo_arguments().begin(); it != _arguments.get_solo_arguments().end(); ++it) {
			stream_values[*it] = "1";
		}

		std::pair< std::map<std::string, int>, std::vector<std::string> > conflicts_missing = _parametrization.set_stream_values(stream_values, false);
		if (!conflicts_missing.first.empty()) {
			status += SlvStatus(SlvStatus::statusType::warning, "Multiple parameter correspondences in parametrization.");

			for (std::map<std::string, int>::const_iterator it = conflicts_missing.first.begin(); it != conflicts_missing.first.end(); ++it) {

				status.add_sub_status(SlvStatus(SlvStatus::statusType::warning, it->first + " : " + slv::string::to_string(it->second) + " correspondences"));

			}

		}

		_arguments.filter(conflicts_missing.second);

	}

	return status;
}

class SlvParametrization_base;

/*! Parent class of SlvParameter<T> to handle vectors of parameters.*/
class SlvParameter_base : virtual public SlvIOS {

protected:

	SlvParametrization_base* parametrization;

protected:

	SlvParameter_base(SlvParametrization_base* _parametrization);
	virtual ~SlvParameter_base();

	bool is_param_init_auto() const;

public:

	/*! Set parameter value using >> operator.*/
	virtual void set_stream_value(const std::string& _string, bool _l_param_only = true) = 0;
	/*! Get parameter value using << operator.*/
	virtual std::string get_stream_value(bool _l_param_only = true) const = 0;

	/*! Get parameter name.*/
	virtual const std::string& get_name() const = 0;
	/*! Get parameter description.*/
	virtual const std::string& get_description() const = 0;
	/*! Get parameter marker.*/
	virtual const unsigned int& get_marker() const = 0;

	/*! Check if rules are abided for this parameter. Rules can either depend only the parameter or either depend on other ones.*/
	virtual SlvStatus check_rules() const = 0;

	glvm_staticVariable(const, unsigned int, default_marker_value, 0)

	/*! Get the number of rules.*/
	virtual unsigned int get_Nrules() const = 0;

private:
	/*! Static cast attempt of parameter value. Returns NULL if the parameter value is not a parametrization.*/
	virtual const SlvParametrization_base* parametrization_cast() const = 0;

	friend class SlvParametrization_base;//for parametrization_cast

};

/*! Class inherited by SlvParameterRuleT managing the value of the rule if the template type requires one.*/
template <class Tparam>
class SlvParameterRuleValue {

protected:

    Tparam rule_value;

public:

    SlvParameterRuleValue(Tparam _rule_value);
    ~SlvParameterRuleValue();

    /*! Get rule value.*/
    const Tparam& get_rule_value() const;

};

template <class Tparam>
SlvParameterRuleValue<Tparam>::SlvParameterRuleValue(Tparam _rule_value) {
    rule_value = _rule_value;
}

template <class Tparam>
SlvParameterRuleValue<Tparam>::~SlvParameterRuleValue() {

}

template <class Tparam>
const Tparam& SlvParameterRuleValue<Tparam>::get_rule_value() const {
    return rule_value;
}

template <class Tparam>
class SlvParameter;

/*! Class to specialize if necessary to manage validation a template type. Used by SlvParameterRuleT.*/
template <class Tparam>
struct SlvParameterRuleValidation {
public:
    static SlvStatus is_valid(const SlvParameter<Tparam>* _parameter) {
        return SlvStatus();
    }
};

template <>
struct SlvParameterRuleValidation<SlvFile> {
public:
	static SlvStatus is_valid(const SlvParameter<SlvFile>* _parameter);
};

template <>
struct SlvParameterRuleValidation<SlvDirectory> {
public:
	static SlvStatus is_valid(const SlvParameter<SlvDirectory>* _parameter);
};

#ifndef GLOVE_DISABLE_QT

class QLineEdit;
class QPushButton;
class QLabel;

/*! Widget for selecting a file.
* By default the widget is set to manage a file for read only.
* Toggle Read/Write button to change mode.*/
class GlvOpenFile : public QWidget {

    Q_OBJECT

private:

    QLineEdit* line_edit;
    QPushButton* push_button_read;
    QPushButton* push_button_write;
    QPushButton* button_rw;
    SlvFileExtensions allowed_extensions;
    /*! File filter for QFileDialog.*/
    QString file_filter;
    QStringList file_filters;
    QLabel* read_status;
    QLabel* write_status;

    /*! Input/output mode for the widget. Set once at construction.
    * If IO::Any, both read an write are allowed.*/
    const SlvFile::IO io_mode;

    /*! Whether a valid file has been selected or not.*/
    std::map<QIODevice::OpenMode, bool> l_ready;

public:

    /*! \p _file : default file.*/
    GlvOpenFile(SlvFile _file, QWidget* _parent = 0);
    /*! \p _default : default file path.*/
    GlvOpenFile(QString _default = "", QWidget* _parent = 0);
    /*! File filter, description as \p _description and extensions as \p _allowed_extensions/*/
    GlvOpenFile(const std::string& _description, const SlvFileExtensions& _allowed_extensions, QWidget* _parent = 0);
    ~GlvOpenFile();

    /*! Return file instance. Check if is_ready() before using returned value.*/
    SlvFile get_file() const;

    /*! Whether a valid file has been selected or not for mode \p _mode.*/
    bool is_ready(QIODevice::OpenMode _mode) const;
    /*! Makes line edit read-only or not. Shows/hides the open directory button.*/
    void set_editable(bool l_editable);
    /*! Set the file filter for QFileDialog.*/
    void set_file_filter(QString _file_filter = QString(tr("All Files (*)")));

private:

    /*! Return the file filter for QFileDialog based on \p _file properties (allowed extensions, etc).*/
    static QString get_file_filter(const SlvFile& _file);
    static QString get_file_filter(const std::string& _description, const SlvFileExtensions& _allowed_extensions);
    /*! Return separate file filters for QFileDialog based on \p _file allowed extensions.*/
    static QStringList get_file_filters(const SlvFile& _file);

    /*! Check if file instance is ready for read and write.*/
    void update_readiness();

    static bool is_valid_read_file(const QString& _path);
    static bool is_valid_write_file(const QString& _path);

public slots:
    /*! Opens QFileDialog to select a file. Read only. Returns true if a file was selected. Returns false if cancelled.*/
    bool getOpenFileName();
    /*! Opens QFileDialog to select a file. Write only.*/
    void getSaveFileName();
    /*! Set file instance by editing QLineEdit. If file is valid, sets instance as ready.
    * Also set file filter based on the new \p _file.*/
    void set_file(const SlvFile& _file);

    /*! Changes read/write mode.*/
    void change_mode(bool _l_write);

private slots:

    void file_changed_slot(const QString& _file_name);

signals:

    /*! Emitted when QLineEdit changes.*/
    void file_changed(const QString& _file_name);

};

#if __cplusplus > 201402L

#define Tdata std::filesystem::path
/*! GlvWidgetData specialization for template type: std::filesystem::path.*/
template <>
class GlvWidgetData<Tdata> : public GlvOpenFile {

public:
    GlvWidgetData(Tdata _path = Tdata(), QWidget* _parent = 0) :GlvOpenFile(_path.generic_string(), _parent) {}
    ~GlvWidgetData() {}

    Tdata get_value() const {
        return GlvOpenFile::get_file().get_path();
    }
    void set_value(const Tdata& _value) {
        return GlvOpenFile::set_file(SlvFile(_value.generic_string()));
    }
};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(file_changed(const QString&)), _widget_connector, SLOT(valueChanged_slot(const QString&)));
    }
};

#undef Tdata
#endif

#define Tdata SlvFile

/*! GlvWidgetData for type SlvFile.*/
template <>
class GlvWidgetData<Tdata> : public GlvOpenFile {

public:
    GlvWidgetData(Tdata _file = Tdata(), QWidget* _parent = 0);
    ~GlvWidgetData();

    Tdata get_value() const {
        return GlvOpenFile::get_file();
    }
    void set_value(const Tdata& _value) {
        return GlvOpenFile::set_file(_value);
    }

};

template <>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(file_changed(const QString&)), _widget_connector, SLOT(valueChanged_slot(const QString&)));
    }
};

#undef Tdata

/*! First layer of template specialization possibility.
* GlvWidgetMaker is also in charge of signals connection through GlvWidgetMakerConnect provided corresponding specialization is defined.
* GlvWidgetData must have get_value(), set_value() and set_editable() methods.*/
template <class Tvalue>
struct GlvWidgetMaker {
	typedef GlvWidgetData<Tvalue> Twidget;
	static void make(GlvWidget_base* _glvwidget, const Tvalue& _value, bool _l_editable = true, QWidget* _parent = 0);
	static void set(GlvWidget_base* _glvwidget, const Tvalue& _value);
	static Tvalue get(const GlvWidget_base* _glvwidget);
	static void set_editable(GlvWidget_base* _glvwidget, bool _l_editable);
};

template <class Tvalue>
void GlvWidgetMaker<Tvalue>::make(GlvWidget_base* _glvwidget, const Tvalue& _value, bool _l_editable, QWidget* _parent) {
	Twidget* widget = new Twidget(_value);
	GlvWidgetMakerConnect<Tvalue>::connect(widget, _glvwidget->connector);

	/*! Options to set layout of widgets.*/
	//widget->layout()->setSpacing(0);
	//widget->layout()->setContentsMargins(4, 2, 4, 2);

	_glvwidget->data_widget = widget;
	set_editable(_glvwidget, _l_editable);
}

template <class Tvalue>
void GlvWidgetMaker<Tvalue>::set(GlvWidget_base* _glvwidget, const Tvalue& _value) {
	dynamic_cast<Twidget*>(_glvwidget->data_widget)->set_value(_value);
}

template <class Tvalue>
Tvalue GlvWidgetMaker<Tvalue>::get(const GlvWidget_base* _glvwidget) {
	return dynamic_cast<const Twidget*>(_glvwidget->data_widget)->get_value();
}

template <class Tvalue>
void GlvWidgetMaker<Tvalue>::set_editable(GlvWidget_base* _glvwidget, bool _l_editable) {
	dynamic_cast<Twidget*>(_glvwidget->data_widget)->set_editable(_l_editable);
}

/*! Macro to easily declare a GlvWidgetMaker. Deprecated.*/
#define glvm_pv_GlvWidgetMaker_spec_declaration(Tvalue, _Twidget)\
template <>\
struct GlvWidgetMaker<Tvalue, void> {\
    typedef _Twidget Twidget;\
    static void make(GlvWidget_base* _glvwidget, const Tvalue& _value, bool l_editable=true, QWidget* _parent=0);\
    static void set(GlvWidget_base* _glvwidget, const Tvalue& _value);\
    static Tvalue get(const GlvWidget_base* _glvwidget);\
    static void set_editable(GlvWidget_base* _glvwidget, bool l_editable);\
};

/*! Front-end of automatic widget management. GlvWidget -> GlvWidgetMaker -> GlvWidgetData.
* No text information here (unlike GlvDescribedWidget/GlvParameterWidget).*/
template <class Tvalue>
class GlvWidget : public GlvWidget_base {

public:

    /*! \p _value : Initial value.
    * \p _l_editable : editable widget or not.*/
    GlvWidget(Tvalue _value, bool _l_editable = true, QWidget* _parent = 0);
    GlvWidget(bool l_editable, QWidget* _parent = 0);
    GlvWidget(QWidget* _parent = 0);
    ~GlvWidget();

    Tvalue get_value() const;
    void set_value(const Tvalue& _value);
    void set_editable(bool _l_editable);

    /*! Get data widget. GlvWidgetData<Tvalue> unless GlvWidgetMaker specialization.*/
    const typename GlvWidgetMaker<Tvalue>::Twidget* get_widget() const;
    /*! Get data widget. GlvWidgetData<Tvalue> unless GlvWidgetMaker specialization.*/
    typename GlvWidgetMaker<Tvalue>::Twidget* get_widget();

};

template <class Tvalue>
GlvWidget<Tvalue>::GlvWidget(Tvalue _value, bool _l_editable, QWidget* _parent) :GlvWidget_base(_parent) {

    /*! Build data_widget.*/
    GlvWidgetMaker<Tvalue>::make(this, _value, _l_editable, _parent);
    /*! data_widget is set in the layout.*/
    GlvWidget_base::set_widget();

}

template <class Tvalue>
GlvWidget<Tvalue>::GlvWidget(bool l_editable, QWidget* _parent) :GlvWidget<Tvalue>(Tvalue(), l_editable, _parent) {

}

template <class Tvalue>
GlvWidget<Tvalue>::GlvWidget(QWidget* _parent) : GlvWidget<Tvalue>(Tvalue(), true, _parent) {

}

template <class Tvalue>
GlvWidget<Tvalue>::~GlvWidget() {

}

template <class Tvalue>
Tvalue GlvWidget<Tvalue>::get_value() const {

    Tvalue value = GlvWidgetMaker<Tvalue>::get(this);
    return value;
}

template <class Tvalue>
void GlvWidget<Tvalue>::set_value(const Tvalue& _value) {

    GlvWidgetMaker<Tvalue>::set(this, _value);
}

template <class Tvalue>
void GlvWidget<Tvalue>::set_editable(bool _l_editable) {
    GlvWidgetMaker<Tvalue>::set_editable(this, _l_editable);
}

template <class Tvalue>
const typename GlvWidgetMaker<Tvalue>::Twidget* GlvWidget<Tvalue>::get_widget() const {

    return dynamic_cast<typename GlvWidgetMaker<Tvalue>::Twidget*>(data_widget);
}

template <class Tvalue>
typename GlvWidgetMaker<Tvalue>::Twidget* GlvWidget<Tvalue>::get_widget() {

    return dynamic_cast<typename GlvWidgetMaker<Tvalue>::Twidget*>(data_widget);
}

class QVBoxLayout;
class QPushButton;
class QSpinBox;

class GlvVectorWidget_base : public QWidget {

    Q_OBJECT

private:

    QWidget* widget_scroll;
    QPushButton* button_push;
    QPushButton* button_insert;
    QSpinBox* index_spinbox;

protected:

    QWidget* buttons_widget;
    QVBoxLayout* layout_items;
    QPushButton* button_pop;

    GlvVectorWidget_base(QWidget* _parent = 0);
    virtual ~GlvVectorWidget_base();

public:

    void set_editable(bool l_editable);

protected slots:

    virtual void valueChanged_slot() = 0;

private slots:

    virtual void pushValue() = 0;
    virtual void popValue() = 0;
    void insertValue();
    virtual void insertValue(const unsigned int i) = 0;

signals:
    /*! Emitted when the value of the \p i -th widget is modified.*/
    void valueChanged(int _index);
};

class QHBoxLayout;
class QLabel;
class QPushButton;

/*! Item widget for GlvVectorWidget.*/
class GlvVectorWidgetItem_base : public QWidget {

    Q_OBJECT

protected:

    QHBoxLayout* layout;
    /*! Index of the widget in its GlvVectorWidget.*/
    unsigned int index;
    QLabel* label_index;
    QPushButton* remove_button;

    GlvVectorWidgetItem_base();
    virtual ~GlvVectorWidgetItem_base();

public:

    void show_remove_button(bool _l_show);

protected slots:

    virtual void remove() = 0;

signals:
    void valueChanged();

};

class QStringListModel;

namespace glv {

	/*! Get QString from a template \p _value.*/
	template <class T>
	QString toQString(const T& _value);
	/*! Get QStringListModel from a vector of template type. Uses toQString.*/
	template <class T>
	QStringListModel* toQStringListModel(const std::vector<T>& _vector);

}

template <>
QString glv::toQString<std::string>(const std::string& _value);
template <>
QString glv::toQString<double>(const double& _value);
template <>
QString glv::toQString<float>(const float& _value);
template <>
QString glv::toQString<int>(const int& _value);
template <>
QString glv::toQString<unsigned int>(const unsigned int& _value);
template <>
QString glv::toQString<unsigned long>(const unsigned long& _value);

template <class T>
QString glv::toQString(const T& _value) {
	return QString(slv::string::to_string(_value).c_str());
}

template <class T>
QStringListModel* glv::toQStringListModel(const std::vector<T>& _vector) {

	QStringList vector_list;
	for (unsigned int i = 0; i < _vector.size(); i++) {
		vector_list << toQString(_vector[i]);
	}
	QStringListModel* vector_model = new QStringListModel(vector_list);

	return vector_model;

}

#endif

namespace slv {

	namespace ts {
		/*! Get optional text from a value. Has to be specialized.*/
		template <class T>
		std::string get_optional_text_str(const T& _value);
	}

}

template <class T>
std::string slv::ts::get_optional_text_str(const T& _value) {
	return std::string();
}

#ifndef GLOVE_DISABLE_QT

template <class Tvalue>
class GlvWidget;

/*! Widget displaying data interface with name and tool tip description.*/
template <class Tdata>
class GlvDescribedWidget : public GlvDescribedWidget_base {

protected:

    /*! Widget managing the data interface.*/
    GlvWidget<Tdata>* data_widget;

public:

    /*! \p _data_name : object name and displayed named of the data
    * \p _description : description in tool tip.
    * 'what's this' is the static name of Tdata according to SlvDataName<Tdata>.*/
    GlvDescribedWidget(Tdata _value = Tdata(), std::string _data_name = "", std::string _description = "", bool l_editable = true, QWidget* _parent = 0);
    ~GlvDescribedWidget();

    Tdata get_value() const;
    void set_value(const Tdata& _value);

    /*! Return data interface widget.*/
    const GlvWidget<Tdata>* get_widget() const;
    /*! Return data interface widget.*/
    GlvWidget<Tdata>* get_widget();

    /*! If \p _l_enable is true, whatsthis is set as the name of Tdata according to SlvDataName<Tdata>.
    * If false, it is set as empty. */
    void enable_data_type_info(bool _l_enable);

    /*! If member widgets were inserted in a grid layout, then the function inserts the widgets back to layout of the instance.*/
    void reclaim_widgets_ownership();

protected:

    /*! Append text on a new line to widget tool tip.*/
    void append_tool_tip(const std::string& _string);

};

template <class Tdata>
GlvDescribedWidget<Tdata>::GlvDescribedWidget(Tdata _value, std::string _data_name, std::string _description, bool l_editable, QWidget* _parent) :GlvDescribedWidget_base(_data_name) {

    data_widget = new GlvWidget<Tdata>(_value, l_editable, _parent);
    data_widget->setEnabled(l_editable);
    data_widget->setObjectName(glv::toQString(data_name));
    data_widget->setToolTip(glv::toQString(_description));
    data_widget->setWhatsThis(glv::toQString(SlvDataName<Tdata>::name()));

    GlvDescribedWidget_base::set_data_widget(data_widget, glv::toQString(slv::ts::get_optional_text_str(_value)));

    connect(data_widget, SIGNAL(valueChanged()), this, SIGNAL(valueChanged()));

}

template <class Tdata>
GlvDescribedWidget<Tdata>::~GlvDescribedWidget() {

}

template <class Tdata>
Tdata GlvDescribedWidget<Tdata>::get_value() const {

    return data_widget->get_value();
}

template <class Tdata>
void GlvDescribedWidget<Tdata>::set_value(const Tdata& _value) {

    return data_widget->set_value(_value);
}

template <class Tdata>
const GlvWidget<Tdata>* GlvDescribedWidget<Tdata>::get_widget() const {

    return data_widget;
}

template <class Tdata>
GlvWidget<Tdata>* GlvDescribedWidget<Tdata>::get_widget() {

    return data_widget;
}

template <class Tdata>
void GlvDescribedWidget<Tdata>::enable_data_type_info(bool _l_enable) {

    if (_l_enable) {
        data_widget->setWhatsThis(glv::toQString(SlvDataName<Tdata>::name()));
    } else {
        data_widget->setWhatsThis("");
    }

}

template <class Tdata>
void GlvDescribedWidget<Tdata>::reclaim_widgets_ownership() {

    GlvDescribedWidget_base::reclaim_widgets_ownership(data_widget);

}

template <class Tdata>
void GlvDescribedWidget<Tdata>::append_tool_tip(const std::string& _string) {

    if (!_string.empty()) {
        QString string = data_widget->toolTip();
        string += "\n";
        string += glv::toQString(_string);
        data_widget->setToolTip(string);
    }

}

#endif

template <class Tparam>
class SlvParameter;

/*! Option to enable exception management for any type.
* It requires Tparam to have == and != operators implemented.
* This is why it is hard-disabled by default.*/
#define SlvParameterRuleT_exception 0

/*! Rule that a parameter SlvParameter is supposed to abide.*/
template <class Tparam, typename = void>
class SlvParameterRuleT : public SlvParameterRuleValue<Tparam> {

public:
    /*! Possible rule types for this type (template) of paramter.*/
    enum RuleType {
        valid
#if SlvParameterRuleT_exception==1
        , exception
#endif
    };

private:
    RuleType rule_type;

public:
    SlvParameterRuleT();
    SlvParameterRuleT(RuleType _rule_type, Tparam _rule_value);
    ~SlvParameterRuleT();

    /*! Get rule type of this parameter. Only one per rule instance.*/
    const RuleType& get_rule_type() const;

    /*! Get string description of the rule.*/
    std::string get_rule_description() const;

    /*! Whether \p _parameter abides the rule or not.*/
    SlvStatus is_abided(const SlvParameter<Tparam>* _parameter) const;
    /*! Enforce rule to \p _parameter. Return true if the parameters was abiding the rule. Return false if the parameter was changed.*/
    bool abide(SlvParameter<Tparam>* _parameter) const;

};

#undef SlvParameterRuleT_exception

template <class Tparam, typename T>
SlvParameterRuleT<Tparam, T>::SlvParameterRuleT() :SlvParameterRuleT(valid, Tparam()) {

}

template <class Tparam, typename T>
SlvParameterRuleT<Tparam, T>::SlvParameterRuleT(RuleType _rule_type, Tparam _rule_value) : SlvParameterRuleValue<Tparam>(_rule_value) {

    rule_type = _rule_type;
}

template <class Tparam, typename T>
SlvParameterRuleT<Tparam, T>::~SlvParameterRuleT() {

}

template <class Tparam, typename T>
const typename SlvParameterRuleT<Tparam, T>::RuleType& SlvParameterRuleT<Tparam, T>::get_rule_type() const {
    return rule_type;
}

template <class Tparam, typename T>
std::string SlvParameterRuleT<Tparam, T>::get_rule_description() const {
    return std::string();
}

template <class Tparam, typename T>
SlvStatus SlvParameterRuleT<Tparam, T>::is_abided(const SlvParameter<Tparam>* _parameter) const {
    if (rule_type == valid) {

        return SlvParameterRuleValidation<Tparam>::is_valid(_parameter);

#if SlvParameterRuleT_exception==1
    } else if (rule_type == exception) {
        if (_parameter->get_value() != this->rule_value) {
            return SlvStatus();
        } else {
            return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " can not be equal to " + slv::string::to_string(this->rule_value));
        }
#endif
    } else {
        slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
        return SlvStatus();
    }
}

template <class Tparam, typename T>
bool SlvParameterRuleT<Tparam, T>::abide(SlvParameter<Tparam>* _parameter) const {

    bool l_abide = true;

    if (rule_type == valid) {

#if SlvParameterRuleT_exception==1
    } else if (rule_type == exception) {
        if (_parameter->get_value() == this->rule_value) {
            l_abide = false;
            _parameter->set_value(Tparam());
        }
#endif
    } else {
        slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
    }

    return l_abide;
}

namespace slv {
	/*! Functions related to type specializations.*/
	namespace ts {
		/*! Dedicated structure that can be specialized for other defined arithmetic types.*/
		template <class T, typename = void>
		struct is_arithmetic {
			static const bool value = std::is_arithmetic<T>::value;
		};
	}
}

/*! Enable if type is arithmetic but not bool.*/
#define Tenable typename std::enable_if<slv::ts::is_arithmetic<Tparam>::value && !std::is_same<Tparam, bool>::value>::type

/*! Rule that a parameter SlvParameter is supposed to abide. Specialization for template type which is arithmetic.*/
template <class Tparam>
class SlvParameterRuleT<Tparam, Tenable> : public SlvParameterRuleValue<Tparam> {

public:
    enum RuleType { valid, exception, min, max, min_exception, max_exception };

private:
    RuleType rule_type;

public:
    SlvParameterRuleT();
    SlvParameterRuleT(RuleType _rule_type, Tparam _rule_value);
    ~SlvParameterRuleT();

    /*! Get rule type of this parameter. Only one per rule instance.*/
    const RuleType& get_rule_type() const;

    /*! Get string description of the rule.*/
    std::string get_rule_description() const;

    /*! Whether \p _parameter abides the rule or not.*/
    SlvStatus is_abided(const SlvParameter<Tparam>* _parameter) const;
    /*! Enforce rule to \p _parameter. Return true if the parameters was abiding the rule. Return false if the parameter was changed.*/
    bool abide(SlvParameter<Tparam>* _parameter) const;

};

template <class Tparam>
SlvParameterRuleT<Tparam, Tenable>::SlvParameterRuleT() :SlvParameterRuleT(valid, 0) {

}

template <class Tparam>
SlvParameterRuleT<Tparam, Tenable>::SlvParameterRuleT(RuleType _rule_type, Tparam _rule_value) : SlvParameterRuleValue<Tparam>(_rule_value) {

    rule_type = _rule_type;
}

template <class Tparam>
SlvParameterRuleT<Tparam, Tenable>::~SlvParameterRuleT() {

}

template <class Tparam>
const typename SlvParameterRuleT<Tparam, Tenable>::RuleType& SlvParameterRuleT<Tparam, Tenable>::get_rule_type() const {

    return rule_type;
}

template <class Tparam>
std::string SlvParameterRuleT<Tparam, Tenable>::get_rule_description() const {

    if (rule_type == valid) {
        return std::string();
    } else if (rule_type == exception) {
        return "Can not equal " + slv::string::to_string(this->rule_value);
    } else if (rule_type == min) {
        return ">= " + slv::string::to_string(this->rule_value);
    } else if (rule_type == max) {
        return "<= " + slv::string::to_string(this->rule_value);
    } else if (rule_type == min_exception) {
        return "> " + slv::string::to_string(this->rule_value);
    } else if (rule_type == max_exception) {
        return "< " + slv::string::to_string(this->rule_value);
    } else {
        slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
        return std::string();
    }

}

template <class Tparam>
SlvStatus SlvParameterRuleT<Tparam, Tenable>::is_abided(const SlvParameter<Tparam>* _parameter) const {

    if (rule_type == valid) {
        return SlvStatus();
    } else if (rule_type == exception) {
        if (_parameter->get_value() != this->rule_value) {
            return SlvStatus();
        } else {
            return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " valued " + slv::string::to_string(_parameter->get_value()) + " can not be equal to " + slv::string::to_string(this->rule_value));
        }
    } else if (rule_type == min) {
        if (_parameter->get_value() >= this->rule_value) {
            return SlvStatus();
        } else {
            return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " valued " + slv::string::to_string(_parameter->get_value()) + " can not be lower than " + slv::string::to_string(this->rule_value));
        }
    } else if (rule_type == max) {
        if (_parameter->get_value() <= this->rule_value) {
            return SlvStatus();
        } else {
            return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " valued " + slv::string::to_string(_parameter->get_value()) + " can not be greater than " + slv::string::to_string(this->rule_value));
        }
    } else if (rule_type == min_exception) {
        if (_parameter->get_value() > this->rule_value) {
            return SlvStatus();
        } else {
            return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " valued " + slv::string::to_string(_parameter->get_value()) + " can not be lower/eq than " + slv::string::to_string(this->rule_value));
        }
    } else if (rule_type == max_exception) {
        if (_parameter->get_value() < this->rule_value) {
            return SlvStatus();
        } else {
            return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " valued " + slv::string::to_string(_parameter->get_value()) + " can not be greater/eq than " + slv::string::to_string(this->rule_value));
        }
    } else {
        slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
        return SlvStatus();
    }
}

template <class Tparam>
bool SlvParameterRuleT<Tparam, Tenable>::abide(SlvParameter<Tparam>* _parameter) const {

    bool l_abide = true;

    if (rule_type == valid) {

    } else if (rule_type == exception) {
        if (_parameter->get_value() == this->rule_value) {
            l_abide = false;
            Tparam value = _parameter->get_value();
            if (_parameter->get_value() > Tparam()) {
                --value;
            } else if (_parameter->get_value() < Tparam()) {
                ++value;
            } else {
                ++value;
            }
            _parameter->set_value(value);// set replacement value
        }
    } else if (rule_type == min) {
        if (_parameter->get_value() < this->rule_value) {
            l_abide = false;
            _parameter->set_value(this->rule_value);
        }
    } else if (rule_type == max) {
        if (_parameter->get_value() > this->rule_value) {
            l_abide = false;
            _parameter->set_value(this->rule_value);
        }
    } else if (rule_type == min_exception) {
        if (_parameter->get_value() <= this->rule_value) {
            l_abide = false;
            Tparam value = this->rule_value;
            ++value;
            _parameter->set_value(value);
        }
    } else if (rule_type == max_exception) {
        if (_parameter->get_value() >= this->rule_value) {
            l_abide = false;
            Tparam value = this->rule_value;
            --value;
            _parameter->set_value(value);
        }
    } else {
        slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
    }

    return l_abide;
}

#undef Tenable

#ifndef GLOVE_DISABLE_QT

/*! Class to manage rules of parameters.*/
template <class Tparam, typename = void>
class GlvParameterRuleAbiding {

public:
    template <class Twidget>
    static void abide(const SlvParameterRuleT<Tparam>& _rule, Twidget* _widget) {

    }
};

#define Tenable typename std::enable_if<slv::ts::is_arithmetic<Tparam>::value>::type

/*! Class to manage rules of parameters of arithmetic types.*/
template <class Tparam>
class GlvParameterRuleAbiding<Tparam, Tenable> {

public:
    template <class Twidget>
    static void abide(const SlvParameterRuleT<Tparam>& _rule, Twidget* _widget) {

        if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::valid) {

        } else if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::exception) {

            //would need to inherit widget (QSpinBox) for instance and create signal valueChanged(value_old, value_new)

        } else if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::min) {

            _widget->setMinimum(_rule.get_rule_value());

        } else if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::max) {

            _widget->setMaximum(_rule.get_rule_value());

        } else if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::min_exception) {

            _widget->setMinimum(_rule.get_rule_value());

        } else if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::max_exception) {

            _widget->setMaximum(_rule.get_rule_value());

        } else {
            slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
        }

    }
};

#undef Tenable

#define Tparam bool

/*! Class to manage rules of parameters of type bool.*/
template <>
class GlvParameterRuleAbiding<Tparam> {

public:
    template <class Twidget>
    static void abide(const SlvParameterRuleT<Tparam>& _rule, Twidget* _widget) {

        if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::valid) {

#if SlvParameterRuleT_exception==1
        } else if (_rule.get_rule_type() == SlvParameterRuleT<Tparam>::exception) {

            if (_rule.get_rule_value()) {
                _widget->setChecked(!_rule.get_rule_value());
            } else {
                _widget->setChecked(!_rule.get_rule_value());
            }
            _widget->setEnabled(false);
#endif
        } else {
            slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
        }

    }
};
#undef Tparam

#endif

/*! Enable if type is arithmetic but not bool.*/
#define Tenable typename std::enable_if<\
(slv::ts::is_arithmetic<Tparam>::value && \
!std::is_same<Tparam, bool>::value)\
>::type

/*! Rule that a parameter SlvParameter is supposed to abide. Specialization for template type which is arithmetic.
* Same as SlvParameterRuleT_spec_Arithmetic, but instead of using static values for rule, uses a dynamic value in a SlvParameter. See dynamic_rules in SlvParameter.*/
template <class Tparam>
class SlvParameterRuleT<SlvParameter<Tparam>, Tenable> {

public:
	enum RuleType { valid, exception, min, max, min_exception, max_exception };

private:
	RuleType rule_type;
	const SlvParameter<Tparam>* rule_parameter;

public:
	SlvParameterRuleT();
	SlvParameterRuleT(RuleType _rule_type, const SlvParameter<Tparam>* _rule_parameter);
	~SlvParameterRuleT();

	/*! Get rule type of this parameter. Only one per rule instance.*/
	const RuleType& get_rule_type() const;
	/*! Return value the parameter this rule is associated to.*/
	const Tparam& get_rule_value() const;

	/*! Get string description of the rule.*/
	std::string get_rule_description() const;

	/*! Whether \p _parameter abides the rule or not.*/
	SlvStatus is_abided(const SlvParameter<Tparam>* _parameter) const;
	/*! Enforce rule to \p _parameter. Return true if the parameters was abiding the rule. Return false if the parameter was changed.*/
	bool abide(SlvParameter<Tparam>* _parameter) const;
};

template <class Tparam>
SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::SlvParameterRuleT() :SlvParameterRuleT(valid, 0) {

}

template <class Tparam>
SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::SlvParameterRuleT(RuleType _rule_type, const SlvParameter<Tparam>* _rule_parameter) {

	rule_type = _rule_type;
	rule_parameter = _rule_parameter;
}

template <class Tparam>
SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::~SlvParameterRuleT() {

}

template <class Tparam>
const typename SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::RuleType& SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::get_rule_type() const {

	return rule_type;
}

template <class Tparam>
const Tparam& SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::get_rule_value() const {
	return rule_parameter->get_value();
}

template <class Tparam>
std::string SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::get_rule_description() const {

	if (rule_type == valid) {
		return std::string();
	} else if (rule_type == exception) {
		return "Can not equal " + slv::string::to_string(rule_parameter->get_value());
	} else if (rule_type == min) {
		return ">= " + slv::string::to_string(rule_parameter->get_value());
	} else if (rule_type == max) {
		return "<= " + slv::string::to_string(rule_parameter->get_value());
	} else if (rule_type == min_exception) {
		return "> " + slv::string::to_string(rule_parameter->get_value());
	} else if (rule_type == max_exception) {
		return "< " + slv::string::to_string(rule_parameter->get_value());
	} else {
		slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
		return std::string();
	}

}

template <class Tparam>
SlvStatus SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::is_abided(const SlvParameter<Tparam>* _parameter) const {

	if (rule_type == valid) {
		return SlvStatus();
	} else if (rule_type == exception) {
		if (_parameter->get_value() != rule_parameter->get_value()) {
			return SlvStatus();
		} else {
			return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " can not be equal to " + slv::string::to_string(rule_parameter->get_name()));
		}
	} else if (rule_type == min) {
		if (_parameter->get_value() >= rule_parameter->get_value()) {
			return SlvStatus();
		} else {
			return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " can not be lower than " + slv::string::to_string(rule_parameter->get_name()));
		}
	} else if (rule_type == max) {
		if (_parameter->get_value() <= rule_parameter->get_value()) {
			return SlvStatus();
		} else {
			return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " can not be greater than " + slv::string::to_string(rule_parameter->get_name()));
		}
	} else if (rule_type == min_exception) {
		if (_parameter->get_value() > rule_parameter->get_value()) {
			return SlvStatus();
		} else {
			return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " can not be lower/eq than " + slv::string::to_string(rule_parameter->get_name()));
		}
	} else if (rule_type == max_exception) {
		if (_parameter->get_value() < rule_parameter->get_value()) {
			return SlvStatus();
		} else {
			return SlvStatus(SlvStatus::statusType::warning, "Parameter " + _parameter->get_name() + " can not be greater/eq than " + slv::string::to_string(rule_parameter->get_name()));
		}
	} else {
		slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
		return SlvStatus();
	}
}

template <class Tparam>
bool SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::abide(SlvParameter<Tparam>* _parameter) const {

	bool l_abide = true;

	if (rule_type == valid) {

	} else if (rule_type == exception) {
		if (_parameter->get_value() == rule_parameter->get_value()) {
			l_abide = false;
			Tparam value = _parameter->get_value();
			if (_parameter->get_value() > Tparam()) {
				--value;
			} else if (_parameter->get_value() < Tparam()) {
				++value;
			} else {
				++value;
			}
			_parameter->set_value(value);// set replacement value
		}
	} else if (rule_type == min) {
		if (_parameter->get_value() < rule_parameter->get_value()) {
			l_abide = false;
			_parameter->set_value(rule_parameter->get_value());
		}
	} else if (rule_type == max) {
		if (_parameter->get_value() > rule_parameter->get_value()) {
			l_abide = false;
			_parameter->set_value(rule_parameter->get_value());
		}
	} else if (rule_type == min_exception) {
		if (_parameter->get_value() <= rule_parameter->get_value()) {
			l_abide = false;
			_parameter->set_value(rule_parameter->get_value());
		}
	} else if (rule_type == max_exception) {
		if (_parameter->get_value() >= this->rule_value) {
			l_abide = false;
			_parameter->set_value(rule_parameter->get_value());
		}
	} else {
		slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
	}

	return l_abide;
}

#undef Tenable

#ifndef GLOVE_DISABLE_QT

#define Tenable typename std::enable_if<slv::ts::is_arithmetic<Tparam>::value>::type

/*! Class to manage rules of parameters depedning on another parameter of arithmetic type.*/
template <class Tparam>
class GlvParameterRuleAbiding<SlvParameter<Tparam>*, Tenable> {

public:
	template <class Twidget>
	static void abide(const SlvParameterRuleT<SlvParameter<Tparam>*>& _rule, Twidget* _widget) {

		if (_rule.get_rule_type() == SlvParameterRuleT<SlvParameter<Tparam>*>::valid) {

		} else if (_rule.get_rule_type() == SlvParameterRuleT<SlvParameter<Tparam>*>::exception) {

			//would need to inherit widget (QSpinBox) for instance and create signal valueChanged(value_old, value_new)

		} else if (_rule.get_rule_type() == SlvParameterRuleT<SlvParameter<Tparam>*>::min) {

			_widget->setMinimum(_rule.get_rule_value());

		} else if (_rule.get_rule_type() == SlvParameterRuleT<SlvParameter<Tparam>*>::max) {

			_widget->setMaximum(_rule.get_rule_value());

		} else if (_rule.get_rule_type() == SlvParameterRuleT<SlvParameter<Tparam>*>::min_exception) {

			_widget->setMinimum(_rule.get_rule_value());

		} else if (_rule.get_rule_type() == SlvParameterRuleT<SlvParameter<Tparam>*>::max_exception) {

			_widget->setMaximum(_rule.get_rule_value());

		} else {
			slv::flag::ISSUE(slv::flag::Critical, "Wrong rule type");
		}

	}
};

#undef Tenable

#endif

/*! Enable if not of specified type in an other file. For instance SlvParameterRuleT_spec_ParameterArithmetic.h*/
#define Tenable typename std::enable_if<\
(!slv::ts::is_arithmetic<Tparam>::value || \
std::is_same<Tparam, bool>::value)\
>::type

/*! Rule that a parameter SlvParameter is supposed to abide.
* Same as SlvParameterRuleT_spec_Arithmetic, but instead of using static values for rule, uses a dynamic value in a SlvParameter. See dynamic_rules in SlvParameter.*/
template <class Tparam>
class SlvParameterRuleT<SlvParameter<Tparam>, Tenable> {

public:
	enum RuleType { valid, exception };

private:
	RuleType rule_type;
	const SlvParameter<Tparam>* rule_parameter;

public:
	SlvParameterRuleT();
	SlvParameterRuleT(RuleType _rule_type, const SlvParameter<Tparam>* _rule_parameter);
	~SlvParameterRuleT();

	/*! Get rule type of this parameter. Only one per rule instance.*/
	const RuleType& get_rule_type() const;
	/*! Return value the parameter this rule is associated to.*/
	const Tparam& get_rule_value() const;

	/*! Get string description of the rule.*/
	std::string get_rule_description() const;

	/*! Whether \p _parameter abides the rule or not.*/
	SlvStatus is_abided(const SlvParameter<Tparam>* _parameter) const;
	/*! Enforce rule to \p _parameter. Return true if the parameters was abiding the rule. Return false if the parameter was changed.*/
	bool abide(SlvParameter<Tparam>* _parameter) const;
};

template <class Tparam>
SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::SlvParameterRuleT() :SlvParameterRuleT(valid, 0) {

}

template <class Tparam>
SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::SlvParameterRuleT(RuleType _rule_type, const SlvParameter<Tparam>* _rule_parameter) {

	rule_type = _rule_type;
	rule_parameter = _rule_parameter;
}

template <class Tparam>
SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::~SlvParameterRuleT() {

}

template <class Tparam>
const typename SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::RuleType& SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::get_rule_type() const {

	return rule_type;
}

template <class Tparam>
const Tparam& SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::get_rule_value() const {
	return rule_parameter->get_value();
}

template <class Tparam>
std::string SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::get_rule_description() const {

	return std::string();

}

template <class Tparam>
SlvStatus SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::is_abided(const SlvParameter<Tparam>* _parameter) const {

	return SlvStatus();
}

template <class Tparam>
bool SlvParameterRuleT<SlvParameter<Tparam>, Tenable>::abide(SlvParameter<Tparam>* _parameter) const {
	return true;
}

#undef Tenable

class SlvParametrization_base;

/*! Rule that a parameter SlvParameter is supposed to abide. Specialization for template type which is a SlvParametrization.*/
template <class Tparam>
class SlvParameterRuleT<Tparam, typename std::enable_if<std::is_base_of<SlvParametrization_base, Tparam>::value>::type> {

public:
    SlvParameterRuleT() {}
    ~SlvParameterRuleT() {}

    /*! Whether \p _parameter abides the rule or not.*/
    SlvStatus is_abided(const SlvParameter<Tparam>* _parameter) const {
        return _parameter->get_value().check_parameters();
    }
    /*! Enforce rule to \p _parameter. Return true if the parameters was abiding the rule. Return false if the parameter was changed.*/
    bool abide(SlvParameter<Tparam>* _parameter) const {
        //return true;
        Tparam parametrization = _parameter->get_value();
        bool l_abide = parametrization.abide_rules();
        _parameter->set_value(parametrization);
        return l_abide;
    }

    /*! Get string description of the rule.*/
    std::string get_rule_description() const {
        return std::string();
    }

};

/*! Macro for type detection, for instance when using std::enable_if.
* struct_name is the name of the structure to be used such as: std::enable_if<struct_name<T>::value>
* Ttest_subtype is the type struct_name is supposed to contain such as: struct_name::Ttest_subtype */
#define glvm_SlvIsType(struct_name, Ttest_subtype) \
template <class Ttested_type>\
struct struct_name  {\
    template <class T>\
    static char test(typename T::Ttest_subtype*);\
    template <class T>\
    static long test(T*);\
    static const bool value = sizeof(test<Ttested_type>(0)) == 1;\
};

template <typename Tcontainer, typename = void>
struct SlvIsContainer {
    static constexpr bool value = false;
};

glvm_SlvIsType(SlvHasValueType, value_type)

template <typename T, typename = void>
struct SlvIsIterable : std::false_type {};

template <typename T>
struct SlvIsIterable<T, std::void_t<decltype(std::begin(std::declval<T&>())), decltype(std::end(std::declval<T&>()))> > : std::true_type {
};

template <typename Tcontainer>
struct SlvIsContainer<Tcontainer, typename std::enable_if<SlvIsIterable<Tcontainer>::value && SlvHasValueType<Tcontainer>::value>::type> {
    static constexpr bool value = true;
};

#ifndef GLOVE_DISABLE_QT

template <class T>
class GlvWidget;
template <class T>
class GlvVectorWidget;

/*! Item widget for GlvVectorWidget.*/
template <class T>
class GlvVectorWidgetItem : public GlvVectorWidgetItem_base {

private:

    /*! Widget of the data.*/
    GlvWidget<T>* widget;
    /*! Vector widget the item belongs to.*/
    GlvVectorWidget<T>* parent;

private:

    /*! \p _value : Initialization value.
    * \p _index : index in GlvVectorWidget.*
    * \p _parent : Vector widget the item belongs to.*/
    GlvVectorWidgetItem(const T& _value, const unsigned int _index, GlvVectorWidget<T>* _parent);
    ~GlvVectorWidgetItem();

public:
    T get_value() const;
    void set_value(const T _value);
private:
    GlvWidget<T>* get_widget() const;
    void increment_index();
    void decrement_index();
    void update_label_index();

    /*! Remove in GlvVectorWidget at index contained in the instance.*/
    void remove();

    friend class GlvVectorWidget<T>;

};

template <class T>
GlvVectorWidgetItem<T>::GlvVectorWidgetItem(const T& _value, const unsigned int _index, GlvVectorWidget<T>* _parent) {

    widget = new GlvWidget<T>(_value);
    index = _index;
    parent = _parent;

    label_index = new QLabel;
    update_label_index();
    remove_button = new QPushButton(tr("Remove"));
    layout->addWidget(label_index);
    layout->addWidget(widget);
    layout->addWidget(remove_button);

    connect(remove_button, SIGNAL(clicked()), this, SLOT(remove()));
    connect(widget, SIGNAL(valueChanged()), this, SIGNAL(valueChanged()));

}

template <class T>
GlvVectorWidgetItem<T>::~GlvVectorWidgetItem() {

}

template <class T>
T GlvVectorWidgetItem<T>::get_value() const {

    return widget->get_value();

}

template <class T>
void GlvVectorWidgetItem<T>::set_value(const T _value) {

    widget->set_value(_value);

}

template <class T>
GlvWidget<T>* GlvVectorWidgetItem<T>::get_widget() const {
    return widget;
}

template <class T>
void GlvVectorWidgetItem<T>::increment_index() {
    index++;
    update_label_index();
}

template <class T>
void GlvVectorWidgetItem<T>::decrement_index() {
    index--;
    update_label_index();
}

template <class T>
void GlvVectorWidgetItem<T>::update_label_index() {
    label_index->setText(glv::toQString(index));
}

template <class T>
void GlvVectorWidgetItem<T>::remove() {
    parent->removeWidget(index);
}

#define _Tdata_ std::vector<T>

class QVBoxLayout;
template <class T>
class GlvVectorWidgetItem;
template <class Tvalue>
class GlvWidget;

/*! Widget to manage interface of std::vector.*/
template <class T>
class GlvVectorWidget : public GlvVectorWidget_base {

protected:

    std::vector<GlvVectorWidgetItem<T>*> widgets;

public:

    GlvVectorWidget(_Tdata_ _vector = _Tdata_(), QWidget* _parent = 0);
    ~GlvVectorWidget();

    /*! Set vector.*/
    void set_value(const _Tdata_& _vector);
    /*! Get vector.*/
    _Tdata_ get_value() const;

    void pushValue(T _value);
    /*! Reimplementation of virtual method.*/
    void pushValue();
    void popValue();
    /*! New value at index \p i.*/
    void insertValue(const unsigned int i);
    /*! Get widget of index \p i.*/
    GlvWidget<T>* operator[] (const unsigned int i);

private:

    void valueChanged_slot();
    void removeWidget(const unsigned int i);

    friend class GlvVectorWidgetItem<T>;
};

template <class T>
GlvVectorWidget<T>::GlvVectorWidget(_Tdata_ _vector, QWidget* _parent) : GlvVectorWidget_base(_parent) {

    set_value(_vector);

}

template <class T>
GlvVectorWidget<T>::~GlvVectorWidget() {

}

template <class T>
void GlvVectorWidget<T>::set_value(const _Tdata_& _vector) {

    int N = (int)std::min(widgets.size(), _vector.size());

    for (int i = 0; i < N; i++) {
        widgets[i]->set_value(_vector[i]);
    }

    if (widgets.size() < _vector.size()) {
        for (int i = N; i < _vector.size(); i++) {
            pushValue(_vector[i]);
        }
    } else if (widgets.size() > _vector.size()) {
        for (int i = N; i < widgets.size(); i++) {
            layout_items->removeWidget(widgets[i]);
            delete widgets[i];
        }
        widgets.resize(_vector.size());
    }

}

template <class T>
_Tdata_ GlvVectorWidget<T>::get_value() const {

    _Tdata_ value(widgets.size());
    for (int i = 0; i < widgets.size(); i++) {
        value[i] = widgets[i]->get_value();
    }
    return value;

}

template <class T>
void GlvVectorWidget<T>::pushValue(T _value) {

    GlvVectorWidgetItem<T>* widget = new GlvVectorWidgetItem<T>(_value, (int)widgets.size(), this);
    widgets.push_back(widget);
    layout_items->insertWidget((int)widgets.size() - 1, widget);
    connect(widget, SIGNAL(valueChanged()), this, SLOT(valueChanged_slot()));
    button_pop->setEnabled(true);

}

template <class T>
void GlvVectorWidget<T>::insertValue(const unsigned int i) {

    unsigned int j = i;
    if (j >= (unsigned int)widgets.size()) {
        j = (unsigned int)widgets.size() - 1;
    }
    GlvVectorWidgetItem<T>* widget = new GlvVectorWidgetItem<T>(T(), j, this);
    layout_items->insertWidget(j, widget);
    widgets.insert(widgets.begin() + j, widget);
    connect(widget->get_widget(), SIGNAL(valueChanged()), this, SLOT(valueChanged_slot()));
    button_pop->setEnabled(true);

    for (unsigned int k = j + 1; k < widgets.size(); k++) {
        widgets[k]->increment_index();
    }

}

template <class T>
GlvWidget<T>* GlvVectorWidget<T>::operator[] (const unsigned int i) {
    return widgets[i]->get_widget();
}

template <class T>
void GlvVectorWidget<T>::pushValue() {

    pushValue(T());

}

template <class T>
void GlvVectorWidget<T>::popValue() {

    if (!widgets.empty()) {
        removeWidget((int)widgets.size() - 1);
    }

}

template <class T>
void GlvVectorWidget<T>::valueChanged_slot() {

    GlvVectorWidgetItem<T>* item = dynamic_cast<GlvVectorWidgetItem<T>*>(QObject::sender());
    if (item) {
        emit valueChanged(item->index);
    }

}

template <class T>
void GlvVectorWidget<T>::removeWidget(const unsigned int i) {

    if (!widgets.empty()) {

        layout_items->removeWidget(widgets[i]);
        delete widgets[i];
        widgets.erase(widgets.begin() + i);

        for (unsigned int j = i; j < widgets.size(); j++) {
            widgets[j]->decrement_index();
        }
    }

    if (widgets.empty()) {
        button_pop->setEnabled(false);
    }

}

#undef _Tdata_

#define _Tdata_ std::array<T, N>

/*! Widget to manage interface of std::vector.*/
template <class T, size_t N>
class GlvArrayWidget : public GlvVectorWidget<T> {

public:

    GlvArrayWidget(_Tdata_ _array = _Tdata_(), QWidget* _parent = 0);
    ~GlvArrayWidget();

    /*! Set vector.*/
    void set_value(const _Tdata_& _array);
    /*! Get vector.*/
    _Tdata_ get_value() const;

private:
    using GlvVectorWidget<T>::pushValue;
    using GlvVectorWidget<T>::popValue;
    using GlvVectorWidget<T>::insertValue;

};

template <class T, size_t N>
GlvArrayWidget<T, N>::GlvArrayWidget(_Tdata_ _array, QWidget* _parent) : GlvVectorWidget<T>({}, _parent) {

    this->buttons_widget->hide();

    for (int i = 0; i < N; i++) {
        pushValue();
        this->widgets[i]->show_remove_button(false);
    }

    set_value(_array);

}

template <class T, size_t N>
GlvArrayWidget<T, N>::~GlvArrayWidget() {

}

template <class T, size_t N>
void GlvArrayWidget<T, N>::set_value(const _Tdata_& _array) {

    for (int i = 0; i < N; i++) {
        this->widgets[i]->set_value(_array[i]);
    }

}

template <class T, size_t N>
_Tdata_ GlvArrayWidget<T, N>::get_value() const {

    _Tdata_ value;
    for (int i = 0; i < N; i++) {
        value[i] = this->widgets[i]->get_value();
    }
    return value;

}

#undef _Tdata_

#endif

template <typename Tcontainer, typename = void>
struct SlvIsMap {
    static constexpr bool value = false;
};

template <class Tkey, class Tvalue>
struct SlvIsMap< std::map<Tkey, Tvalue> > {
    static constexpr bool value = true;
};

template <class Tkey, class Tvalue>
struct SlvIsMap< std::unordered_map<Tkey, Tvalue> > {
    static constexpr bool value = true;
};

#ifndef GLOVE_DISABLE_QT

// Do not enable if value_type is a container. GlvWidgetData_spec_std_container_container.h is used instead
#define Tenable typename std::enable_if<!SlvIsContainer<T>::value || SlvIsMap<T>::value || std::is_same<T, std::string>::value>::type

#define Tdata std::array<T, N>
/*! GlvWidgetData specialization for template type: std::vector.*/
template <class T, size_t N>
class GlvWidgetData<Tdata, Tenable> : public GlvArrayWidget<T, N> {

public:
    GlvWidgetData(Tdata _vector = Tdata(), QWidget* _parent = 0) :GlvArrayWidget<T, N>(_vector, _parent) {}
    ~GlvWidgetData() {}

};

template <class T, size_t N>
struct GlvWidgetMakerConnect<Tdata, Tenable> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

#undef Tdata
#undef Tenable

// Do not enable if value_type is a container. GlvWidgetData_spec_std_container_container.h is used instead
#define Tenable typename std::enable_if<!SlvIsContainer<T>::value || SlvIsMap<T>::value || std::is_same<T, std::string>::value>::type

#define Tdata std::vector<T>
/*! GlvWidgetData specialization for template type: std::vector.*/
template <class T>
class GlvWidgetData<Tdata, Tenable> : public GlvVectorWidget<T> {

public:
    GlvWidgetData(Tdata _vector = Tdata(), QWidget* _parent = 0) :GlvVectorWidget<T>(_vector, _parent) {}
    ~GlvWidgetData() {}

};

template <class T>
struct GlvWidgetMakerConnect<Tdata, Tenable> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

#undef Tdata
#undef Tenable

/*! Widget for std::pair.*/
class GlvPairWidget_base : public QWidget {
    Q_OBJECT
protected:
    GlvPairWidget_base(QWidget* _parent = 0) : QWidget(_parent) {}
    virtual ~GlvPairWidget_base() {}
public:
    void set_editable(bool l_editable) {
        QWidget::setEnabled(l_editable);
    }
signals:
    /*! Emitted when first of pair is modified.*/
    void valueChanged_first();
    /*! Emitted when second of pair is modified.*/
    void valueChanged_second();
};

template <class T>
class GlvWidget;

#define _Tdata_ std::pair<T1, T2>

/*! Widget for std::pair.*/
template <class T1, class T2>
class GlvPairWidget : public GlvPairWidget_base {

private:

    GlvWidget<T1>* subwidget1;
    GlvWidget<T2>* subwidget2;

public:

    GlvPairWidget(_Tdata_ _pair = _Tdata_(), QWidget* _parent = 0);
    ~GlvPairWidget();

    void set_pair(const _Tdata_ _pair);
    _Tdata_ get_pair() const;

};

template <class T1, class T2>
GlvPairWidget<T1, T2>::GlvPairWidget(_Tdata_ _pair, QWidget* _parent) : GlvPairWidget_base(_parent) {

    QHBoxLayout* layout = new QHBoxLayout;
    setLayout(layout);

    layout->setContentsMargins(0, 0, 0, 0);

    bool l_editable = true;
    subwidget1 = new GlvWidget<T1>(_pair.first, l_editable, _parent);
    connect(subwidget1, SIGNAL(valueChanged()), this, SIGNAL(valueChanged_first()));
    layout->addWidget(subwidget1);
    subwidget2 = new GlvWidget<T2>(_pair.second, l_editable, _parent);
    connect(subwidget2, SIGNAL(valueChanged()), this, SIGNAL(valueChanged_second()));
    layout->addWidget(subwidget2);

}

template <class T1, class T2>
GlvPairWidget<T1, T2>::~GlvPairWidget() {

}

template <class T1, class T2>
void GlvPairWidget<T1, T2>::set_pair(const _Tdata_ _pair) {

    subwidget1->set_value(_pair.first);
    subwidget2->set_value(_pair.second);

}

template <class T1, class T2>
_Tdata_ GlvPairWidget<T1, T2>::get_pair() const {

    _Tdata_ value;
    value.first = subwidget1->get_value();
    value.second = subwidget2->get_value();
    return value;

}

#undef _Tdata_

#define Tdata std::pair<T1, T2>
/*! GlvWidgetData specialization for template type: std::pair.*/
template <class T1, class T2>
class GlvWidgetData<Tdata> : public GlvPairWidget<T1, T2> {

public:
    GlvWidgetData(Tdata _pair = Tdata(), QWidget* _parent = 0) :GlvPairWidget<T1, T2>(_pair, _parent) {}
    ~GlvWidgetData() {}

    Tdata get_value() const {
        return GlvPairWidget<T1, T2>::get_pair();
    }
    void set_value(const Tdata& _value) {
        return GlvPairWidget<T1, T2>::set_pair(_value);
    }

};

template <class T1, class T2>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged_first()), _widget_connector, SLOT(valueChanged_slot()));
        QObject::connect(_widget, SIGNAL(valueChanged_second()), _widget_connector, SLOT(valueChanged_slot()));
    }
};

#undef Tdata

class QVBoxLayout;
class QHBoxLayout;
class QPushButton;

class GlvMapWidget_base : public QWidget {

    Q_OBJECT

private:

    QWidget* widget_scroll;
    QPushButton* button_insert;

protected:

    QVBoxLayout* layout_items;
    QHBoxLayout* insert_layout;

    GlvMapWidget_base(QWidget* _parent = 0);
    virtual ~GlvMapWidget_base();

public:

    void set_editable(bool l_editable);

protected slots:

    virtual void valueChanged_slot() = 0;

private slots:

    virtual void insertValue() = 0;

signals:
    /*! Emitted when the value of the \p index-th widget is modified.*/
    void valueChanged(int _index);
};

class QHBoxLayout;
class QLabel;
class QPushButton;

/*! Item widget for GlvMapWidget.*/
class GlvMapWidgetItem_base : public QWidget {

    Q_OBJECT

protected:

    QHBoxLayout* layout;
    /*! Index of the widget in its GlvMapWidget.*/
    unsigned int index;
    QPushButton* remove_button;

    GlvMapWidgetItem_base();
    virtual ~GlvMapWidgetItem_base();

protected slots:

    virtual void remove() = 0;

signals:
    void valueChanged();
};

template <class T>
class GlvWidget;
template <class Tkey, class Tvalue, class Tcompare>
class GlvMapWidget;

/*! Item widget for GlvMapWidget.*/
template <class Tkey, class Tvalue, class Tcompare>
class GlvMapWidgetItem : public GlvMapWidgetItem_base {

private:

    /*! Widget of the key.*/
    GlvWidget<Tkey>* key_widget;
    /*! Widget of the data.*/
    GlvWidget<Tvalue>* value_widget;
    /*! Map widget the item belongs to.*/
    GlvMapWidget<Tkey, Tvalue, Tcompare>* parent;

private:

    /*! \p _key : Key.
    * \p _value : Initialization value.
    * \p _index : index in GlvMapWidget.*
    * \p _parent : Vector widget the item belongs to.*/
    GlvMapWidgetItem(const Tkey& _key, const Tvalue& _value, const unsigned int _index, GlvMapWidget<Tkey, Tvalue, Tcompare>* _parent);
    ~GlvMapWidgetItem();

    Tkey get_key() const;
    void set_key(const Tkey _key);
    Tvalue get_value() const;
    void set_value(const Tvalue _value);
    GlvWidget<Tkey>* get_key_widget() const;
    GlvWidget<Tvalue>* get_value_widget() const;
    void increment_index();
    void decrement_index();

    /*! Remove in GlvMapWidget at index contained in the instance.*/
    void remove();

    friend class GlvMapWidget<Tkey, Tvalue, Tcompare>;
};

template <class Tkey, class Tvalue, class Tcompare>
GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::GlvMapWidgetItem(const Tkey& _key, const Tvalue& _value, const unsigned int _index, GlvMapWidget<Tkey, Tvalue, Tcompare>* _parent) {

    key_widget = new GlvWidget<Tkey>(_key);
    value_widget = new GlvWidget<Tvalue>(_value);
    index = _index;
    parent = _parent;

    remove_button = new QPushButton(tr("Remove"));
    layout->addWidget(key_widget);
    layout->addWidget(value_widget);
    layout->addWidget(remove_button);

    connect(remove_button, SIGNAL(clicked()), this, SLOT(remove()));
    connect(value_widget, SIGNAL(valueChanged()), this, SIGNAL(valueChanged()));

}

template <class Tkey, class Tvalue, class Tcompare>
GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::~GlvMapWidgetItem() {

}

template <class Tkey, class Tvalue, class Tcompare>
Tkey GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::get_key() const {

    return key_widget->get_value();

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::set_key(const Tkey _key) {

    key_widget->set_value(_key);

}

template <class Tkey, class Tvalue, class Tcompare>
Tvalue GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::get_value() const {

    return value_widget->get_value();

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::set_value(const Tvalue _value) {

    value_widget->set_value(_value);

}

template <class Tkey, class Tvalue, class Tcompare>
GlvWidget<Tkey>* GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::get_key_widget() const {
    return key_widget;
}

template <class Tkey, class Tvalue, class Tcompare>
GlvWidget<Tvalue>* GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::get_value_widget() const {
    return value_widget;
}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::increment_index() {
    index++;
}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::decrement_index() {
    index--;
}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidgetItem<Tkey, Tvalue, Tcompare>::remove() {
    parent->removeWidget(index);
}

#define _Tdata_ std::map<Tkey, Tvalue>

class QVBoxLayout;
template <class Tkey, class Tvalue, class Tcompare>
class GlvMapWidgetItem;
template <class Tvalue>
class GlvWidget;

/*! Widget to manage interface of std::map.*/
template <class Tkey, class Tvalue, class Tcompare = std::less<Tkey> >
class GlvMapWidget : public GlvMapWidget_base {

private:

    std::vector<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*> widgets;

    GlvWidget<Tkey>* insert_key_widget;

    Tcompare compare_function;

    bool l_editable_key;

public:

    GlvMapWidget(_Tdata_ _map = _Tdata_(), QWidget* _parent = 0);
    ~GlvMapWidget();

    /*! Set map.*/
    void set_value(const _Tdata_& _map);
    /*! Get map.*/
    _Tdata_ get_value() const;

    /*! Whether key is editable or not (default: false).*/
    void set_key_editable(bool _l_editable);

    /*! New value at current key.*/
    void insertValue();
    /*! Return true if inserted, false otherwise (key already exsists).*/
    bool insertValue(const Tkey& _key, const Tvalue& _value);

    /*! Get widget of index \p i.*/
    GlvWidget<Tvalue>* operator[] (const unsigned int i);
    /*! Get widget of key \p _key.*/
    GlvWidget<Tvalue>* operator[] (const Tkey _key);

private:

    void insertValue(const int _i, const Tkey& _key, const Tvalue& _value);

    void valueChanged_slot();
    typename std::vector<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*>::const_iterator removeWidget(const unsigned int i);
    /*! Return index of the corresponding key. Second of pair for existence of the key (true).*/
    std::pair<int, bool> find(const Tkey& _key) const;

    friend class GlvMapWidgetItem<Tkey, Tvalue, Tcompare>;
};

template <class Tkey, class Tvalue, class Tcompare>
GlvMapWidget<Tkey, Tvalue, Tcompare>::GlvMapWidget(_Tdata_ _map, QWidget* _parent) : GlvMapWidget_base(_parent) {

    /*! Widget of the key for insert.*/
    insert_key_widget = new GlvWidget<Tkey>();
    this->insert_layout->addWidget(insert_key_widget);
    l_editable_key = false;
    set_value(_map);

}

template <class Tkey, class Tvalue, class Tcompare>
GlvMapWidget<Tkey, Tvalue, Tcompare>::~GlvMapWidget() {

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidget<Tkey, Tvalue, Tcompare>::set_value(const _Tdata_& _map) {

    compare_function = _map.key_comp();

    for (typename std::vector<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*>::const_iterator it = widgets.begin(); it != widgets.end();) {

        if (_map.find((*it)->get_key_widget()->get_value()) == _map.end()) {
            it = removeWidget((*it)->index);
        } else {
            ++it;
        }

    }

    std::pair<int, bool> index;
    for (typename _Tdata_::const_iterator it = _map.begin(); it != _map.end(); ++it) {

        index = find(it->first);
        if (index.second) {
            widgets[index.first]->get_value_widget()->set_value(it->second);
        } else {
            insertValue(index.first, it->first, it->second);
        }

    }

}

template <class Tkey, class Tvalue, class Tcompare>
_Tdata_ GlvMapWidget<Tkey, Tvalue, Tcompare>::get_value() const {

    _Tdata_ value;
    for (int i = 0; i < widgets.size(); i++) {
        value[i] = widgets[i]->get_value();
    }
    return value;

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidget<Tkey, Tvalue, Tcompare>::set_key_editable(bool _l_editable) {

    l_editable_key = _l_editable;

    for (int i = 0; i < widgets.size(); i++) {
        widgets[i]->get_key_widget()->set_editable(l_editable_key);
    }

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidget<Tkey, Tvalue, Tcompare>::insertValue() {

    Tkey key = insert_key_widget->get_value();

    insertValue(key, Tvalue());

}

template <class Tkey, class Tvalue, class Tcompare>
bool GlvMapWidget<Tkey, Tvalue, Tcompare>::insertValue(const Tkey& _key, const Tvalue& _value) {

    std::pair<int, bool> index = find(_key);

    if (!index.second) {
        insertValue(index.first, _key, _value);
        return true;
    } else {
        return false;
    }

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidget<Tkey, Tvalue, Tcompare>::insertValue(const int _i, const Tkey& _key, const Tvalue& _value) {

    GlvMapWidgetItem<Tkey, Tvalue, Tcompare>* widget = new GlvMapWidgetItem<Tkey, Tvalue, Tcompare>(_key, _value, _i, this);
    widget->get_key_widget()->set_editable(l_editable_key);
    layout_items->insertWidget(_i, widget);
    widgets.insert(widgets.begin() + _i, widget);
    connect(widget, SIGNAL(valueChanged()), this, SLOT(valueChanged_slot()));

    for (unsigned int k = _i + 1; k < widgets.size(); k++) {
        widgets[k]->increment_index();
    }

}

template <class Tkey, class Tvalue, class Tcompare>
GlvWidget<Tvalue>* GlvMapWidget<Tkey, Tvalue, Tcompare>::operator[] (const unsigned int i) {

    return widgets[i]->get_value_widget();

}

template <class Tkey, class Tvalue, class Tcompare>
GlvWidget<Tvalue>* GlvMapWidget<Tkey, Tvalue, Tcompare>::operator[] (const Tkey _key) {

    std::pair<int, bool> index = find(_key);

    if (index.second) {
        return (*this)[index.first];
    } else {
        return NULL;
    }

}

template <class Tkey, class Tvalue, class Tcompare>
void GlvMapWidget<Tkey, Tvalue, Tcompare>::valueChanged_slot() {

    GlvMapWidgetItem<Tkey, Tvalue, Tcompare>* item = dynamic_cast<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*>(QObject::sender());
    if (item) {
        emit valueChanged(item->index);
    }

}

template <class Tkey, class Tvalue, class Tcompare>
typename std::vector<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*>::const_iterator GlvMapWidget<Tkey, Tvalue, Tcompare>::removeWidget(const unsigned int i) {

    typename std::vector<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*>::const_iterator it;

    if (!widgets.empty()) {

        layout_items->removeWidget(widgets[i]);
        delete widgets[i];
        it = widgets.erase(widgets.begin() + i);

        for (unsigned int j = i; j < widgets.size(); j++) {
            widgets[j]->decrement_index();
        }
    } else {
        it = widgets.end();
    }

    return it;
}

template <class Tkey, class Tvalue, class Tcompare>
std::pair<int, bool> GlvMapWidget<Tkey, Tvalue, Tcompare>::find(const Tkey& _key) const {

    std::pair<int, bool> result(0, false);

    bool l_found = false;
    for (typename std::vector<GlvMapWidgetItem<Tkey, Tvalue, Tcompare>*>::const_iterator it = widgets.begin(); it != widgets.end() && !l_found; ++it, result.first++) {
        l_found = !compare_function((*it)->get_key_widget()->get_value(), _key);
        if (l_found) {
            result.second = ((*it)->get_key_widget()->get_value() == _key);
        }
    }

    if (l_found) result.first--;

    return result;

}

#undef _Tdata_

#define Tdata std::map<Tkey, Tvalue>
/*! GlvWidgetData specialization for template type: std::map.*/
template <class Tkey, class Tvalue>
class GlvWidgetData<Tdata> : public GlvMapWidget<Tkey, Tvalue> {

public:
    GlvWidgetData(Tdata _map = Tdata(), QWidget* _parent = 0) :GlvMapWidget<Tkey, Tvalue>(_map, _parent) {}
    ~GlvWidgetData() {}

};

template <class Tkey, class Tvalue>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

#undef Tdata

class GlvEnumWidget_base : public QComboBox {
protected:
    GlvEnumWidget_base(QWidget* _parent = 0) : QComboBox(_parent) {}
    virtual ~GlvEnumWidget_base() {}
public:
    void set_editable(bool l_editable) {
        QComboBox::setEnabled(l_editable);
    }
};

template <class T, typename = void>
class GlvEnumWidget;

/*! Widget managing an enum type.
* The enum must be created using the macro: glvm_SlvEnum. See sample001 for example.*/
template <class Tenum>
class GlvEnumWidget<Tenum, typename std::enable_if<std::is_enum<Tenum>::value>::type> : public GlvEnumWidget_base {

public:

    GlvEnumWidget(Tenum _enum = Tenum(), QWidget* _parent = 0);
    ~GlvEnumWidget();

    /*! Set the enum value.*/
    void set_value(const Tenum _enum);
    /*! Get the enum value.*/
    Tenum get_value() const;

};

template <class Tenum>
GlvEnumWidget<Tenum, typename std::enable_if<std::is_enum<Tenum>::value>::type>::GlvEnumWidget(Tenum _enum, QWidget* _parent) : GlvEnumWidget_base(_parent) {

    for (unsigned int i = 0; i < SlvEnum<Tenum>::size(); i++) {
        QString enum_name = glv::toQString(SlvEnum<Tenum>::get_name(i));
        QComboBox::addItem(enum_name);
    }
    set_value(_enum);

}

template <class Tenum>
GlvEnumWidget<Tenum, typename std::enable_if<std::is_enum<Tenum>::value>::type>::~GlvEnumWidget() {

}

template <class Tenum>
void GlvEnumWidget<Tenum, typename std::enable_if<std::is_enum<Tenum>::value>::type>::set_value(const Tenum _enum) {

    QComboBox::setCurrentIndex(SlvEnum<Tenum>::enum_positions().at(_enum));

}

template <class Tenum>
Tenum GlvEnumWidget<Tenum, typename std::enable_if<std::is_enum<Tenum>::value>::type>::get_value() const {

    return SlvEnum<Tenum>::enum_positions_inv()[QComboBox::currentIndex()];

}

/*! GlvWidgetData for enum type.*/
template <class Tdata>
class GlvWidgetData<Tdata, typename std::enable_if<std::is_enum<Tdata>::value>::type> : public GlvEnumWidget<Tdata> {

public:
    GlvWidgetData(Tdata _enum = Tdata(), QWidget* _parent = 0) :GlvEnumWidget<Tdata>(_enum, _parent) {}
    ~GlvWidgetData() {}

};

template <class Tdata>
struct GlvWidgetMakerConnect<Tdata, typename std::enable_if<std::is_enum<Tdata>::value>::type> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(currentIndexChanged(int)), _widget_connector, SLOT(valueChanged_slot(int)));
    }
};

class QLineEdit;
class QPushButton;
class QLabel;
class QHBoxLayout;

/*! Widget for selecting a directory.*/
class GlvOpenDirectory : public QWidget {

    Q_OBJECT

private:

    QLineEdit* line_edit;
    QPushButton* push_button;
    QLabel* status;
    /*! Whether a valid directory has been selected or not.*/
    bool l_ready;

public:

    /*! \p _directory : default directory.*/
    GlvOpenDirectory(SlvDirectory _directory, QWidget* _parent = 0);
    /*! \p _default : default directory path.*/
    GlvOpenDirectory(QString _default = "", QWidget* _parent = 0);
    ~GlvOpenDirectory();

    /*! Return directory item. Check if is_ready() before using returned value.*/
    SlvDirectory get_directory() const;

    /*! Whether a valid directory has been selected or not.*/
    bool is_ready() const;
    /*! Makes line edit read-only or not. Shows/hides the open directory button.*/
    void set_editable(bool l_editable);

private:

    /*! Check if directory is valid.*/
    void update_readiness();

public slots:
    /*! Opens QFileDialog to select a directory.*/
    void getExistingDirectory();
    /*! Set directory item by editing QLineEdit. If directory is valid, sets instance as ready.*/
    void set_directory(const SlvDirectory& _directory);

private slots:

    void directory_changed_slot(const QString& _directory_path);

signals:

    /*! Emitted when QLineEdit changes.*/
    void directory_changed(const QString& _directory_path);

};

#define Tdata SlvDirectory

/*! GlvWidgetData for type SlvDirectory.*/
template <>
class GlvWidgetData<Tdata> : public GlvOpenDirectory {

public:
	GlvWidgetData(Tdata _file = Tdata(), QWidget* _parent = 0);
	~GlvWidgetData();

	Tdata get_value() const {
		return GlvOpenDirectory::get_directory();
	}
	void set_value(const Tdata& _value) {
		return GlvOpenDirectory::set_directory(_value);
	}

};

template <>
struct GlvWidgetMakerConnect<Tdata> {
	static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
		QObject::connect(_widget, SIGNAL(directory_changed(const QString&)), _widget_connector, SLOT(valueChanged_slot(const QString&)));
	}
};

#undef Tdata

#endif

/*! std::enable_if for SlvParametrization. Use : std::enable_if<SlvIsParametrization<T>::value>
* Alternative: std::enable_if<std::is_base_of<SlvParametrization_base, Tparametrization>::value>*/
glvm_SlvIsType(SlvIsParametrization, Tparametrization)

/*! Macro for method detection in a struct/class/type, for instance when using std::enable_if.
* struct_name is the name of the structure to be used such as: std::enable_if<struct_name<T>::value>
* method_name is the method struct_name is supposed to contain such as: struct_name::method_name.
* method_name must be a public method.*/
#define glvm_SlvHasMethod(struct_name, method_name) \
template <typename T>\
class struct_name {\
    typedef char one;\
    struct two { char x[2]; };\
    template <typename C> static one test(decltype(&C::method_name));\
    template <typename C> static two test(...);\
public:\
    enum { value = sizeof(test<T>(0)) == sizeof(char) };\
};

/*! Same as glvm_SlvHasMethod but can manage overloaded methods.*/
#define glvm_SlvHasMethodSignature(struct_name, method_type, method_name, method_argument) \
template <typename T>\
class struct_name {\
    typedef char one;\
    struct two { char x[2]; };\
    template <typename C> static one test(decltype(method_type (std::declval<C &>().method_name(method_argument)))*);\
    template <typename C> static two test(...);\
public:\
    enum { value = sizeof(test<T>(0)) == sizeof(char) };\
};

template <typename T>
struct SlvHasOstreamOperator {
    template <typename V>
    static auto test(void*) -> decltype(std::declval<std::ostream>() << std::declval<V>(), void());
    template <typename>
    static auto test(...) -> std::false_type;

    static constexpr bool value = std::is_same<decltype(test<T>(nullptr)), void>::value;
};

template <typename T>
struct SlvHasIstreamOperator {
    template <typename V>
    static auto test(void*) -> decltype(std::declval<std::istream>() >> std::declval<V&>(), void());
    template <typename>
    static auto test(...) -> std::false_type;

    static constexpr bool value = std::is_same<decltype(test<T>(nullptr)), void>::value;
};

/*! Class to be inherited to provide file input stream.*/
class SlvIFS {

public:

	SlvIFS();
	virtual ~SlvIFS();

	friend std::ifstream& operator>>(std::ifstream& _is, SlvIFS& _IFS);

protected:

	/*! Input file stream method to reimplement.*/
	virtual void ifstream(std::ifstream& _ifs) = 0;

};

/*! Convenience class to be inherited to provide a direct method to read the instance from a text file.*/
class SlvReadText : public SlvIFS {

public:

	SlvReadText();
	virtual ~SlvReadText();

	/*! Set the object by reading the TEXT file (Clear reading) at \p _file_path.
	* Uses operator>>.*/
	SlvStatus read_text(std::string _file_path);

};

/*! Class to be inherited to provide file output stream.*/
class SlvOFS {

public:

	SlvOFS();
	virtual ~SlvOFS();

	friend std::ofstream& operator<<(std::ofstream& _os, const SlvOFS& _OFS);

protected:

	/*! Output file stream method to reimplement.*/
	virtual void ofstream(std::ofstream& _ofs) const = 0;

};

/*! Convenience class to be inherited to provide a direct method to write the instance into a text file.*/
class SlvWriteText : public SlvOFS {

public:

	SlvWriteText();
	virtual ~SlvWriteText();

	/*! Export the object by writing the TEXT file (Clear writing) at \p _file_path.
	* Uses operator<<.*/
	SlvStatus write_text(std::string _file_path, std::ios::openmode _position = std::ios::trunc) const;

};

/*! Convenience class to both read and write the instance into a text file.*/
class SlvReadWriteText : virtual public SlvReadText, virtual public SlvWriteText {

public:

	SlvReadWriteText() {}
	~SlvReadWriteText() {}

};

/*! Class providing basic name management with get/set accessors.*/
class SlvName {

protected:

    std::string name;

public:

    SlvName(std::string _name);
    ~SlvName();

    const std::string& get_name() const;
    void set_name(const std::string& _name);

};

/*! Convenience class to be inherited to provide a direct method to write the instance into a binary file.*/
class SlvWriteBinary {

public:

	SlvWriteBinary();
	virtual ~SlvWriteBinary();

	/*! Export the object by writing the BINARY file at \p _file_path.*/
	SlvStatus write_binary(std::string _file_path, std::ios::openmode _position = std::ios::trunc) const;

	/*! Binary write method to implement.*/
	virtual void writeB(std::ofstream& _output_file) const = 0;

};

/*! Convenience class to be inherited to provide a direct method to read the instance from a binary file.*/
class SlvReadBinary {

public:

	SlvReadBinary();
	virtual ~SlvReadBinary();

	/*! Set the object by reading the BINARY file at \p _file_path.*/
	SlvStatus read_binary(std::string _file_path);

	/*! Binary read method to implement.*/
	virtual bool readB(std::ifstream& _input_file) = 0;

};

/*! Convenience class to both read and write the instance into a binary file.*/
class SlvReadWriteBinary : virtual public SlvReadBinary, virtual public SlvWriteBinary {

public:

	SlvReadWriteBinary() {}
	~SlvReadWriteBinary() {}

};

/*! Convenience class to manage file writing by using automatically the name of the instance.
* Tname_class must have the method std::string get_name().*/
template <class Tname_class>
class SlvWriteBinaryNamedT : virtual public SlvWriteBinary, public Tname_class {

public:

	SlvWriteBinaryNamedT(std::string _name = "") :Tname_class(_name) {}
	~SlvWriteBinaryNamedT() {}

	/*! Write the instance in a file named after the instance's name.
	* \p _prefix_path can be set so that the path will be such as \p _prefix_path + get_name()*/
	SlvStatus write_binary_auto(std::string _prefix_path = "", std::ios::openmode _position = std::ios::trunc) const;

};

template <class Tname_class>
SlvStatus SlvWriteBinaryNamedT<Tname_class>::write_binary_auto(std::string _prefix, std::ios::openmode _position) const {

	return SlvWriteBinary::write_binary(_prefix + Tname_class::get_name(), _position);

}

/*! Convenience class.*/
typedef SlvWriteBinaryNamedT<SlvLblName> SlvWriteBinaryLblNamed;

/*! Convenience class.*/
typedef SlvWriteBinaryNamedT<SlvName> SlvWriteBinaryNamed;

/*! Convenience class to manage file writing by using automatically the name of the instance.
* Tname_class must have the method std::string get_name().*/
template <class Tname_class>
class SlvWriteTextNamedT : virtual public SlvWriteText, public Tname_class {

public:

	SlvWriteTextNamedT(std::string _name = "") :Tname_class(_name) {}
	~SlvWriteTextNamedT() {}

	/*! Write the instance in a file named after the instance's name.
	* \p _prefix_path can be set so that the path will be such as \p _prefix_path + get_name()*/
	void write_text_auto(std::string _prefix_path = "", std::ios::openmode _position = std::ios::trunc) const;

};

template <class Tname_class>
void SlvWriteTextNamedT<Tname_class>::write_text_auto(std::string _prefix, std::ios::openmode _position) const {

	SlvWriteText::write_text(_prefix + Tname_class::get_name(), _position);

}

/*! Convenience class.*/
typedef SlvWriteTextNamedT<SlvLblName> SlvWriteTextLblNamed;

/*! Convenience class.*/
typedef SlvWriteTextNamedT<SlvName> SlvWriteTextNamed;

/*! Class to measure execution time.
* At instantiation/reset, a reference time is measured and added to stack of checked times.
* Each time get_elasped_time, get_elasped_time_last, or check_display, method is called, a new checked time is added. Check sample012 for example.*/
class SlvTimer : public SlvName {

private:

	std::vector<clock_t> check_times;

public:

	SlvTimer(std::string _name = "");
	~SlvTimer();

	/*! Reset timer by clearing all checked times and taking current time as new reference.*/
	void reset();

	/*! Parse elapsed time since instance reference into a string.*/
	std::string get_string() const;

	/*! Get elapsed time from reference into hours, minutes, seconds, milliseconds.
	* Each time this method is called, a check time is added.*/
	std::vector<int> get_elasped_time();
	/*! Get elapsed time from last check into hours, minutes, seconds, milliseconds.
	* Each time this method is called, a check time is added.*/
	std::vector<int> get_elasped_time_last();

	/*! Measure elapsed time and display it via std::cout. \p _message is an optional display message.
	* Each time this method is called, a check time is added.*/
	void check_display(std::string _message = "");

private:

	/*! Display time \p _time.*/
	void time_display(clock_t _time) const;
	/*! Parse \p _time into hours, minutes, seconds, milliseconds.*/
	std::vector<int> get_time(clock_t _time) const;

};

/*! Class managing the progress signals of a loop.*/
class SlvProgressionQt :
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	public QObject,
#endif
	public SlvLblName {

#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	Q_OBJECT
#endif

private:

	/*! Tracked index of progress.
	It is important to set a safe index because it can be set to Niterations if cancel is triggered.
	ie: Use a different index for data manipulation.*/
	void* iterator_ptr;
	enum IteratorType { Int, UnsignedInt, Size_t };
	/*! Type of the iterator defined at start.*/
	IteratorType iterator_type;

	/*! Expected maximum number of iterations. Set by emit_start method.*/
	unsigned int Niterations;

	/*! Whether progression instance is used directly as an iterator
	* true : instance is an iterator. See operator= method.
	* false : instance may control an external iterator using a pointer.*/
	bool l_iterating;
	/*! Iteration value when l_iterating is true.*/
	std::size_t iterator;

	bool l_started;
	/*! If Niterations was not provided, then there is no feedback on progress.
	* This variable checks if progress has ended or not.*/
	bool l_no_feedback_ended;

	/*! Optional message.*/
	glvm_GetSetVariable(std::string, message);

	/*! Whether the progression has been canceled externally or not.*/
	bool l_was_canceled;

	/*! Whether this progress is being called multiple times.
	* If true, default hiding policy on ending will avoid glitches.
	* In this case, hiding must be managed using finish().*/
	bool l_recurrent;

public:

	SlvProgressionQt(std::string _name = "", bool _l_recurrent = false);
	SlvProgressionQt(const SlvProgressionQt& _progression);
	~SlvProgressionQt();

private:
	/*! Reset progress status.*/
	void clear_progress();

public:
	/*! Reset progress status.*/
	void clear();

	/*! Does nothing. Disable assigment to ensure progress variables are not mixed.*/
	SlvProgressionQt& operator=(const SlvProgressionQt& _progression);

	/*! Whether this progress is being called multiple times.
	* If true, default hiding policy on ending will avoid glitches.
	* In this case, hiding must be managed using finish().*/
	void set_recurrent(bool _l_recurrent);
	/*! Whether this progress is being called multiple times.
	* If true, default hiding policy on ending will avoid glitches.
	* In this case, hiding must be managed using finish().*/
	bool is_recurrent() const;

	/*! Whether the progression as reached its maximum or not: *iterator_ptr >= Niterations-1.
	* Return true if the progression was not started yet.*/
	bool is_over() const;
	/*! Whether the progression is managing a iterator_ptr or not. Depends on start() strategy.*/
	bool has_iterator_ptr() const;
	/*! Whether progression instance is used as an iterator. See operator= method.*/
	bool is_iterating() const;
	/*! Whether control on progress is possible or not.*/
	bool is_cancelable() const;

	/*! Emit start signal. Progress without bar nor control on the loop (no cancel button).*/
	void start();
	/*! Emit start signal. Progress without control on the loop (no cancel button).
	* Use explicit update(int _value) at the end of the loop to update progress.*/
	void start(const unsigned int _Niterations);
	/*! Emit start signal.
	* Use update() at the end of the loop to update progress.
	* \p _iterator_ptr : pointer to the iteration value. Takes control of value by setting it to \p _Niterations in case the progression is stopped.*/
	template <class Titerator>
	void start(Titerator* _iterator_ptr, const unsigned int _Niterations);
private :
	void start_pv(const unsigned int _Niterations);
public :

	/*! Emit progress by using _iterator_ptr pointer and Niterations number defined by emit_start.
	* Return false if _iterator_ptr pointer or Niterations number is null.
	* If _iterator_ptr reaches Niterations, then ended() is emitted.*/
	bool update();
	/*! Update progress by explicitly setting the progress value \p _value.
	* To be used with start(const unsigned int _Niterations).
	* Does not assign value to _iterator_ptr pointer.
	* Return false if _iterator_ptr number is null.*/
	bool update(int _value);
	/*! Confirm manually the progress is over.
	* To be used if started with start(), ie no progress bar nor cancel control.
	* If the progress is already monitored by a _iterator_ptr or an iterator, is automatically called at end of loop. No need to call it explicitly.
	* Apply iterator finish.
	* Release iterator_ptr pointer (set to NULL).*/
	void end();
	/*! Implies that progress monitoring is completely over. Will remove Qt progression from GlvProgressMgr.
	* Doing so means the progression will need to be added again to a Qt GlvProgressMgr.
	* Apply iterator finish.
	* Release _terator_ptr pointer (set to NULL).
	* ie: Same as end() with removal from GlvProgressMgr.*/
	void finish();

	/*! Apply cancel to tracked iterator/iterator_ptr.
	* Ends the loop.
	* Does not emit signals. Use end() method instead.*/
	void cancel();
	/*! Whether the progression has been canceled externally or not.
	* If so, it means the algorithm that was watched probably did not go through.*/
	bool was_canceled() const;

	/*! Cast to iterator.*/
	operator std::size_t() const;
	/*! Initialize iterator and start progress.*/
	SlvProgressionQt& operator=(const std::size_t _iterator);

	/*! Control of maximum. Compare iterator < _Niterations and updates Niterations. Comparison in for-loop used to set Niterations.
	* Leaves < operator possible on iterator index, without impacting progression.
	* On the other hand, bitwise operation is not possible of iterator index.
	* Use init() or start() methods as an alternative to manage Niterations with classical int iterator index.*/
	bool operator<<(std::size_t _Niterations);
	/*! Overload to avoid call to built-in operator and std::size_t casting.*/
	bool operator<<(int _Niterations);
	/*! Overload to avoid call to built-in operator and std::size_t casting.*/
	bool operator<<(unsigned int _Niterations);

	/*! Control of maximum. Compare iterator < _Niterations and updates Niterations. Comparison in for-loop used to set Niterations.
	* Leaves < operator possible on iterator index, without impacting progression.
	* On the other hand, bitwise operation is not possible of iterator index.
	* Use init() or start() methods as an alternative to manage Niterations with classical int iterator index.*/
	bool operator<<=(std::size_t _Niterations);
	/*! Overload to avoid call to built-in operator and std::size_t casting.*/
	bool operator<<=(int _Niterations);
	/*! Overload to avoid call to built-in operator and std::size_t casting.*/
	bool operator<<=(unsigned int _Niterations);

	/*! Increase iterator and update progress.*/
	SlvProgressionQt& operator++();
	/*! Increase iterator and update progress.*/
	SlvProgressionQt operator++(int);

private:

	/*! Enforce finish by setting the iterator_ptr to finish value Niterations.
	* The loop will end if the iterator is properly related to the iterator_ptr pointer.*/
	void iterator_finish();

	/*! iterator_ptr pointer is being checked at end of loop content.*/
	static bool is_iterator_ptr_over(unsigned int _iterator_value, unsigned int _Niterations);
	/*! Iterator is being checked at beginning of loop content.*/
	static bool is_iterator_over(std::size_t _iterator, unsigned int _Niterations);

#if OPTION_ENABLE_SLV_QT_PROGRESS==1
signals:

	/*! Emitted when progress starts.*/
	void started();
	/*! Emit progress value in a range [0, 100] when progress is updated.*/
	void updated(int _value);
	/*! If an iterator or iterator_ptr is provided, is automatically emitted at end of loop.*/
	void ended();
	/*! Emitted when progress is completely over.*/
	void finished();
#endif

};

/*! Use Qt signals.*/

/*! Convenience class to embed a SlvProgressionQt in a class.
* Typical use: to be inherited by a class which contains a method to monitor.
* The key class is actually SlvProgressionQt, but it is convenient to encapsulate it in SlvProgression in order to not add too many inherited methods in inheriting classes.
* Also convenient to track the get_progression() method.*/
class SlvProgression {

private:

	SlvProgressionQt progression;

public:

	SlvProgression(std::string _name = "", bool _l_recurrent = false);
	SlvProgression(const SlvProgression& _progression);
	~SlvProgression();

	/*! To be used. Const qualifier make the instance compliant with inherited const method.
	In other words, the progression ignores the const qualifier of the child class instance.*/
	SlvProgressionQt* get_progression() const;

protected:

	/*! Assignment operator to avoid assigning SlvProgressionQt progression.*/
	SlvProgression& operator=(const SlvProgression& _progression);

};

class SlvParametrization_base : virtual public SlvVirtualGetName, virtual public SlvIOS {

protected:

	/* Copy of the pointer of the parameters set in SlvParametrization**.
	* Convenient to call virtual methods on all the parameters without neededing to known the parameter template type.*/
	std::vector<const SlvParameter_base*> parameters;

	/*! Whether param_init() method is called each time a parameter's value is modified.*/
	bool l_param_init_auto;

public:

	/*! Separate static name of the class to parameters. ex: name@[param1,param2,param3].*/
	glvm_staticVariable(const, char, separator, '@');

protected:
	SlvParametrization_base();
public:
	virtual ~SlvParametrization_base();

	/*! Whether param_init() method is called each time a parameter's value is modified.
	* Either by SlvParametrization**::operator=
	* Or SlvParametrization**::set_***(value).
	* Default is true.*/
	bool is_param_init_auto() const;
	/*! Set whether param_init() method is called each time a parameter's value is modified.
	* Either by SlvParametrization**::operator=
	* Or SlvParametrization**::set_***(value).
	* Default is true.*/
	void set_param_init_auto(bool _l_param_init_auto);

	/*! Get string identification of the parametrization.*/
	std::string get_id_str() const;
	/*! Get a name of the instance plus string identification of the parametrization.*/
	std::string get_full_name() const;

	/*! Check parameters rules.*/
	virtual SlvStatus check_parameters() const = 0;

	/*! Check if the parametrization has rules or not.*/
	bool has_rules() const;
	/*! Returns false if the rules were not abided, meaning there was a modification of the parametrization.
	* Returns true if rules are abided, meaning there was no modification of the parameterization.*/
	virtual bool abide_rules() = 0;

	/*! Process of parameters at construction.
	* Usefull to call after a param_cast() assignment.
	* When definition of param_init() is needed, must be reimplemented in the parametrization class inheriting from SlvParametrization.
	* Ex: private parameter deriving from other ones.*/
	virtual void param_init();

	/*! Recursively find the parameters which name is \p _parameter_name.
	* If \p _l_parametrizations is true, parameters which type is a parametrization can be counted.
	* If false, they are excluded (but recursivity still applies).*/
	std::vector<const SlvParameter_base*> find(std::string _parameter_name, bool _l_parametrizations) const;
	/*! Recursively find the frist parameter which name is \p _parameter_name.
	* If \p _l_parametrizations is true, parameters which type is a parametrization can be counted.
	* If false, they are excluded (but recursivity still applies).
	* Returns NULL if none found.*/
	const SlvParameter_base* find_first(std::string _parameter_name, bool _l_parametrizations) const;

	/*! Set parameter values using >> operator by providing parameter name and corresponding value as string.
	* Returns :
	* First of pair: the conflicts corresponding to multiple parameters with the same name. Ie: assignment ambiguity.
	* Second of pair : parameter names that could not be found in the parametrization.*/
	std::pair< std::map<std::string, int>, std::vector<std::string> > set_stream_values(const std::map<std::string, std::string>& _stream_values, bool _l_parametrizations);

private:
	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro classParameter.*/
	virtual std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const = 0;
};

/*! Convenience class to inherit both from SlvIFS and SlvOFS.*/
class SlvIOFS : virtual public SlvIFS, virtual public SlvOFS {

public:

	SlvIOFS() {}
	~SlvIOFS() {}

};

#if OPTION_USE_THIRDPARTY_JSON==1

namespace slv {
    namespace rw {
        /*! Json save/load methods. For public use:
        * writeJson
        * readJson
        * specialization of writeJson_spec
        * specialization of readJson_spec*/
        namespace json {

            /*! Function to specialize for json writing.*/
            template <class Tdat>
            void writeJson_spec(const Tdat& _value, nlohmann::json& _json) = delete;

            /*! Private namespace.*/
            namespace typemgr {
                template <class Tdat, class = void>
                struct is_write_specialized : std::false_type {};

                template <class Tdat>
                struct is_write_specialized<Tdat, decltype(slv::rw::json::writeJson_spec<Tdat>(std::declval<const Tdat&>(), std::declval<nlohmann::json&>()), void())> : std::true_type {};
            
                /*! Use json library IO or not.*/
                template <class Tdat, typename = void>
                struct JsonRW {
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {
                        _json = _value;
                    }
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                        SlvStatus status;
                        try {
                            _value = _json.get<Tdat>();
                        } catch (std::exception) {
                            status = SlvStatus(SlvStatus::statusType::critical, "Can not read type " + SlvDataName<Tdat>::name());
                        }
                        return status;
                    }
                };
            }

            /*! Write \p _value in \p _json. May not compile if Tdat is not managed.*/
            template <class Tdat>
            typename std::enable_if<!typemgr::is_write_specialized<Tdat>::value>::type writeJson(const Tdat& _value, nlohmann::json& _json) {
                typemgr::JsonRW<Tdat>::writeJson(_value, _json);//default if no specialization
            }
            /*! Write \p _value in \p _json. May not compile if Tdat is not managed.*/
            template <class Tdat>
            typename std::enable_if<typemgr::is_write_specialized<Tdat>::value>::type writeJson(const Tdat& _value, nlohmann::json& _json) {
                writeJson_spec<Tdat>(_value, _json);// use specialization
            }

            //////

            /*! Function to specialize for json reading.*/
            template <class Tdat>
            SlvStatus readJson_spec(Tdat& _value, const nlohmann::json& _json) = delete;

            namespace typemgr {
                template <class Tdat, class = void>
                struct is_read_specialized : std::false_type {};

                template <class Tdat>
                struct is_read_specialized<Tdat, decltype(slv::rw::json::readJson_spec<Tdat>(std::declval<Tdat&>(), std::declval<const nlohmann::json&>()), void())> : std::true_type {};
            }

            /*! Read \p _value from \p _json. May not compile if Tdat is not managed.*/
            template <class Tdat>
            typename std::enable_if<!typemgr::is_read_specialized<Tdat>::value, SlvStatus>::type readJson(Tdat& _value, const nlohmann::json& _json) {
                return typemgr::JsonRW<Tdat>::readJson(_value, _json);//default if no specialization
            }
            /*! Read \p _value from \p _json. May not compile if Tdat is not managed.*/
            template <class Tdat>
            typename std::enable_if<typemgr::is_read_specialized<Tdat>::value, SlvStatus>::type readJson(Tdat& _value, const nlohmann::json& _json) {
                return readJson_spec<Tdat>(_value, _json);// use specialization
            }

        }
    }
}

glvm_SlvHasMethod(SlvHas_writeJson, writeJson)
glvm_SlvHasMethod(SlvHas_readJson, readJson)

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Use methods writeJson and readJson if they exist for type Tdat.*/
                template <class Tdat, typename = void>
                struct JsonRW_use_readwriteJson {
                    static constexpr bool l_valid = false;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {}
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) { return SlvStatus(); }
                };
                template <class Tdat>
                struct JsonRW_use_readwriteJson<Tdat, typename std::enable_if<SlvHas_writeJson<Tdat>::value&& SlvHas_readJson<Tdat>::value>::type> {
                    static constexpr bool l_valid = true;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {
                        _value.writeJson(_json);
                    }
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                        return _value.readJson(_json);
                    }
                };

            }
        }
    }
}

glvm_SlvHasMethod(SlvHas_ofstream, ofstream)
glvm_SlvHasMethod(SlvHas_ifstream, ifstream)

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Use methods ofstream and ifstream if they exist (public) for type Tdat.*/
                template <class Tdat, typename = void>
                struct JsonRW_use_iofstream {
                    static constexpr bool l_valid = false;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {}
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) { return SlvStatus(); }
                };
                template <class Tdat>
                struct JsonRW_use_iofstream<Tdat, typename std::enable_if<SlvHas_ofstream<Tdat>::value&& SlvHas_ifstream<Tdat>::value>::type> {
                    static constexpr bool l_valid = true;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {
                        std::ostringstream oss;
                        _value.ofstream(oss);
                        _json = oss.str();
                    }
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                        SlvStatus status;
                        try {
                            std::istringstream iss(_json.get<std::string>());
                            _value.ifstream(iss);
                        } catch (std::exception) {
                            status = SlvStatus(SlvStatus::statusType::critical, "Can not read type " + SlvDataName<Tdat>::name());
                        }
                        return status;
                    }
                };

            }
        }
    }
}

glvm_SlvHasMethod(SlvHas_ostream, ostream)
glvm_SlvHasMethod(SlvHas_istream, istream)

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Use methods ostream and istream if they exist (public) for type Tdat.*/
                template <class Tdat, typename = void>
                struct JsonRW_use_iostream {
                    static constexpr bool l_valid = false;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {}
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) { return SlvStatus(); }
                };
                template <class Tdat>
                struct JsonRW_use_iostream<Tdat, typename std::enable_if<SlvHas_ostream<Tdat>::value&& SlvHas_istream<Tdat>::value>::type> {
                    static constexpr bool l_valid = true;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {
                        std::ostringstream oss;
                        _value.ostream(oss);
                        _json = oss.str();
                    }
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                        SlvStatus status;
                        try {
                            std::istringstream iss(_json.get<std::string>());
                            _value.istream(iss);
                        } catch (std::exception) {
                            status = SlvStatus(SlvStatus::statusType::critical, "Can not read type " + SlvDataName<Tdat>::name());
                        }
                        return status;
                    }
                };

            }
        }
    }
}

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Use writeJson_spec and readJson_spec if they exist. No reimplementation, will be caught in slv:rw::json::writeJson and slv::rw::json::readJson.*/
                template <class Tdat, typename = void>
                struct JsonRW_use_specialization {
                    static constexpr bool l_valid = false;
                };
                template <class Tdat>
                struct JsonRW_use_specialization<Tdat, typename std::enable_if<is_write_specialized<Tdat>::value&& is_read_specialized<Tdat>::value>::type> {
                    static constexpr bool l_valid = true;
                };

            }
        }
    }
}

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Containers managed by default by the json library.*/
                template <typename T>
                struct is_json_container {
                    static const bool value = false;
                };
                template <typename T>
                struct is_json_container< std::vector<T> > {
                    static const bool value = true;
                };
                template <typename Tkey, typename Tvalue>
                struct is_json_container< std::map<Tkey, Tvalue> > {
                    static const bool value = true;
                };

            }
        }
    }
}

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Use operators << and >> if they are available for type Tdat.*/
                template <class Tdat, typename = void>
                struct JsonRW_use_chevrons {
                    static constexpr bool l_valid = false;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {}
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) { return SlvStatus(); }
                };

            }
        }
    }
}

/* Types enabling << >> operators. Containers managed by the json library are excluded.
* Such exclusion is not required for other type checkers, assuming no type managed intrisically by the json library has any method writeJson/readJson/ostream/istream/ofstream/ifstream.*/
#define Tenable_chevrons(Tdat) \
(SlvHasOstreamOperator<Tdat>::value || std::is_base_of<SlvOS, Tdat>::value || std::is_base_of<SlvOFS, Tdat>::value) &&\
(SlvHasIstreamOperator<Tdat>::value || std::is_base_of<SlvIS, Tdat>::value || std::is_base_of<SlvIFS, Tdat>::value)\
&& (std::is_class<Tdat>::value || std::is_enum<Tdat>::value)\
&& !slv::rw::json::typemgr::is_json_container<Tdat>::value

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                template <class Tdat>
                struct JsonRW_use_chevrons<Tdat, typename std::enable_if<Tenable_chevrons(Tdat)>::type> {
                    static constexpr bool l_valid = true;
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {
                        std::ostringstream oss;
                        oss << _value;
                        _json = oss.str();
                    }
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                        SlvStatus status;
                        try {
                            std::istringstream iss(_json.get<std::string>());
                            iss >> _value;
                        } catch (std::exception) {
                            status = SlvStatus(SlvStatus::statusType::critical, "Can not read type " + SlvDataName<Tdat>::name());
                        }
                        return status;
                    }
                };

                /*! std::string specialization : otherwise chevron reads up to space character.*/
                template <>
                struct JsonRW_use_chevrons<std::string, typename std::enable_if<Tenable_chevrons(std::string)>::type> {
                    static constexpr bool l_valid = true;
                    static void writeJson(const std::string& _value, nlohmann::json& _json) {
                        std::ostringstream oss;
                        oss << _value;
                        _json = oss.str();
                    }
                    static SlvStatus readJson(std::string& _value, const nlohmann::json& _json) {
                        SlvStatus status;
                        try {
                            _value = _json.get<std::string>();
                        } catch (std::exception) {
                            status = SlvStatus(SlvStatus::statusType::critical, "Can not read type " + SlvDataName<std::string>::name());
                        }
                        return status;
                    }
                };

            }
        }
    }
}

#define Tenable_manageable_by_library \
JsonRW_use_specialization<Tdat>::l_valid \
|| JsonRW_use_readwriteJson<Tdat>::l_valid\
|| JsonRW_use_iofstream<Tdat>::l_valid\
|| JsonRW_use_iostream<Tdat>::l_valid\
|| JsonRW_use_chevrons<Tdat>::l_valid

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Types that are manageable independently of the json library.*/
                template <class Tdat, typename = void>
                struct IsJsonManageableByImplementation {
                    static constexpr bool l_valid = false;
                };
                template <class Tdat>
                struct IsJsonManageableByImplementation<Tdat, typename std::enable_if<Tenable_manageable_by_library>::type> {
                    static constexpr bool l_valid = true;
                };

                /*! If Tdat is manageable by implementation, then json is handled here. Otherwise default json IO will be used for the type Tdat.*/
                template <class Tdat>
                struct JsonRW<Tdat, typename std::enable_if<IsJsonManageableByImplementation<Tdat>::l_valid>::type> {
                    static void writeJson(const Tdat& _value, nlohmann::json& _json) {

                        if (JsonRW_use_readwriteJson<Tdat>::l_valid) {
                            JsonRW_use_readwriteJson<Tdat>::writeJson(_value, _json);
                        } else if (JsonRW_use_iofstream<Tdat>::l_valid) {
                            JsonRW_use_iofstream<Tdat>::writeJson(_value, _json);
                        } else if (JsonRW_use_iostream<Tdat>::l_valid) {
                            JsonRW_use_iostream<Tdat>::writeJson(_value, _json);
                        } else if (JsonRW_use_chevrons<Tdat>::l_valid) {
                            JsonRW_use_chevrons<Tdat>::writeJson(_value, _json);
                        }

                    }
                    static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {

                        if (JsonRW_use_readwriteJson<Tdat>::l_valid) {
                            return JsonRW_use_readwriteJson<Tdat>::readJson(_value, _json);
                        } else if (JsonRW_use_iofstream<Tdat>::l_valid) {
                            return JsonRW_use_iofstream<Tdat>::readJson(_value, _json);
                        } else if (JsonRW_use_iostream<Tdat>::l_valid) {
                            return JsonRW_use_iostream<Tdat>::readJson(_value, _json);
                        } else if (JsonRW_use_chevrons<Tdat>::l_valid) {
                            return JsonRW_use_chevrons<Tdat>::readJson(_value, _json);
                        } else {
                            return SlvStatus(SlvStatus::statusType::warning, "Json : no reader available. Should not happen (architecture issue).");
                        }

                    }
                };

            }
        }
    }
}

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                /*! Types manageable by the json library.*/
                template <class Tdat, typename = void>
                struct IsJsonManageableByJsonLibrary {
                    static constexpr bool l_valid = false;
                };

                template <class Tdat>
                struct IsJsonManageableByJsonLibrary<Tdat, typename std::enable_if<std::is_arithmetic<Tdat>::value || std::is_enum<Tdat>::value || std::is_same<Tdat, std::string>::value || slv::rw::json::typemgr::is_json_container<Tdat>::value>::type> {
                    static constexpr bool l_valid = true;
                };

                ////////////////

                /*! Parametrizations that are manageable.*/
                template <class Tdat, typename = void>
                struct IsJsonManageableParametrizationExplicit {
                    static constexpr bool l_valid = true;
                };

                /*! Types that are manageable if they are parametrizations.*/
                template <class Tdat, typename = void>
                struct IsJsonManageableParametrization {
                    static constexpr bool l_valid = true;//true by default for types that are not parametrizations
                };

            }
        }
    }
}

namespace slv {
    namespace rw {
        namespace json {
            namespace typemgr {

                template <class Tdat>
                struct IsJsonManageableParametrization<Tdat, typename std::enable_if<SlvIsParametrization<Tdat>::value>::type> {
                    static constexpr bool l_valid = IsJsonManageableParametrizationExplicit<typename Tdat::Tparametrization>::l_valid;
                };
            }

            /*! Types manageable (ultimately). Either by json library or by implementation. Recommended for public use.*/
            template <class Tdat, typename = void>
            struct ReadWrite {
                static constexpr bool l_valid = false;
                static void writeJson(const Tdat& _value, nlohmann::json& _json) {}
                static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                    return SlvStatus(SlvStatus::statusType::warning, "The type can not be managed for json IO.");
                }
            };

            /*! Types manageable (ultimately). Either by json library or by implementation. Special case for parametrization.*/
            template <class Tdat>
            struct ReadWrite<Tdat, typename std::enable_if<(typemgr::IsJsonManageableByJsonLibrary<Tdat>::l_valid || typemgr::IsJsonManageableByImplementation<Tdat>::l_valid) && typemgr::IsJsonManageableParametrization<Tdat>::l_valid>::type> {
                static constexpr bool l_valid = true;
                static void writeJson(const Tdat& _value, nlohmann::json& _json) {
                    slv::rw::json::writeJson(_value, _json);
                }
                static SlvStatus readJson(Tdat& _value, const nlohmann::json& _json) {
                    return slv::rw::json::readJson(_value, _json);
                }
            };

        }
    }
}

#endif

#define EXPAND(arg) arg
#define glvm_pv_parametrization_constructor(\
_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24,\
macro_arg, ...) macro_arg

/*! Define parametrization constructor.*/
#define glvm_parametrization_constructor(...) EXPAND( glvm_pv_parametrization_constructor(__VA_ARGS__,\
glvm_parametrization24_constructor,\
glvm_parametrization23_constructor,\
glvm_parametrization22_constructor,\
glvm_parametrization21_constructor,\
glvm_parametrization20_constructor,\
glvm_parametrization19_constructor,\
glvm_parametrization18_constructor,\
glvm_parametrization17_constructor,\
glvm_parametrization16_constructor,\
glvm_parametrization15_constructor,\
glvm_parametrization14_constructor,\
glvm_parametrization13_constructor,\
glvm_parametrization12_constructor,\
glvm_parametrization11_constructor,\
glvm_parametrization10_constructor,\
glvm_parametrization9_constructor,\
glvm_parametrization8_constructor,\
glvm_parametrization7_constructor,\
glvm_parametrization6_constructor,\
glvm_parametrization5_constructor,\
glvm_parametrization4_constructor,\
glvm_parametrization3_constructor,\
glvm_parametrization2_constructor,\
glvm_parametrization1_constructor)(__VA_ARGS__))

#define glvm_parametrization0_constructor()\
SlvParametrization0

#define glvm_parametrization1_constructor(\
param1_decl)\
SlvParametrization1<typename SlvPvClassParam_##param1_decl::Tparam>(new SlvPvClassParam_##param1_decl(this)\
)

#define glvm_parametrization2_constructor(\
param1_decl,\
param2_decl)\
SlvParametrization2<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this)\
)

#define glvm_parametrization3_constructor(\
param1_decl,\
param2_decl,\
param3_decl)\
SlvParametrization3<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this)\
)

#define glvm_parametrization4_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl)\
SlvParametrization4<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this)\
)

#define glvm_parametrization5_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl)\
SlvParametrization5<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this)\
)

#define glvm_parametrization6_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl)\
SlvParametrization6<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this)\
)

#define glvm_parametrization7_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl)\
SlvParametrization7<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this)\
)

#define glvm_parametrization8_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl)\
SlvParametrization8<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this)\
)

#define glvm_parametrization9_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl)\
SlvParametrization9<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this)\
)

#define glvm_parametrization10_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl)\
SlvParametrization10<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this)\
)

#define glvm_parametrization11_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl)\
SlvParametrization11<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this)\
)

#define glvm_parametrization12_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl)\
SlvParametrization12<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this)\
)

#define glvm_parametrization13_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl)\
SlvParametrization13<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this)\
)

#define glvm_parametrization14_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl)\
SlvParametrization14<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this)\
)

#define glvm_parametrization15_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl)\
SlvParametrization15<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this)\
)

#define glvm_parametrization16_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl)\
SlvParametrization16<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this)\
)

#define glvm_parametrization17_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl)\
SlvParametrization17<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this)\
)

#define glvm_parametrization18_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl)\
SlvParametrization18<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this)\
)

#define glvm_parametrization19_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl,\
param19_decl)\
SlvParametrization19<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam, typename SlvPvClassParam_##param19_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this),\
new SlvPvClassParam_##param19_decl(this)\
)

#define glvm_parametrization20_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl,\
param19_decl,\
param20_decl)\
SlvParametrization20<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam, typename SlvPvClassParam_##param19_decl::Tparam, typename SlvPvClassParam_##param20_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this),\
new SlvPvClassParam_##param19_decl(this),\
new SlvPvClassParam_##param20_decl(this)\
)

#define glvm_parametrization21_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl,\
param19_decl,\
param20_decl,\
param21_decl)\
SlvParametrization21<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam, typename SlvPvClassParam_##param19_decl::Tparam, typename SlvPvClassParam_##param20_decl::Tparam, typename SlvPvClassParam_##param21_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this),\
new SlvPvClassParam_##param19_decl(this),\
new SlvPvClassParam_##param20_decl(this),\
new SlvPvClassParam_##param21_decl(this)\
)

#define glvm_parametrization22_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl,\
param19_decl,\
param20_decl,\
param21_decl,\
param22_decl)\
SlvParametrization22<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam, typename SlvPvClassParam_##param19_decl::Tparam, typename SlvPvClassParam_##param20_decl::Tparam, typename SlvPvClassParam_##param21_decl::Tparam, typename SlvPvClassParam_##param22_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this),\
new SlvPvClassParam_##param19_decl(this),\
new SlvPvClassParam_##param20_decl(this),\
new SlvPvClassParam_##param21_decl(this),\
new SlvPvClassParam_##param22_decl(this)\
)

#define glvm_parametrization23_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl,\
param19_decl,\
param20_decl,\
param21_decl,\
param22_decl,\
param23_decl)\
SlvParametrization23<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam, typename SlvPvClassParam_##param19_decl::Tparam, typename SlvPvClassParam_##param20_decl::Tparam, typename SlvPvClassParam_##param21_decl::Tparam, typename SlvPvClassParam_##param22_decl::Tparam, typename SlvPvClassParam_##param23_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this),\
new SlvPvClassParam_##param19_decl(this),\
new SlvPvClassParam_##param20_decl(this),\
new SlvPvClassParam_##param21_decl(this),\
new SlvPvClassParam_##param22_decl(this),\
new SlvPvClassParam_##param23_decl(this)\
)

#define glvm_parametrization24_constructor(\
param1_decl,\
param2_decl,\
param3_decl,\
param4_decl,\
param5_decl,\
param6_decl,\
param7_decl,\
param8_decl,\
param9_decl,\
param10_decl,\
param11_decl,\
param12_decl,\
param13_decl,\
param14_decl,\
param15_decl,\
param16_decl,\
param17_decl,\
param18_decl,\
param19_decl,\
param20_decl,\
param21_decl,\
param22_decl,\
param23_decl,\
param24_decl)\
SlvParametrization24<typename SlvPvClassParam_##param1_decl::Tparam, typename SlvPvClassParam_##param2_decl::Tparam, typename SlvPvClassParam_##param3_decl::Tparam, typename SlvPvClassParam_##param4_decl::Tparam, typename SlvPvClassParam_##param5_decl::Tparam, typename SlvPvClassParam_##param6_decl::Tparam, typename SlvPvClassParam_##param7_decl::Tparam, typename SlvPvClassParam_##param8_decl::Tparam, typename SlvPvClassParam_##param9_decl::Tparam, typename SlvPvClassParam_##param10_decl::Tparam, typename SlvPvClassParam_##param11_decl::Tparam, typename SlvPvClassParam_##param12_decl::Tparam, typename SlvPvClassParam_##param13_decl::Tparam, typename SlvPvClassParam_##param14_decl::Tparam, typename SlvPvClassParam_##param15_decl::Tparam, typename SlvPvClassParam_##param16_decl::Tparam, typename SlvPvClassParam_##param17_decl::Tparam, typename SlvPvClassParam_##param18_decl::Tparam, typename SlvPvClassParam_##param19_decl::Tparam, typename SlvPvClassParam_##param20_decl::Tparam, typename SlvPvClassParam_##param21_decl::Tparam, typename SlvPvClassParam_##param22_decl::Tparam, typename SlvPvClassParam_##param23_decl::Tparam, typename SlvPvClassParam_##param24_decl::Tparam>(new SlvPvClassParam_##param1_decl(this),\
new SlvPvClassParam_##param2_decl(this),\
new SlvPvClassParam_##param3_decl(this),\
new SlvPvClassParam_##param4_decl(this),\
new SlvPvClassParam_##param5_decl(this),\
new SlvPvClassParam_##param6_decl(this),\
new SlvPvClassParam_##param7_decl(this),\
new SlvPvClassParam_##param8_decl(this),\
new SlvPvClassParam_##param9_decl(this),\
new SlvPvClassParam_##param10_decl(this),\
new SlvPvClassParam_##param11_decl(this),\
new SlvPvClassParam_##param12_decl(this),\
new SlvPvClassParam_##param13_decl(this),\
new SlvPvClassParam_##param14_decl(this),\
new SlvPvClassParam_##param15_decl(this),\
new SlvPvClassParam_##param16_decl(this),\
new SlvPvClassParam_##param17_decl(this),\
new SlvPvClassParam_##param18_decl(this),\
new SlvPvClassParam_##param19_decl(this),\
new SlvPvClassParam_##param20_decl(this),\
new SlvPvClassParam_##param21_decl(this),\
new SlvPvClassParam_##param22_decl(this),\
new SlvPvClassParam_##param23_decl(this),\
new SlvPvClassParam_##param24_decl(this)\
)

#define glvm_parametrization_name(_name)\
glvm_staticVariable_const_get(std::string, name, _name);

#define glvm_parametrization0_static_init \
public:\
static bool has_rules() {\
return false;\
}\
private:

#define glvm_parametrization0_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization0_static_init

#define glvm_parametrization1_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules();\
}\
private:

#define glvm_parametrization1_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization1_static_init

#define glvm_parametrization2_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules();\
}\
private:

#define glvm_parametrization2_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization2_static_init

#define glvm_parametrization3_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules();\
}\
private:

#define glvm_parametrization3_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization3_static_init

#define glvm_parametrization4_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules();\
}\
private:

#define glvm_parametrization4_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization4_static_init

#define glvm_parametrization5_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules();\
}\
private:

#define glvm_parametrization5_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization5_static_init

#define glvm_parametrization6_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules();\
}\
private:

#define glvm_parametrization6_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization6_static_init

#define glvm_parametrization7_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules();\
}\
private:

#define glvm_parametrization7_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization7_static_init

#define glvm_parametrization8_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules();\
}\
private:

#define glvm_parametrization8_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization8_static_init

#define glvm_parametrization9_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules();\
}\
private:

#define glvm_parametrization9_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization9_static_init

#define glvm_parametrization10_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules();\
}\
private:

#define glvm_parametrization10_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization10_static_init

#define glvm_parametrization11_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules();\
}\
private:

#define glvm_parametrization11_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization11_static_init

#define glvm_parametrization12_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules();\
}\
private:

#define glvm_parametrization12_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization12_static_init

#define glvm_parametrization13_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules();\
}\
private:

#define glvm_parametrization13_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization13_static_init

#define glvm_parametrization14_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules();\
}\
private:

#define glvm_parametrization14_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization14_static_init

#define glvm_parametrization15_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules();\
}\
private:

#define glvm_parametrization15_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization15_static_init

#define glvm_parametrization16_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules();\
}\
private:

#define glvm_parametrization16_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization16_static_init

#define glvm_parametrization17_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules();\
}\
private:

#define glvm_parametrization17_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization17_static_init

#define glvm_parametrization18_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules();\
}\
private:

#define glvm_parametrization18_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization18_static_init

#define glvm_parametrization19_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules()\
 || Tpv_parameter19::has_rules();\
}\
private:

#define glvm_parametrization19_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization19_static_init

#define glvm_parametrization20_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules()\
 || Tpv_parameter19::has_rules()\
 || Tpv_parameter20::has_rules();\
}\
private:

#define glvm_parametrization20_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization20_static_init

#define glvm_parametrization21_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules()\
 || Tpv_parameter19::has_rules()\
 || Tpv_parameter20::has_rules()\
 || Tpv_parameter21::has_rules();\
}\
private:

#define glvm_parametrization21_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization21_static_init

#define glvm_parametrization22_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules()\
 || Tpv_parameter19::has_rules()\
 || Tpv_parameter20::has_rules()\
 || Tpv_parameter21::has_rules()\
 || Tpv_parameter22::has_rules();\
}\
private:

#define glvm_parametrization22_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization22_static_init

#define glvm_parametrization23_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules()\
 || Tpv_parameter19::has_rules()\
 || Tpv_parameter20::has_rules()\
 || Tpv_parameter21::has_rules()\
 || Tpv_parameter22::has_rules()\
 || Tpv_parameter23::has_rules();\
}\
private:

#define glvm_parametrization23_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization23_static_init

#define glvm_parametrization24_static_init \
public:\
static bool has_rules() {\
return Tpv_parameter1::has_rules()\
 || Tpv_parameter2::has_rules()\
 || Tpv_parameter3::has_rules()\
 || Tpv_parameter4::has_rules()\
 || Tpv_parameter5::has_rules()\
 || Tpv_parameter6::has_rules()\
 || Tpv_parameter7::has_rules()\
 || Tpv_parameter8::has_rules()\
 || Tpv_parameter9::has_rules()\
 || Tpv_parameter10::has_rules()\
 || Tpv_parameter11::has_rules()\
 || Tpv_parameter12::has_rules()\
 || Tpv_parameter13::has_rules()\
 || Tpv_parameter14::has_rules()\
 || Tpv_parameter15::has_rules()\
 || Tpv_parameter16::has_rules()\
 || Tpv_parameter17::has_rules()\
 || Tpv_parameter18::has_rules()\
 || Tpv_parameter19::has_rules()\
 || Tpv_parameter20::has_rules()\
 || Tpv_parameter21::has_rules()\
 || Tpv_parameter22::has_rules()\
 || Tpv_parameter23::has_rules()\
 || Tpv_parameter24::has_rules();\
}\
private:

#define glvm_parametrization24_init(_name)\
glvm_parametrization_name(_name);\
glvm_parametrization24_static_init

#define glvm_parametrization1_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;

#define glvm_parametrization2_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;

#define glvm_parametrization3_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;

#define glvm_parametrization4_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;

#define glvm_parametrization5_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;

#define glvm_parametrization6_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;

#define glvm_parametrization7_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;

#define glvm_parametrization8_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;

#define glvm_parametrization9_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;

#define glvm_parametrization10_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;

#define glvm_parametrization11_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;

#define glvm_parametrization12_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;

#define glvm_parametrization13_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;

#define glvm_parametrization14_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;

#define glvm_parametrization15_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;

#define glvm_parametrization16_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;

#define glvm_parametrization17_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;

#define glvm_parametrization18_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;

#define glvm_parametrization19_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;\
using typename base_class::Tpv_parameter19;

#define glvm_parametrization20_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;\
using typename base_class::Tpv_parameter19;\
using typename base_class::Tpv_parameter20;

#define glvm_parametrization21_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;\
using typename base_class::Tpv_parameter19;\
using typename base_class::Tpv_parameter20;\
using typename base_class::Tpv_parameter21;

#define glvm_parametrization22_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;\
using typename base_class::Tpv_parameter19;\
using typename base_class::Tpv_parameter20;\
using typename base_class::Tpv_parameter21;\
using typename base_class::Tpv_parameter22;

#define glvm_parametrization23_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;\
using typename base_class::Tpv_parameter19;\
using typename base_class::Tpv_parameter20;\
using typename base_class::Tpv_parameter21;\
using typename base_class::Tpv_parameter22;\
using typename base_class::Tpv_parameter23;

#define glvm_parametrization24_inherited_template_init(base_class)\
using typename base_class::Tpv_parameter1;\
using typename base_class::Tpv_parameter2;\
using typename base_class::Tpv_parameter3;\
using typename base_class::Tpv_parameter4;\
using typename base_class::Tpv_parameter5;\
using typename base_class::Tpv_parameter6;\
using typename base_class::Tpv_parameter7;\
using typename base_class::Tpv_parameter8;\
using typename base_class::Tpv_parameter9;\
using typename base_class::Tpv_parameter10;\
using typename base_class::Tpv_parameter11;\
using typename base_class::Tpv_parameter12;\
using typename base_class::Tpv_parameter13;\
using typename base_class::Tpv_parameter14;\
using typename base_class::Tpv_parameter15;\
using typename base_class::Tpv_parameter16;\
using typename base_class::Tpv_parameter17;\
using typename base_class::Tpv_parameter18;\
using typename base_class::Tpv_parameter19;\
using typename base_class::Tpv_parameter20;\
using typename base_class::Tpv_parameter21;\
using typename base_class::Tpv_parameter22;\
using typename base_class::Tpv_parameter23;\
using typename base_class::Tpv_parameter24;

/*! Parametrization for 0 parameter.
* All classes inheriting SlvParametrization** must have default constructor () */
class SlvParametrization0 : public SlvParametrization_base {

protected:

	SlvParametrization0();
	SlvParametrization0(const SlvParametrization0& _parametrization);
	~SlvParametrization0();

public:

	void operator=(const SlvParametrization0& _parametrization);
protected:
	void param_assign_rec(const SlvParametrization0& _parametrization);
public:
	void set_parameter_values(bool _l_param_only = true);

	SlvStatus check_parameters() const;
	bool abide_rules();

	bool operator==(const SlvParametrization0& _parametrization) const;
	bool operator!=(const SlvParametrization0& _parametrization) const;
	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro classParameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const;

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const;
	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const;
protected:
	void ostream(std::ostream& _os) const;
	void istream_rec(std::istream& _is);
	void istream(std::istream& _is);
public:
	void writeB(std::ofstream& _output_file) const;
protected:
	bool readB_rec(std::ifstream& _input_file);
public:
	bool readB(std::ifstream& _input_file);

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const;
	SlvStatus readJson(const nlohmann::json& _json);
#endif

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 0);
	typedef SlvParametrization0 Tparametrization;

	Tparametrization& param_cast();
	const Tparametrization& param_cast() const;

	/*! Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Taprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {}

};

#define glvm_pv_SlvParametrization_id_str(N, string) string += ", "+slv::string::to_id_str(parameter##N->get_value());
#define glvm_pv_SlvParametrization_ostream(N) _os << STRINGIFY(parameter##N) << " : " << *parameter##N << std::endl;
#define glvm_pv_SlvParametrization_istream(N) std::cout << STRINGIFY(parameter##N) << "; "; _is >> *const_cast<SlvParameter<T##N>*>(parameter##N);
#define glvm_pv_SlvParametrization_writeB(N) parameter##N->writeB(_output_file);
#define glvm_pv_SlvParametrization_readB(N) const_cast<SlvParameter<T##N>*>(parameter##N)->readB(_input_file)
#if OPTION_USE_THIRDPARTY_JSON==1
#define glvm_pv_SlvParametrization_writeJson(N) slv::rw::json::writeJson(parameter##N->get_value(), _json[this->get_name()][parameter##N->get_name()]);
#define glvm_pv_SlvParametrization_readJson(N)\
if (status.get_type() != SlvStatus::statusType::critical) {\
	nlohmann::json::const_iterator it_main = _json.find(this->get_name());\
	if (it_main != _json.end()) {\
		nlohmann::json::const_iterator it = it_main->find(parameter##N->get_name());\
		SlvStatus status_parameter;\
		if (it != it_main->end()) {\
			T##N value = parameter##N->get_default_value();\
			SlvStatus status_json = slv::rw::json::readJson(value, *it);\
			if (status_json) {\
				const_cast<SlvParameter<T##N>*>(parameter##N)->set_value(value);\
			} else {\
				status_parameter = SlvStatus(SlvStatus::statusType::warning, "Problem reading parameter : " + parameter##N->get_name());\
				status_parameter.add_sub_status(status_json);\
			}\
		} else {\
			status_parameter = SlvStatus(SlvStatus::statusType::warning, "Can not find parameter : " + parameter##N->get_name());\
		}\
		if (!status_parameter) {\
			status += SlvStatus(SlvStatus::statusType::warning, "Problem reading parametrization : " + this->get_name());\
			status.add_sub_status(status_parameter);\
		}\
	}\
}
#endif

#define glvm_pv_SlvParametrization_abide(current, previous_parametrization) \
bool abide_rules() {\
    bool l_abide_rules = previous_parametrization::abide_rules();\
    l_abide_rules &= const_cast<SlvParameter<T##current>*>(parameter##current)->abide_rules();\
	return l_abide_rules;\
}

class SlvParametrization_base;

/*! Parameter class. Is inherited by parameters created in SlvParametrization**.*/
template <class Tparam>
class SlvParameter : public SlvParameter_base {

private:

    /*! Parameter value.*/
    Tparam value;
    /*! Rules depending on another parameter.*/
    std::vector< SlvParameterRuleT< SlvParameter<Tparam> > > dynamic_rules;

protected:

    SlvParameter(SlvParametrization_base* _parametrization, Tparam _value);
public:
    ~SlvParameter();

    virtual SlvParameter<Tparam>* clone(SlvParametrization_base* _parametrization) const = 0;

    /*! Assign parameter value. In case Tparam derives from SlvParametrization, only the parameters are set.*/
    void operator=(const SlvParameter<Tparam>& _parameter);

    /*! Get parameter value.*/
    const Tparam& get_value() const;
    /*! Set parameter value. In case Tparam derives from SlvParametrization, if \p _l_param_only is true, then only the parameters are set.*/
    void set_value(const Tparam& _value, bool _l_param_only = true);
    /*! Get default value as set by the static parameter.*/
    virtual const Tparam& get_default_value() const = 0;

    /*! Check if rules are abided for this parameter. Rules can either depend only the parameter or either depend on other ones.*/
    SlvStatus check_rules() const;

    /*! Abide the rules of the parameter. Its value can change.*/
    bool abide_rules();

    bool operator==(const SlvParameter<Tparam>& _parameter) const;
    bool operator!=(const SlvParameter<Tparam>& _parameter) const;

    /*! Add a dynamic rule depending on other paramters.*/
    void add_dynamic_rule(const SlvParameterRuleT< SlvParameter<Tparam> >& _dynamic_rule);

    /*! Get rules depending only on this parameter.*/
    virtual const std::vector< SlvParameterRuleT<Tparam> >& get_rules() const = 0;
    /*! Get rules depending on other parameters.*/
    const std::vector< SlvParameterRuleT< SlvParameter<Tparam> > >& get_dynamic_rules() const;
    /*! Get description of each rule of the parameter.*/
    std::vector<std::string> get_rules_description() const;

    bool readB(std::ifstream& _input_file);
    void writeB(std::ofstream& _output_file) const;

protected:

    void istream(std::istream& _is);
    void ostream(std::ostream& _os) const;

private:

    /*! Static cast attempt of parameter value. Returns NULL if the parameter value is not a parametrization.*/
    const SlvParametrization_base* parametrization_cast() const;

};

template <class Tparam>
struct SlvParameterSpecSerialization {
    static std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(const SlvParameter<Tparam>& _parameter);
};

template <>
struct SlvParameterSpecSerialization<bool>;

template <class Tparam>
struct SlvParameterSpecIstream {
    static void istream(Tparam& _parameter_value, std::istream& _is) {
        _is >> _parameter_value;
    }
};

/*! std::string specialization because _is >> _parameter_value does not manage space.*/
template <>
struct SlvParameterSpecIstream<std::string> {
    static void istream(std::string& _parameter_value, std::istream& _is) {
        slv::string::istream(_is, _parameter_value);
    }
};

template <class Tparam, typename = void>
struct SlvParameterSpec {
    static void assign(Tparam& _parameter_value1, const Tparam& _parameter_value2, bool _l_param_only) {
        _parameter_value1 = _parameter_value2;
    }
    static bool readB(Tparam& _parameter_value, std::ifstream& _input_file) {
        return slv::rw::readB(_parameter_value, _input_file);
    }
    static void writeB(const Tparam& _parameter_value, std::ofstream& _output_file) {
        slv::rw::writeB(_parameter_value, _output_file);
    }
    static void istream(Tparam& _parameter_value, std::istream& _is) {
        SlvParameterSpecIstream<Tparam>::istream(_parameter_value, _is);
    }
    static void ostream(const Tparam& _parameter_value, std::ostream& _os) {
        _os << _parameter_value;
    }
    static bool is_equal(const Tparam& _parameter_value1, const Tparam& _parameter_value2) {
        return _parameter_value1 == _parameter_value2;
    }
    static std::vector< std::pair<std::string, std::string> > get_string_serialization(const SlvParameter<Tparam>& _parameter) {
        return { {_parameter.get_name(), slv::string::to_string(_parameter.get_value())} };
    }
    static std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(const SlvParameter<Tparam>& _parameter) {
        return SlvParameterSpecSerialization<Tparam>::get_string_serialization_bool(_parameter);
    }
    static const SlvParametrization_base* parametrization_cast(const Tparam& _parameter_value) {
        return NULL;
    }
};

template <class Tparam>
std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > SlvParameterSpecSerialization<Tparam>::get_string_serialization_bool(const SlvParameter<Tparam>& _parameter) {
    return { { SlvParameterSpec<Tparam>::get_string_serialization(_parameter) }, {} };
}

template <>
struct SlvParameterSpecSerialization<bool> {
    static std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(const SlvParameter<bool>& _parameter) {
        std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization;
        if (_parameter.get_value()) {
            serialization.second.push_back(_parameter.get_name());
        }
        return serialization;
    }
};

template <class Tparam>
struct SlvParameterSpec<Tparam, typename std::enable_if<SlvIsParametrization<Tparam>::value>::type> {
    static void assign(Tparam& _parameter_value1, const Tparam& _parameter_value2, bool _l_param_only) {
        if (_l_param_only) {
            _parameter_value1.param_assign(_parameter_value2);
        } else {
            _parameter_value1 = _parameter_value2;
        }
    }
    static bool readB(Tparam& _parameter_value, std::ifstream& _input_file) {
        bool l_read = slv::rw::readB(_parameter_value.param_cast(), _input_file);// param only
        _parameter_value.param_init();
        return l_read;
    }
    static void writeB(const Tparam& _parameter_value, std::ofstream& _output_file) {
        slv::rw::writeB(_parameter_value.param_cast(), _output_file);// param only
    }
    static void istream(Tparam& _parameter_value, std::istream& _is) {
        _is >> _parameter_value.param_cast();
    }
    static void ostream(const Tparam& _parameter_value, std::ostream& _os) {
        _os << _parameter_value.param_cast();
    }
    static bool is_equal(const Tparam& _parameter_value1, const Tparam& _parameter_value2) {
        return _parameter_value1.param_cast() == _parameter_value2.param_cast();
    }
    static std::vector< std::pair<std::string, std::string> > get_string_serialization(const SlvParameter<Tparam>& _parameter) {
        return _parameter.get_value().param_cast().get_string_serialization();
    }
    static std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(const SlvParameter<Tparam>& _parameter) {
        return _parameter.get_value().param_cast().get_string_serialization_bool();
    }
    static const SlvParametrization_base* parametrization_cast(const Tparam& _parameter_value) {
        return static_cast<const SlvParametrization_base*>(&_parameter_value);
    }
};

template <class Tparam>
SlvParameter<Tparam>::SlvParameter(SlvParametrization_base* _parametrization, Tparam _value) :value(_value), SlvParameter_base(_parametrization) {

}

template <class Tparam>
SlvParameter<Tparam>::~SlvParameter() {

}

template <class Tparam>
void SlvParameter<Tparam>::operator=(const SlvParameter<Tparam>& _parameter) {
    set_value(_parameter.value, true);
}

template <class Tparam>
const Tparam& SlvParameter<Tparam>::get_value() const {
    return value;
}

template <class Tparam>
void SlvParameter<Tparam>::set_value(const Tparam& _value, bool _l_param_only) {
    bool l_diff = !SlvParameterSpec<Tparam>::is_equal(_value, value);
    if (l_diff) {
        SlvParameterSpec<Tparam>::assign(value, _value, _l_param_only);
        if (this->is_param_init_auto()) parametrization->param_init();
    }
}

template <class Tparam>
SlvStatus SlvParameter<Tparam>::check_rules() const {
    SlvStatus status;
    for (unsigned int r = 0; r < get_rules().size(); r++) {
        status += get_rules()[r].is_abided(this);
    }
    for (unsigned int r = 0; r < get_dynamic_rules().size(); r++) {
        status += get_dynamic_rules()[r].is_abided(this);
    }
    return status;
}

template <class Tparam>
bool SlvParameter<Tparam>::abide_rules() {

    bool l_abide_global = true;

    // Maximum attemps
    int Nmax_loops = 20;

    // If one rules need abiding, then all rules are checked again.
    bool l_abide = false;// for initialization
    int i = 0;
    while (!l_abide && i < Nmax_loops) {
        l_abide = true;

        for (unsigned int r = 0; r < get_rules().size(); r++) {
            l_abide &= get_rules()[r].abide(this);
        }

        i++;
        l_abide_global &= l_abide;//if l_abide is false at some point, l_abide_global will be too
    }

    return l_abide_global;
}

template <class Tparam>
bool SlvParameter<Tparam>::operator==(const SlvParameter<Tparam>& _parameter) const {
    return SlvParameterSpec<Tparam>::is_equal(value, _parameter.value);
}

template <class Tparam>
bool SlvParameter<Tparam>::operator!=(const SlvParameter<Tparam>& _parameter) const {
    return !(*this == _parameter);
}

template <class Tparam>
void SlvParameter<Tparam>::add_dynamic_rule(const SlvParameterRuleT< SlvParameter<Tparam> >& _dynamic_rule) {
    dynamic_rules.push_back(_dynamic_rule);
}

template <class Tparam>
const std::vector< SlvParameterRuleT< SlvParameter<Tparam> > >& SlvParameter<Tparam>::get_dynamic_rules() const {
    return dynamic_rules;
}

template <class Tparam>
std::vector<std::string> SlvParameter<Tparam>::get_rules_description() const {

    std::vector<std::string> descriptions;
    for (typename std::vector< SlvParameterRuleT<Tparam> >::const_iterator it = get_rules().begin(); it != get_rules().end(); ++it) {
        descriptions.push_back((*it).get_rule_description());
    }
    return descriptions;

}

template <class Tparam>
const SlvParametrization_base* SlvParameter<Tparam>::parametrization_cast() const {

    return SlvParameterSpec<Tparam>::parametrization_cast(value);

}

template <class Tparam>
bool SlvParameter<Tparam>::readB(std::ifstream& _input_file) {

    return SlvParameterSpec<Tparam>::readB(value, _input_file);

}

template <class Tparam>
void SlvParameter<Tparam>::writeB(std::ofstream& _output_file) const {

    SlvParameterSpec<Tparam>::writeB(value, _output_file);

}

template <class Tparam>
void SlvParameter<Tparam>::istream(std::istream& _is) {

    std::cout << "Enter value of " << get_name() << " (type: " << SlvDataName<Tparam>::name() << ") : ";
    SlvParameterSpec<Tparam>::istream(value, _is);

}

template <class Tparam>
void SlvParameter<Tparam>::ostream(std::ostream& _os) const {

    _os << get_name() << " : ";
    SlvParameterSpec<Tparam>::ostream(value, _os);

}

#define glvm_pv_get_macro_parameter(_1,_2,_3,_4,_5,_6,_7,macro,...) macro
#define glvm_parameter(...) EXPAND( glvm_pv_get_macro_parameter(__VA_ARGS__, glvm_pv_parameter7, glvm_pv_parameter6, glvm_pv_parameter5, glvm_pv_parameter4)(__VA_ARGS__) )//EXPAND because of msvc bug

#define glvm_pv_parameter4(parameter_number, class_name, class_type, parameter_name) \
glvm_pv_parameter5(parameter_number, class_name, class_type, parameter_name, "")

#define glvm_pv_parameter5(parameter_number, class_name, class_type, parameter_name, parameter_description) \
glvm_pv_parameter6(parameter_number, class_name, class_type, parameter_name, parameter_description, class_type())

#define glvm_pv_parameter6(parameter_number, class_name, class_type, parameter_name, parameter_description, _default_value) \
glvm_pv_parameter7(parameter_number, class_name, class_type, parameter_name, parameter_description, _default_value, SlvParameter<class_type>::default_marker_value())

#define glvm_pv_parameter7(parameter_number, class_name, class_type, parameter_name, parameter_description, _default_value, marker_value) \
private:\
class SlvPvClassParam_##class_name : public SlvParameter<class_type> {\
public:\
SlvPvClassParam_##class_name(SlvParametrization_base* _parametrization, class_type _value = default_value()):SlvParameter<class_type>(_parametrization, _value){ this->abide_rules();}\
~SlvPvClassParam_##class_name(){}\
virtual SlvPvClassParam_##class_name* clone(SlvParametrization_base* _parametrization) const {\
SlvPvClassParam_##class_name* clone_parameter = new SlvPvClassParam_##class_name(*this);\
clone_parameter->parametrization = _parametrization;\
return clone_parameter;\
}\
glvm_staticVariable_const_get(std::string, name, parameter_name)\
glvm_staticVariable_const_get(std::string, description, parameter_description)\
glvm_staticVariable_const_get(class_type, default_value, _default_value)\
glvm_staticVariable_const_get(std::vector< SlvParameterRuleT<class_type> >, rules, create_rules());\
unsigned int get_Nrules() const { return (unsigned int)rules().size(); }\
glvm_staticVariable_const_get(unsigned int, marker, marker_value)\
typedef class_type Tparam;\
private:\
void set_stream_value(const std::string& _string, bool _l_param_only) {\
class_type value_tmp(default_value()); std::istringstream iss(_string); SlvParameterSpec<class_type>::istream(value_tmp, iss);\
this->set_value(value_tmp, _l_param_only);\
}\
std::string get_stream_value(bool _l_param_only) const {\
std::ostringstream oss; oss << this->get_value(); return oss.str();\
}\
static std::vector< SlvParameterRuleT<class_type> > create_rules() {\
std::vector< SlvParameterRuleT<class_type> > rules;\
rules.push_back(SlvParameterRuleT<class_type>());/*default rule*/\
return rules;}\
glvm_staticVariable_const_get(bool, has_rules, false)\
};\
protected:\
typedef SlvPvClassParam_##class_name Tpv_parameter##parameter_number;\
public:\
const class_type& get_##class_name() const {return this->get_parameter##parameter_number().get_value();}\
void set_##class_name(const class_type& _class_name, bool _l_param_only = true) {\
this->set_parameter##parameter_number##_value(_class_name, _l_param_only);\
}\
static const std::string& get_##class_name##_pname() { return SlvPvClassParam_##class_name::name(); }\
private:

//RULED//
#define glvm_pv_get_macro_parameter_ruled(_1,_2,_3,_4,_5,_6,_7,macro,...) macro
#define glvm_parameter_ruled(...) EXPAND( glvm_pv_get_macro_parameter_ruled(__VA_ARGS__, glvm_pv_parameter_ruled7, glvm_pv_parameter_ruled6, glvm_pv_parameter_ruled5, glvm_pv_parameter_ruled4)(__VA_ARGS__) )//EXPAND because of msvc bug

#define glvm_pv_parameter_ruled4(parameter_number, class_name, class_type, parameter_name) \
glvm_pv_parameter_ruled5(parameter_number, class_name, class_type, parameter_name, "")

#define glvm_pv_parameter_ruled5(parameter_number, class_name, class_type, parameter_name, parameter_description) \
glvm_pv_parameter_ruled6(parameter_number, class_name, class_type, parameter_name, parameter_description, class_type())

#define glvm_pv_parameter_ruled6(parameter_number, class_name, class_type, parameter_name, parameter_description, _default_value) \
glvm_pv_parameter_ruled7(parameter_number, class_name, class_type, parameter_name, parameter_description, _default_value, SlvParameter<class_type>::default_marker_value())

//open macro
#define glvm_pv_parameter_ruled7(parameter_number, class_name, class_type, parameter_name, parameter_description, _default_value, marker_value) \
private:\
class SlvPvClassParam_##class_name;/*forward declaration to let upcoming implementation 'open'*/\
protected:\
typedef SlvPvClassParam_##class_name Tpv_parameter##parameter_number;\
public:\
const class_type& get_##class_name() const {return this->get_parameter##parameter_number().get_value();}\
private:\
void set_##class_name##_unruled_pv(const class_type& _class_name, bool _l_param_only, bool _l_param_init) {\
this->set_parameter##parameter_number##_value(_class_name, _l_param_only);}\
public:\
void set_##class_name##_unruled(const class_type& _class_name, bool _l_param_only = true) { set_##class_name##_unruled_pv(_class_name, _l_param_only, true);}\
static const std::string& get_##class_name##_pname() { return SlvPvClassParam_##class_name::name(); }\
SlvStatus set_##class_name(const class_type& _class_name, bool _l_param_only = true) {\
class_type value_tmp = get_##class_name();\
set_##class_name##_unruled_pv(_class_name, _l_param_only, false);\
SlvStatus status = this->get_parameter##parameter_number().check_rules();\
if (!status) { set_##class_name##_unruled(value_tmp, _l_param_only); }\
return status;\
;}\
private:\
class SlvPvClassParam_##class_name : public SlvParameter<class_type> {\
public:\
SlvPvClassParam_##class_name(SlvParametrization_base* _parametrization, class_type _value = default_value()):SlvParameter<class_type>(_parametrization, _value){}\
~SlvPvClassParam_##class_name(){}\
virtual SlvPvClassParam_##class_name* clone(SlvParametrization_base* _parametrization) const {\
SlvPvClassParam_##class_name* clone_parameter = new SlvPvClassParam_##class_name(*this);\
clone_parameter->parametrization = _parametrization;\
return clone_parameter;\
}\
glvm_staticVariable_const_get(std::string, name, parameter_name)\
glvm_staticVariable_const_get(std::string, description, parameter_description)\
glvm_staticVariable_const_get(class_type, default_value, _default_value)\
glvm_staticVariable_const_get(std::vector< SlvParameterRuleT<class_type> >, rules, create_rules())\
unsigned int get_Nrules() const { return (unsigned int)rules().size(); }\
glvm_staticVariable_const_get(unsigned int, marker, marker_value)\
typedef class_type Tparam;\
glvm_staticVariable_const_get(bool, has_rules, rules().size() > 1)\
private:\
void set_stream_value(const std::string& _string, bool _l_param_only) {\
class_type value_tmp(default_value()); std::istringstream iss(_string); SlvParameterSpec<class_type>::istream(value_tmp, iss);\
this->set_value(value_tmp, _l_param_only);\
}\
std::string get_stream_value(bool _l_param_only) const {\
std::ostringstream oss; oss << this->get_value(); return oss.str();\
}\
static std::vector< SlvParameterRuleT<class_type> > create_rules() {\
std::vector< SlvParameterRuleT<class_type> > rules;\
rules.push_back(SlvParameterRuleT<Tparam>());

#define glvm_parameter_add_rule(rule_type, rule_value) \
rules.push_back(SlvParameterRuleT<Tparam>(SlvParameterRuleT<Tparam>::rule_type, rule_value));

#define glvm_parameter_end return rules;}};\
private:

/*! Add a dynamic rule linking two parameters. Has to be called in parameterized class's constructor.*/
#define glvm_parameter_addRuleParameter(parameter_name1, type, rule_type, parameter_name2) \
parameter_name1##_parameter().add_dynamic_rule(SlvParameterRuleT<SlvPvClassParam_##parameter_name1::Tparameter>(SlvParameterRuleT<ClassParam_##parameter_name1::Tparameter>::rule_type, &parameter_name2##_parameter()));

/*! Parametrization for 1 parameters.*/
template <class T1>
class SlvParametrization1 : public SlvParametrization0 {

	SlvParameter<T1>* parameter1;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 1);
	typedef SlvParametrization1<T1> Tparametrization;
	typedef SlvParametrization0 Tparametrization_lower;

protected: 

	SlvParametrization1(SlvParameter<T1>* _parameter1) :Tparametrization_lower(), parameter1(_parameter1) {
		SlvParametrization_base::parameters.push_back(parameter1);
	}

	SlvParametrization1(const SlvParametrization1& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter1 =  _parametrization.get_parameter1().clone(this);
		SlvParametrization_base::parameters.push_back(parameter1);
	}

	~SlvParametrization1() {
		delete parameter1;
	}

public: 

	Tparametrization& operator=(const SlvParametrization1& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization1& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter1 = _parametrization.get_parameter1();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_l_param_only);
		set_parameter1_value(_val1, _l_param_only);
	}

protected:
	void set_parameter1_value(const T1& _val1, bool _l_param_only = true) {
		parameter1->set_value(_val1, _l_param_only);
	}
public:

	const SlvParameter<T1>& get_parameter1() const {
		return *parameter1;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter1->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(1, Tparametrization_lower)

	bool operator==(const SlvParametrization1& _parametrization) const {
		return *parameter1 == *_parametrization.parameter1 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization1& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter1->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter1->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter1->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T1>::get_string_serialization(*parameter1));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter1->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T1>::get_string_serialization_bool(*parameter1);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(1)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(1)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(1);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(1);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(1)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(1)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization1<T1>, typename std::enable_if<!slv::rw::json::ReadWrite<T1>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization0>::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 2 parameters.*/
template <class T1, class T2>
class SlvParametrization2 : public SlvParametrization1<T1> {

	SlvParameter<T2>* parameter2;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 2);
	typedef SlvParametrization2<T1, T2> Tparametrization;
	typedef SlvParametrization1<T1> Tparametrization_lower;

protected: 

	SlvParametrization2(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2) :Tparametrization_lower(_parameter1), parameter2(_parameter2) {
		SlvParametrization_base::parameters.push_back(parameter2);
	}

	SlvParametrization2(const SlvParametrization2& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter2 =  _parametrization.get_parameter2().clone(this);
		SlvParametrization_base::parameters.push_back(parameter2);
	}

	~SlvParametrization2() {
		delete parameter2;
	}

public: 

	Tparametrization& operator=(const SlvParametrization2& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization2& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter2 = _parametrization.get_parameter2();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _l_param_only);
		set_parameter2_value(_val2, _l_param_only);
	}

protected:
	void set_parameter2_value(const T2& _val2, bool _l_param_only = true) {
		parameter2->set_value(_val2, _l_param_only);
	}
public:

	const SlvParameter<T2>& get_parameter2() const {
		return *parameter2;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter2->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(2, Tparametrization_lower)

	bool operator==(const SlvParametrization2& _parametrization) const {
		return *parameter2 == *_parametrization.parameter2 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization2& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter2->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter2->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter2->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T2>::get_string_serialization(*parameter2));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter2->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T2>::get_string_serialization_bool(*parameter2);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(2)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(2)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(2);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(2);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(2)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(2)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization2<T1, T2>, typename std::enable_if<!slv::rw::json::ReadWrite<T2>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization1<T1> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 3 parameters.*/
template <class T1, class T2, class T3>
class SlvParametrization3 : public SlvParametrization2<T1, T2> {

	SlvParameter<T3>* parameter3;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 3);
	typedef SlvParametrization3<T1, T2, T3> Tparametrization;
	typedef SlvParametrization2<T1, T2> Tparametrization_lower;

protected: 

	SlvParametrization3(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3) :Tparametrization_lower(_parameter1, _parameter2), parameter3(_parameter3) {
		SlvParametrization_base::parameters.push_back(parameter3);
	}

	SlvParametrization3(const SlvParametrization3& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter3 =  _parametrization.get_parameter3().clone(this);
		SlvParametrization_base::parameters.push_back(parameter3);
	}

	~SlvParametrization3() {
		delete parameter3;
	}

public: 

	Tparametrization& operator=(const SlvParametrization3& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization3& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter3 = _parametrization.get_parameter3();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _l_param_only);
		set_parameter3_value(_val3, _l_param_only);
	}

protected:
	void set_parameter3_value(const T3& _val3, bool _l_param_only = true) {
		parameter3->set_value(_val3, _l_param_only);
	}
public:

	const SlvParameter<T3>& get_parameter3() const {
		return *parameter3;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter3->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(3, Tparametrization_lower)

	bool operator==(const SlvParametrization3& _parametrization) const {
		return *parameter3 == *_parametrization.parameter3 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization3& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter3->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter3->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter3->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T3>::get_string_serialization(*parameter3));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter3->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T3>::get_string_serialization_bool(*parameter3);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(3)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(3)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(3);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(3);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(3)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(3)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization3<T1, T2, T3>, typename std::enable_if<!slv::rw::json::ReadWrite<T3>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization2<T1, T2> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 4 parameters.*/
template <class T1, class T2, class T3, class T4>
class SlvParametrization4 : public SlvParametrization3<T1, T2, T3> {

	SlvParameter<T4>* parameter4;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 4);
	typedef SlvParametrization4<T1, T2, T3, T4> Tparametrization;
	typedef SlvParametrization3<T1, T2, T3> Tparametrization_lower;

protected: 

	SlvParametrization4(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4) :Tparametrization_lower(_parameter1, _parameter2, _parameter3), parameter4(_parameter4) {
		SlvParametrization_base::parameters.push_back(parameter4);
	}

	SlvParametrization4(const SlvParametrization4& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter4 =  _parametrization.get_parameter4().clone(this);
		SlvParametrization_base::parameters.push_back(parameter4);
	}

	~SlvParametrization4() {
		delete parameter4;
	}

public: 

	Tparametrization& operator=(const SlvParametrization4& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization4& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter4 = _parametrization.get_parameter4();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _l_param_only);
		set_parameter4_value(_val4, _l_param_only);
	}

protected:
	void set_parameter4_value(const T4& _val4, bool _l_param_only = true) {
		parameter4->set_value(_val4, _l_param_only);
	}
public:

	const SlvParameter<T4>& get_parameter4() const {
		return *parameter4;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter4->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(4, Tparametrization_lower)

	bool operator==(const SlvParametrization4& _parametrization) const {
		return *parameter4 == *_parametrization.parameter4 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization4& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter4->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter4->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter4->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T4>::get_string_serialization(*parameter4));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter4->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T4>::get_string_serialization_bool(*parameter4);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(4)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(4)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(4);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(4);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(4)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(4)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization4<T1, T2, T3, T4>, typename std::enable_if<!slv::rw::json::ReadWrite<T4>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization3<T1, T2, T3> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 5 parameters.*/
template <class T1, class T2, class T3, class T4, class T5>
class SlvParametrization5 : public SlvParametrization4<T1, T2, T3, T4> {

	SlvParameter<T5>* parameter5;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 5);
	typedef SlvParametrization5<T1, T2, T3, T4, T5> Tparametrization;
	typedef SlvParametrization4<T1, T2, T3, T4> Tparametrization_lower;

protected: 

	SlvParametrization5(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4), parameter5(_parameter5) {
		SlvParametrization_base::parameters.push_back(parameter5);
	}

	SlvParametrization5(const SlvParametrization5& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter5 =  _parametrization.get_parameter5().clone(this);
		SlvParametrization_base::parameters.push_back(parameter5);
	}

	~SlvParametrization5() {
		delete parameter5;
	}

public: 

	Tparametrization& operator=(const SlvParametrization5& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization5& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter5 = _parametrization.get_parameter5();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _l_param_only);
		set_parameter5_value(_val5, _l_param_only);
	}

protected:
	void set_parameter5_value(const T5& _val5, bool _l_param_only = true) {
		parameter5->set_value(_val5, _l_param_only);
	}
public:

	const SlvParameter<T5>& get_parameter5() const {
		return *parameter5;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter5->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(5, Tparametrization_lower)

	bool operator==(const SlvParametrization5& _parametrization) const {
		return *parameter5 == *_parametrization.parameter5 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization5& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter5->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter5->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter5->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T5>::get_string_serialization(*parameter5));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter5->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T5>::get_string_serialization_bool(*parameter5);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(5)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(5)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(5);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(5);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(5)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(5)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization5<T1, T2, T3, T4, T5>, typename std::enable_if<!slv::rw::json::ReadWrite<T5>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization4<T1, T2, T3, T4> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 6 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6>
class SlvParametrization6 : public SlvParametrization5<T1, T2, T3, T4, T5> {

	SlvParameter<T6>* parameter6;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 6);
	typedef SlvParametrization6<T1, T2, T3, T4, T5, T6> Tparametrization;
	typedef SlvParametrization5<T1, T2, T3, T4, T5> Tparametrization_lower;

protected: 

	SlvParametrization6(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5), parameter6(_parameter6) {
		SlvParametrization_base::parameters.push_back(parameter6);
	}

	SlvParametrization6(const SlvParametrization6& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter6 =  _parametrization.get_parameter6().clone(this);
		SlvParametrization_base::parameters.push_back(parameter6);
	}

	~SlvParametrization6() {
		delete parameter6;
	}

public: 

	Tparametrization& operator=(const SlvParametrization6& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization6& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter6 = _parametrization.get_parameter6();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _l_param_only);
		set_parameter6_value(_val6, _l_param_only);
	}

protected:
	void set_parameter6_value(const T6& _val6, bool _l_param_only = true) {
		parameter6->set_value(_val6, _l_param_only);
	}
public:

	const SlvParameter<T6>& get_parameter6() const {
		return *parameter6;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter6->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(6, Tparametrization_lower)

	bool operator==(const SlvParametrization6& _parametrization) const {
		return *parameter6 == *_parametrization.parameter6 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization6& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter6->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter6->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter6->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T6>::get_string_serialization(*parameter6));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter6->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T6>::get_string_serialization_bool(*parameter6);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(6)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(6)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(6);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(6);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(6)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(6)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization6<T1, T2, T3, T4, T5, T6>, typename std::enable_if<!slv::rw::json::ReadWrite<T6>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization5<T1, T2, T3, T4, T5> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 7 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7>
class SlvParametrization7 : public SlvParametrization6<T1, T2, T3, T4, T5, T6> {

	SlvParameter<T7>* parameter7;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 7);
	typedef SlvParametrization7<T1, T2, T3, T4, T5, T6, T7> Tparametrization;
	typedef SlvParametrization6<T1, T2, T3, T4, T5, T6> Tparametrization_lower;

protected: 

	SlvParametrization7(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6), parameter7(_parameter7) {
		SlvParametrization_base::parameters.push_back(parameter7);
	}

	SlvParametrization7(const SlvParametrization7& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter7 =  _parametrization.get_parameter7().clone(this);
		SlvParametrization_base::parameters.push_back(parameter7);
	}

	~SlvParametrization7() {
		delete parameter7;
	}

public: 

	Tparametrization& operator=(const SlvParametrization7& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization7& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter7 = _parametrization.get_parameter7();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _l_param_only);
		set_parameter7_value(_val7, _l_param_only);
	}

protected:
	void set_parameter7_value(const T7& _val7, bool _l_param_only = true) {
		parameter7->set_value(_val7, _l_param_only);
	}
public:

	const SlvParameter<T7>& get_parameter7() const {
		return *parameter7;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter7->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(7, Tparametrization_lower)

	bool operator==(const SlvParametrization7& _parametrization) const {
		return *parameter7 == *_parametrization.parameter7 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization7& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter7->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter7->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter7->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T7>::get_string_serialization(*parameter7));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter7->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T7>::get_string_serialization_bool(*parameter7);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(7)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(7)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(7);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(7);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(7)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(7)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization7<T1, T2, T3, T4, T5, T6, T7>, typename std::enable_if<!slv::rw::json::ReadWrite<T7>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization6<T1, T2, T3, T4, T5, T6> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 8 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
class SlvParametrization8 : public SlvParametrization7<T1, T2, T3, T4, T5, T6, T7> {

	SlvParameter<T8>* parameter8;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 8);
	typedef SlvParametrization8<T1, T2, T3, T4, T5, T6, T7, T8> Tparametrization;
	typedef SlvParametrization7<T1, T2, T3, T4, T5, T6, T7> Tparametrization_lower;

protected: 

	SlvParametrization8(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7), parameter8(_parameter8) {
		SlvParametrization_base::parameters.push_back(parameter8);
	}

	SlvParametrization8(const SlvParametrization8& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter8 =  _parametrization.get_parameter8().clone(this);
		SlvParametrization_base::parameters.push_back(parameter8);
	}

	~SlvParametrization8() {
		delete parameter8;
	}

public: 

	Tparametrization& operator=(const SlvParametrization8& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization8& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter8 = _parametrization.get_parameter8();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _l_param_only);
		set_parameter8_value(_val8, _l_param_only);
	}

protected:
	void set_parameter8_value(const T8& _val8, bool _l_param_only = true) {
		parameter8->set_value(_val8, _l_param_only);
	}
public:

	const SlvParameter<T8>& get_parameter8() const {
		return *parameter8;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter8->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(8, Tparametrization_lower)

	bool operator==(const SlvParametrization8& _parametrization) const {
		return *parameter8 == *_parametrization.parameter8 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization8& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter8->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter8->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter8->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T8>::get_string_serialization(*parameter8));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter8->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T8>::get_string_serialization_bool(*parameter8);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(8)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(8)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(8);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(8);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(8)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(8)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization8<T1, T2, T3, T4, T5, T6, T7, T8>, typename std::enable_if<!slv::rw::json::ReadWrite<T8>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization7<T1, T2, T3, T4, T5, T6, T7> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 9 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
class SlvParametrization9 : public SlvParametrization8<T1, T2, T3, T4, T5, T6, T7, T8> {

	SlvParameter<T9>* parameter9;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 9);
	typedef SlvParametrization9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Tparametrization;
	typedef SlvParametrization8<T1, T2, T3, T4, T5, T6, T7, T8> Tparametrization_lower;

protected: 

	SlvParametrization9(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8), parameter9(_parameter9) {
		SlvParametrization_base::parameters.push_back(parameter9);
	}

	SlvParametrization9(const SlvParametrization9& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter9 =  _parametrization.get_parameter9().clone(this);
		SlvParametrization_base::parameters.push_back(parameter9);
	}

	~SlvParametrization9() {
		delete parameter9;
	}

public: 

	Tparametrization& operator=(const SlvParametrization9& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization9& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter9 = _parametrization.get_parameter9();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _l_param_only);
		set_parameter9_value(_val9, _l_param_only);
	}

protected:
	void set_parameter9_value(const T9& _val9, bool _l_param_only = true) {
		parameter9->set_value(_val9, _l_param_only);
	}
public:

	const SlvParameter<T9>& get_parameter9() const {
		return *parameter9;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter9->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(9, Tparametrization_lower)

	bool operator==(const SlvParametrization9& _parametrization) const {
		return *parameter9 == *_parametrization.parameter9 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization9& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter9->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter9->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter9->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T9>::get_string_serialization(*parameter9));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter9->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T9>::get_string_serialization_bool(*parameter9);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(9)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(9)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(9);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(9);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(9)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(9)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization9<T1, T2, T3, T4, T5, T6, T7, T8, T9>, typename std::enable_if<!slv::rw::json::ReadWrite<T9>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization8<T1, T2, T3, T4, T5, T6, T7, T8> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 10 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
class SlvParametrization10 : public SlvParametrization9<T1, T2, T3, T4, T5, T6, T7, T8, T9> {

	SlvParameter<T10>* parameter10;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 10);
	typedef SlvParametrization10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Tparametrization;
	typedef SlvParametrization9<T1, T2, T3, T4, T5, T6, T7, T8, T9> Tparametrization_lower;

protected: 

	SlvParametrization10(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9), parameter10(_parameter10) {
		SlvParametrization_base::parameters.push_back(parameter10);
	}

	SlvParametrization10(const SlvParametrization10& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter10 =  _parametrization.get_parameter10().clone(this);
		SlvParametrization_base::parameters.push_back(parameter10);
	}

	~SlvParametrization10() {
		delete parameter10;
	}

public: 

	Tparametrization& operator=(const SlvParametrization10& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization10& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter10 = _parametrization.get_parameter10();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _l_param_only);
		set_parameter10_value(_val10, _l_param_only);
	}

protected:
	void set_parameter10_value(const T10& _val10, bool _l_param_only = true) {
		parameter10->set_value(_val10, _l_param_only);
	}
public:

	const SlvParameter<T10>& get_parameter10() const {
		return *parameter10;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter10->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(10, Tparametrization_lower)

	bool operator==(const SlvParametrization10& _parametrization) const {
		return *parameter10 == *_parametrization.parameter10 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization10& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter10->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter10->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter10->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T10>::get_string_serialization(*parameter10));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter10->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T10>::get_string_serialization_bool(*parameter10);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(10)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(10)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(10);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(10);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(10)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(10)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>, typename std::enable_if<!slv::rw::json::ReadWrite<T10>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization9<T1, T2, T3, T4, T5, T6, T7, T8, T9> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 11 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
class SlvParametrization11 : public SlvParametrization10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> {

	SlvParameter<T11>* parameter11;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 11);
	typedef SlvParametrization11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tparametrization;
	typedef SlvParametrization10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Tparametrization_lower;

protected: 

	SlvParametrization11(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10), parameter11(_parameter11) {
		SlvParametrization_base::parameters.push_back(parameter11);
	}

	SlvParametrization11(const SlvParametrization11& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter11 =  _parametrization.get_parameter11().clone(this);
		SlvParametrization_base::parameters.push_back(parameter11);
	}

	~SlvParametrization11() {
		delete parameter11;
	}

public: 

	Tparametrization& operator=(const SlvParametrization11& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization11& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter11 = _parametrization.get_parameter11();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _l_param_only);
		set_parameter11_value(_val11, _l_param_only);
	}

protected:
	void set_parameter11_value(const T11& _val11, bool _l_param_only = true) {
		parameter11->set_value(_val11, _l_param_only);
	}
public:

	const SlvParameter<T11>& get_parameter11() const {
		return *parameter11;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter11->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(11, Tparametrization_lower)

	bool operator==(const SlvParametrization11& _parametrization) const {
		return *parameter11 == *_parametrization.parameter11 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization11& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter11->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter11->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter11->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T11>::get_string_serialization(*parameter11));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter11->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T11>::get_string_serialization_bool(*parameter11);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(11)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(11)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(11);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(11);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(11)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(11)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>, typename std::enable_if<!slv::rw::json::ReadWrite<T11>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 12 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
class SlvParametrization12 : public SlvParametrization11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> {

	SlvParameter<T12>* parameter12;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 12);
	typedef SlvParametrization12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tparametrization;
	typedef SlvParametrization11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Tparametrization_lower;

protected: 

	SlvParametrization12(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11), parameter12(_parameter12) {
		SlvParametrization_base::parameters.push_back(parameter12);
	}

	SlvParametrization12(const SlvParametrization12& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter12 =  _parametrization.get_parameter12().clone(this);
		SlvParametrization_base::parameters.push_back(parameter12);
	}

	~SlvParametrization12() {
		delete parameter12;
	}

public: 

	Tparametrization& operator=(const SlvParametrization12& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization12& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter12 = _parametrization.get_parameter12();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _l_param_only);
		set_parameter12_value(_val12, _l_param_only);
	}

protected:
	void set_parameter12_value(const T12& _val12, bool _l_param_only = true) {
		parameter12->set_value(_val12, _l_param_only);
	}
public:

	const SlvParameter<T12>& get_parameter12() const {
		return *parameter12;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter12->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(12, Tparametrization_lower)

	bool operator==(const SlvParametrization12& _parametrization) const {
		return *parameter12 == *_parametrization.parameter12 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization12& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter12->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter12->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter12->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T12>::get_string_serialization(*parameter12));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter12->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T12>::get_string_serialization_bool(*parameter12);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(12)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(12)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(12);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(12);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(12)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(12)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>, typename std::enable_if<!slv::rw::json::ReadWrite<T12>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 13 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
class SlvParametrization13 : public SlvParametrization12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> {

	SlvParameter<T13>* parameter13;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 13);
	typedef SlvParametrization13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tparametrization;
	typedef SlvParametrization12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Tparametrization_lower;

protected: 

	SlvParametrization13(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12), parameter13(_parameter13) {
		SlvParametrization_base::parameters.push_back(parameter13);
	}

	SlvParametrization13(const SlvParametrization13& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter13 =  _parametrization.get_parameter13().clone(this);
		SlvParametrization_base::parameters.push_back(parameter13);
	}

	~SlvParametrization13() {
		delete parameter13;
	}

public: 

	Tparametrization& operator=(const SlvParametrization13& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization13& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter13 = _parametrization.get_parameter13();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _l_param_only);
		set_parameter13_value(_val13, _l_param_only);
	}

protected:
	void set_parameter13_value(const T13& _val13, bool _l_param_only = true) {
		parameter13->set_value(_val13, _l_param_only);
	}
public:

	const SlvParameter<T13>& get_parameter13() const {
		return *parameter13;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter13->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(13, Tparametrization_lower)

	bool operator==(const SlvParametrization13& _parametrization) const {
		return *parameter13 == *_parametrization.parameter13 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization13& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter13->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter13->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter13->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T13>::get_string_serialization(*parameter13));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter13->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T13>::get_string_serialization_bool(*parameter13);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(13)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(13)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(13);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(13);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(13)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(13)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, typename std::enable_if<!slv::rw::json::ReadWrite<T13>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 14 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
class SlvParametrization14 : public SlvParametrization13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> {

	SlvParameter<T14>* parameter14;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 14);
	typedef SlvParametrization14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tparametrization;
	typedef SlvParametrization13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Tparametrization_lower;

protected: 

	SlvParametrization14(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13), parameter14(_parameter14) {
		SlvParametrization_base::parameters.push_back(parameter14);
	}

	SlvParametrization14(const SlvParametrization14& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter14 =  _parametrization.get_parameter14().clone(this);
		SlvParametrization_base::parameters.push_back(parameter14);
	}

	~SlvParametrization14() {
		delete parameter14;
	}

public: 

	Tparametrization& operator=(const SlvParametrization14& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization14& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter14 = _parametrization.get_parameter14();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _l_param_only);
		set_parameter14_value(_val14, _l_param_only);
	}

protected:
	void set_parameter14_value(const T14& _val14, bool _l_param_only = true) {
		parameter14->set_value(_val14, _l_param_only);
	}
public:

	const SlvParameter<T14>& get_parameter14() const {
		return *parameter14;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter14->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(14, Tparametrization_lower)

	bool operator==(const SlvParametrization14& _parametrization) const {
		return *parameter14 == *_parametrization.parameter14 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization14& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter14->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter14->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter14->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T14>::get_string_serialization(*parameter14));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter14->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T14>::get_string_serialization_bool(*parameter14);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(14)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(14)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(14);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(14);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(14)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(14)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>, typename std::enable_if<!slv::rw::json::ReadWrite<T14>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 15 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
class SlvParametrization15 : public SlvParametrization14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> {

	SlvParameter<T15>* parameter15;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 15);
	typedef SlvParametrization15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Tparametrization;
	typedef SlvParametrization14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Tparametrization_lower;

protected: 

	SlvParametrization15(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14), parameter15(_parameter15) {
		SlvParametrization_base::parameters.push_back(parameter15);
	}

	SlvParametrization15(const SlvParametrization15& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter15 =  _parametrization.get_parameter15().clone(this);
		SlvParametrization_base::parameters.push_back(parameter15);
	}

	~SlvParametrization15() {
		delete parameter15;
	}

public: 

	Tparametrization& operator=(const SlvParametrization15& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization15& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter15 = _parametrization.get_parameter15();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _l_param_only);
		set_parameter15_value(_val15, _l_param_only);
	}

protected:
	void set_parameter15_value(const T15& _val15, bool _l_param_only = true) {
		parameter15->set_value(_val15, _l_param_only);
	}
public:

	const SlvParameter<T15>& get_parameter15() const {
		return *parameter15;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter15->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(15, Tparametrization_lower)

	bool operator==(const SlvParametrization15& _parametrization) const {
		return *parameter15 == *_parametrization.parameter15 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization15& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter15->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter15->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter15->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T15>::get_string_serialization(*parameter15));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter15->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T15>::get_string_serialization_bool(*parameter15);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(15)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(15)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(15);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(15);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(15)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(15)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>, typename std::enable_if<!slv::rw::json::ReadWrite<T15>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 16 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
class SlvParametrization16 : public SlvParametrization15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> {

	SlvParameter<T16>* parameter16;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 16);
	typedef SlvParametrization16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Tparametrization;
	typedef SlvParametrization15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Tparametrization_lower;

protected: 

	SlvParametrization16(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15), parameter16(_parameter16) {
		SlvParametrization_base::parameters.push_back(parameter16);
	}

	SlvParametrization16(const SlvParametrization16& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter16 =  _parametrization.get_parameter16().clone(this);
		SlvParametrization_base::parameters.push_back(parameter16);
	}

	~SlvParametrization16() {
		delete parameter16;
	}

public: 

	Tparametrization& operator=(const SlvParametrization16& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization16& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter16 = _parametrization.get_parameter16();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _l_param_only);
		set_parameter16_value(_val16, _l_param_only);
	}

protected:
	void set_parameter16_value(const T16& _val16, bool _l_param_only = true) {
		parameter16->set_value(_val16, _l_param_only);
	}
public:

	const SlvParameter<T16>& get_parameter16() const {
		return *parameter16;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter16->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(16, Tparametrization_lower)

	bool operator==(const SlvParametrization16& _parametrization) const {
		return *parameter16 == *_parametrization.parameter16 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization16& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter16->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter16->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter16->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T16>::get_string_serialization(*parameter16));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter16->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T16>::get_string_serialization_bool(*parameter16);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(16)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(16)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(16);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(16);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(16)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(16)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>, typename std::enable_if<!slv::rw::json::ReadWrite<T16>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 17 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17>
class SlvParametrization17 : public SlvParametrization16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> {

	SlvParameter<T17>* parameter17;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 17);
	typedef SlvParametrization17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Tparametrization;
	typedef SlvParametrization16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Tparametrization_lower;

protected: 

	SlvParametrization17(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16), parameter17(_parameter17) {
		SlvParametrization_base::parameters.push_back(parameter17);
	}

	SlvParametrization17(const SlvParametrization17& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter17 =  _parametrization.get_parameter17().clone(this);
		SlvParametrization_base::parameters.push_back(parameter17);
	}

	~SlvParametrization17() {
		delete parameter17;
	}

public: 

	Tparametrization& operator=(const SlvParametrization17& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization17& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter17 = _parametrization.get_parameter17();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _l_param_only);
		set_parameter17_value(_val17, _l_param_only);
	}

protected:
	void set_parameter17_value(const T17& _val17, bool _l_param_only = true) {
		parameter17->set_value(_val17, _l_param_only);
	}
public:

	const SlvParameter<T17>& get_parameter17() const {
		return *parameter17;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter17->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(17, Tparametrization_lower)

	bool operator==(const SlvParametrization17& _parametrization) const {
		return *parameter17 == *_parametrization.parameter17 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization17& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter17->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter17->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter17->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T17>::get_string_serialization(*parameter17));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter17->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T17>::get_string_serialization_bool(*parameter17);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(17)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(17)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(17);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(17);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(17)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(17)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>, typename std::enable_if<!slv::rw::json::ReadWrite<T17>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 18 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18>
class SlvParametrization18 : public SlvParametrization17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> {

	SlvParameter<T18>* parameter18;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 18);
	typedef SlvParametrization18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Tparametrization;
	typedef SlvParametrization17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Tparametrization_lower;

protected: 

	SlvParametrization18(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17), parameter18(_parameter18) {
		SlvParametrization_base::parameters.push_back(parameter18);
	}

	SlvParametrization18(const SlvParametrization18& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter18 =  _parametrization.get_parameter18().clone(this);
		SlvParametrization_base::parameters.push_back(parameter18);
	}

	~SlvParametrization18() {
		delete parameter18;
	}

public: 

	Tparametrization& operator=(const SlvParametrization18& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization18& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter18 = _parametrization.get_parameter18();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _l_param_only);
		set_parameter18_value(_val18, _l_param_only);
	}

protected:
	void set_parameter18_value(const T18& _val18, bool _l_param_only = true) {
		parameter18->set_value(_val18, _l_param_only);
	}
public:

	const SlvParameter<T18>& get_parameter18() const {
		return *parameter18;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter18->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(18, Tparametrization_lower)

	bool operator==(const SlvParametrization18& _parametrization) const {
		return *parameter18 == *_parametrization.parameter18 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization18& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter18->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter18->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter18->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T18>::get_string_serialization(*parameter18));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter18->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T18>::get_string_serialization_bool(*parameter18);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(18)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(18)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(18);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(18);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(18)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(18)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>, typename std::enable_if<!slv::rw::json::ReadWrite<T18>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 19 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19>
class SlvParametrization19 : public SlvParametrization18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> {

	SlvParameter<T19>* parameter19;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 19);
	typedef SlvParametrization19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Tparametrization;
	typedef SlvParametrization18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Tparametrization_lower;

protected: 

	SlvParametrization19(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18, SlvParameter<T19>* _parameter19) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17, _parameter18), parameter19(_parameter19) {
		SlvParametrization_base::parameters.push_back(parameter19);
	}

	SlvParametrization19(const SlvParametrization19& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter19 =  _parametrization.get_parameter19().clone(this);
		SlvParametrization_base::parameters.push_back(parameter19);
	}

	~SlvParametrization19() {
		delete parameter19;
	}

public: 

	Tparametrization& operator=(const SlvParametrization19& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization19& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter19 = _parametrization.get_parameter19();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), T19 _val19 = T19(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _val18, _l_param_only);
		set_parameter19_value(_val19, _l_param_only);
	}

protected:
	void set_parameter19_value(const T19& _val19, bool _l_param_only = true) {
		parameter19->set_value(_val19, _l_param_only);
	}
public:

	const SlvParameter<T19>& get_parameter19() const {
		return *parameter19;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter19->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(19, Tparametrization_lower)

	bool operator==(const SlvParametrization19& _parametrization) const {
		return *parameter19 == *_parametrization.parameter19 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization19& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter19->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter19->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter19->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T19>::get_string_serialization(*parameter19));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter19->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T19>::get_string_serialization_bool(*parameter19);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(19)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(19)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(19);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(19);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(19)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(19)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>, typename std::enable_if<!slv::rw::json::ReadWrite<T19>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 20 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20>
class SlvParametrization20 : public SlvParametrization19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> {

	SlvParameter<T20>* parameter20;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 20);
	typedef SlvParametrization20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Tparametrization;
	typedef SlvParametrization19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Tparametrization_lower;

protected: 

	SlvParametrization20(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18, SlvParameter<T19>* _parameter19, SlvParameter<T20>* _parameter20) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17, _parameter18, _parameter19), parameter20(_parameter20) {
		SlvParametrization_base::parameters.push_back(parameter20);
	}

	SlvParametrization20(const SlvParametrization20& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter20 =  _parametrization.get_parameter20().clone(this);
		SlvParametrization_base::parameters.push_back(parameter20);
	}

	~SlvParametrization20() {
		delete parameter20;
	}

public: 

	Tparametrization& operator=(const SlvParametrization20& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization20& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter20 = _parametrization.get_parameter20();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), T19 _val19 = T19(), T20 _val20 = T20(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _val18, _val19, _l_param_only);
		set_parameter20_value(_val20, _l_param_only);
	}

protected:
	void set_parameter20_value(const T20& _val20, bool _l_param_only = true) {
		parameter20->set_value(_val20, _l_param_only);
	}
public:

	const SlvParameter<T20>& get_parameter20() const {
		return *parameter20;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter20->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(20, Tparametrization_lower)

	bool operator==(const SlvParametrization20& _parametrization) const {
		return *parameter20 == *_parametrization.parameter20 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization20& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter20->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter20->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter20->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T20>::get_string_serialization(*parameter20));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter20->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T20>::get_string_serialization_bool(*parameter20);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(20)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(20)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(20);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(20);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(20)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(20)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>, typename std::enable_if<!slv::rw::json::ReadWrite<T20>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 21 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21>
class SlvParametrization21 : public SlvParametrization20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> {

	SlvParameter<T21>* parameter21;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 21);
	typedef SlvParametrization21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Tparametrization;
	typedef SlvParametrization20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Tparametrization_lower;

protected: 

	SlvParametrization21(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18, SlvParameter<T19>* _parameter19, SlvParameter<T20>* _parameter20, SlvParameter<T21>* _parameter21) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17, _parameter18, _parameter19, _parameter20), parameter21(_parameter21) {
		SlvParametrization_base::parameters.push_back(parameter21);
	}

	SlvParametrization21(const SlvParametrization21& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter21 =  _parametrization.get_parameter21().clone(this);
		SlvParametrization_base::parameters.push_back(parameter21);
	}

	~SlvParametrization21() {
		delete parameter21;
	}

public: 

	Tparametrization& operator=(const SlvParametrization21& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization21& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter21 = _parametrization.get_parameter21();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), T19 _val19 = T19(), T20 _val20 = T20(), T21 _val21 = T21(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _val18, _val19, _val20, _l_param_only);
		set_parameter21_value(_val21, _l_param_only);
	}

protected:
	void set_parameter21_value(const T21& _val21, bool _l_param_only = true) {
		parameter21->set_value(_val21, _l_param_only);
	}
public:

	const SlvParameter<T21>& get_parameter21() const {
		return *parameter21;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter21->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(21, Tparametrization_lower)

	bool operator==(const SlvParametrization21& _parametrization) const {
		return *parameter21 == *_parametrization.parameter21 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization21& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter21->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter21->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter21->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T21>::get_string_serialization(*parameter21));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter21->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T21>::get_string_serialization_bool(*parameter21);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(21)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(21)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(21);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(21);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(21)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(21)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>, typename std::enable_if<!slv::rw::json::ReadWrite<T21>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 22 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22>
class SlvParametrization22 : public SlvParametrization21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> {

	SlvParameter<T22>* parameter22;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 22);
	typedef SlvParametrization22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Tparametrization;
	typedef SlvParametrization21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Tparametrization_lower;

protected: 

	SlvParametrization22(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18, SlvParameter<T19>* _parameter19, SlvParameter<T20>* _parameter20, SlvParameter<T21>* _parameter21, SlvParameter<T22>* _parameter22) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17, _parameter18, _parameter19, _parameter20, _parameter21), parameter22(_parameter22) {
		SlvParametrization_base::parameters.push_back(parameter22);
	}

	SlvParametrization22(const SlvParametrization22& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter22 =  _parametrization.get_parameter22().clone(this);
		SlvParametrization_base::parameters.push_back(parameter22);
	}

	~SlvParametrization22() {
		delete parameter22;
	}

public: 

	Tparametrization& operator=(const SlvParametrization22& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization22& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter22 = _parametrization.get_parameter22();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), T19 _val19 = T19(), T20 _val20 = T20(), T21 _val21 = T21(), T22 _val22 = T22(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _val18, _val19, _val20, _val21, _l_param_only);
		set_parameter22_value(_val22, _l_param_only);
	}

protected:
	void set_parameter22_value(const T22& _val22, bool _l_param_only = true) {
		parameter22->set_value(_val22, _l_param_only);
	}
public:

	const SlvParameter<T22>& get_parameter22() const {
		return *parameter22;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter22->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(22, Tparametrization_lower)

	bool operator==(const SlvParametrization22& _parametrization) const {
		return *parameter22 == *_parametrization.parameter22 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization22& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter22->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter22->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter22->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T22>::get_string_serialization(*parameter22));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter22->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T22>::get_string_serialization_bool(*parameter22);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(22)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(22)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(22);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(22);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(22)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(22)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>, typename std::enable_if<!slv::rw::json::ReadWrite<T22>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 23 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23>
class SlvParametrization23 : public SlvParametrization22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> {

	SlvParameter<T23>* parameter23;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 23);
	typedef SlvParametrization23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Tparametrization;
	typedef SlvParametrization22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Tparametrization_lower;

protected: 

	SlvParametrization23(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18, SlvParameter<T19>* _parameter19, SlvParameter<T20>* _parameter20, SlvParameter<T21>* _parameter21, SlvParameter<T22>* _parameter22, SlvParameter<T23>* _parameter23) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17, _parameter18, _parameter19, _parameter20, _parameter21, _parameter22), parameter23(_parameter23) {
		SlvParametrization_base::parameters.push_back(parameter23);
	}

	SlvParametrization23(const SlvParametrization23& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter23 =  _parametrization.get_parameter23().clone(this);
		SlvParametrization_base::parameters.push_back(parameter23);
	}

	~SlvParametrization23() {
		delete parameter23;
	}

public: 

	Tparametrization& operator=(const SlvParametrization23& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization23& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter23 = _parametrization.get_parameter23();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), T19 _val19 = T19(), T20 _val20 = T20(), T21 _val21 = T21(), T22 _val22 = T22(), T23 _val23 = T23(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _val18, _val19, _val20, _val21, _val22, _l_param_only);
		set_parameter23_value(_val23, _l_param_only);
	}

protected:
	void set_parameter23_value(const T23& _val23, bool _l_param_only = true) {
		parameter23->set_value(_val23, _l_param_only);
	}
public:

	const SlvParameter<T23>& get_parameter23() const {
		return *parameter23;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter23->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(23, Tparametrization_lower)

	bool operator==(const SlvParametrization23& _parametrization) const {
		return *parameter23 == *_parametrization.parameter23 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization23& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter23->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter23->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter23->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T23>::get_string_serialization(*parameter23));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter23->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T23>::get_string_serialization_bool(*parameter23);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(23)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(23)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(23);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(23);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(23)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(23)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>, typename std::enable_if<!slv::rw::json::ReadWrite<T23>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

/*! Parametrization for 24 parameters.*/
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24>
class SlvParametrization24 : public SlvParametrization23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> {

	SlvParameter<T24>* parameter24;

public:

	/* Static number of parameters.*/
	glvm_staticVariable(const, unsigned int, Nparameters, 24);
	typedef SlvParametrization24<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> Tparametrization;
	typedef SlvParametrization23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> Tparametrization_lower;

protected: 

	SlvParametrization24(SlvParameter<T1>* _parameter1, SlvParameter<T2>* _parameter2, SlvParameter<T3>* _parameter3, SlvParameter<T4>* _parameter4, SlvParameter<T5>* _parameter5, SlvParameter<T6>* _parameter6, SlvParameter<T7>* _parameter7, SlvParameter<T8>* _parameter8, SlvParameter<T9>* _parameter9, SlvParameter<T10>* _parameter10, SlvParameter<T11>* _parameter11, SlvParameter<T12>* _parameter12, SlvParameter<T13>* _parameter13, SlvParameter<T14>* _parameter14, SlvParameter<T15>* _parameter15, SlvParameter<T16>* _parameter16, SlvParameter<T17>* _parameter17, SlvParameter<T18>* _parameter18, SlvParameter<T19>* _parameter19, SlvParameter<T20>* _parameter20, SlvParameter<T21>* _parameter21, SlvParameter<T22>* _parameter22, SlvParameter<T23>* _parameter23, SlvParameter<T24>* _parameter24) :Tparametrization_lower(_parameter1, _parameter2, _parameter3, _parameter4, _parameter5, _parameter6, _parameter7, _parameter8, _parameter9, _parameter10, _parameter11, _parameter12, _parameter13, _parameter14, _parameter15, _parameter16, _parameter17, _parameter18, _parameter19, _parameter20, _parameter21, _parameter22, _parameter23), parameter24(_parameter24) {
		SlvParametrization_base::parameters.push_back(parameter24);
	}

	SlvParametrization24(const SlvParametrization24& _parametrization) :Tparametrization_lower(_parametrization) {
		parameter24 =  _parametrization.get_parameter24().clone(this);
		SlvParametrization_base::parameters.push_back(parameter24);
	}

	~SlvParametrization24() {
		delete parameter24;
	}

public: 

	Tparametrization& operator=(const SlvParametrization24& _parametrization) {
		param_assign_rec(_parametrization);
		if (this->is_param_init_auto()) this->param_init();
		return *this;
	}

protected:
	void param_assign_rec(const SlvParametrization24& _parametrization) {
		Tparametrization_lower::param_assign_rec(_parametrization);
		*parameter24 = _parametrization.get_parameter24();
	}
public:

	/*! Set parameter values all at once.*/
	void set_parameter_values(T1 _val1, T2 _val2 = T2(), T3 _val3 = T3(), T4 _val4 = T4(), T5 _val5 = T5(), T6 _val6 = T6(), T7 _val7 = T7(), T8 _val8 = T8(), T9 _val9 = T9(), T10 _val10 = T10(), T11 _val11 = T11(), T12 _val12 = T12(), T13 _val13 = T13(), T14 _val14 = T14(), T15 _val15 = T15(), T16 _val16 = T16(), T17 _val17 = T17(), T18 _val18 = T18(), T19 _val19 = T19(), T20 _val20 = T20(), T21 _val21 = T21(), T22 _val22 = T22(), T23 _val23 = T23(), T24 _val24 = T24(), bool _l_param_only = true) {
		Tparametrization_lower::set_parameter_values(_val1, _val2, _val3, _val4, _val5, _val6, _val7, _val8, _val9, _val10, _val11, _val12, _val13, _val14, _val15, _val16, _val17, _val18, _val19, _val20, _val21, _val22, _val23, _l_param_only);
		set_parameter24_value(_val24, _l_param_only);
	}

protected:
	void set_parameter24_value(const T24& _val24, bool _l_param_only = true) {
		parameter24->set_value(_val24, _l_param_only);
	}
public:

	const SlvParameter<T24>& get_parameter24() const {
		return *parameter24;
	}

	SlvStatus check_parameters() const {
		SlvStatus status = Tparametrization_lower::check_parameters();
		status += parameter24->check_rules();
		return status;
	}

	glvm_pv_SlvParametrization_abide(24, Tparametrization_lower)

	bool operator==(const SlvParametrization24& _parametrization) const {
		return *parameter24 == *_parametrization.parameter24 && *static_cast<const Tparametrization_lower*>(this) == _parametrization;
	}

	bool operator!=(const SlvParametrization24& _parametrization) const {
		return !(*this == _parametrization);
	}

	/*! Get a vector (one element per parameter) of strings. Each string is the slv::string::to_id_str of the parameter value.
	* The marker value is used to discriminate which parameters are being converted to string.
	* Setting the marker value of a parameter is possible in the macro glvm_parameter.*/
	std::vector<std::string> get_vector_id_str(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector<std::string> vector_id_str = Tparametrization_lower::get_vector_id_str(_marker);
		if (_marker == parameter24->get_marker()) {
			vector_id_str.push_back(slv::string::to_id_str(parameter24->get_value()));
		}
		return vector_id_str;
	}

	/*! Get string serialization of the parametrization. Each vector element contains a parameter name and the corresponding parameter value as string using operator <<.
	* Parameters of nested parametrizations are simply added. Ie: there is no record of intermediate parametrizations.*/
	std::vector< std::pair<std::string, std::string> > get_string_serialization(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::vector< std::pair<std::string, std::string> > serialization = Tparametrization_lower::get_string_serialization(_marker);
		if (_marker == parameter24->get_marker()) {
			slv::vector::add(serialization, SlvParameterSpec<T24>::get_string_serialization(*parameter24));
		}
		return serialization;
	}

	/*! Same as get_string_serialization, but bool parameters are treated appart.
	* If bool parameter is true, the parameter name is added to the second vector, if false it is not.*/
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > get_string_serialization_bool(unsigned int _marker = SlvParameter_base::default_marker_value()) const {
		std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization = Tparametrization_lower::get_string_serialization_bool(_marker);
		if (_marker == parameter24->get_marker()) {
			std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization_parameter = SlvParameterSpec<T24>::get_string_serialization_bool(*parameter24);
			slv::vector::add(serialization.first, serialization_parameter.first);
			slv::vector::add(serialization.second, serialization_parameter.second);
		}
		return serialization;
	}

protected:
	void ostream(std::ostream& _os) const {
		Tparametrization_lower::ostream(_os);
		glvm_pv_SlvParametrization_ostream(24)
	}
	void istream_rec(std::istream& _is) {
		Tparametrization_lower::istream_rec(_is);
		glvm_pv_SlvParametrization_istream(24)
	}
	void istream(std::istream& _is) {
		istream_rec(_is);
		if (this->is_param_init_auto()) this->param_init();
	}
public:
	void writeB(std::ofstream& _output_file) const {
		Tparametrization_lower::writeB(_output_file);
		glvm_pv_SlvParametrization_writeB(24);
	}
protected:
	bool readB_rec(std::ifstream& _input_file) {
		bool l_read = Tparametrization_lower::readB_rec(_input_file);
		if (l_read) l_read = glvm_pv_SlvParametrization_readB(24);
		return l_read;
	}
public:
	bool readB(std::ifstream& _input_file) {
		bool l_read = readB_rec(_input_file);
		if (l_read && this->is_param_init_auto()) this->param_init();
		return l_read;
	}

#if OPTION_USE_THIRDPARTY_JSON==1
	void writeJson(nlohmann::json& _json) const {
		Tparametrization_lower::writeJson(_json);
		glvm_pv_SlvParametrization_writeJson(24)
	}
	SlvStatus readJson(const nlohmann::json& _json) {
		SlvStatus status = Tparametrization_lower::readJson(_json);
		glvm_pv_SlvParametrization_readJson(24)
		return status;
	}
#endif

	/*! Cast to SlvParametrization.*/
	Tparametrization& param_cast() {
		return *this;
	}

	/*! Cast to SlvParametrization.*/
	const Tparametrization& param_cast() const {
		 return *this;
	}

	/*! Assignment at parametrization level.
	* Equivalent to: param_cast() = 
	* Assign parameters from another parametrization class. Manages parameters initialization.
	* The class inheriting from this one is supposed to be Tprametrization.
	* There is no guarantee though, and the method will apply as long as SlvParametrization types are the same.*/
	template <class Tparametrization>
	void param_assign(const Tparametrization& _parametrization) {
		*this = _parametrization;
	}

};

#if OPTION_USE_THIRDPARTY_JSON==1
template <class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16, class T17, class T18, class T19, class T20, class T21, class T22, class T23, class T24>
struct slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization24<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>, typename std::enable_if<!slv::rw::json::ReadWrite<T24>::l_valid || !slv::rw::json::typemgr::IsJsonManageableParametrizationExplicit<SlvParametrization23<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> >::l_valid>::type> {
	static constexpr bool l_valid = false;
};
#endif

#define EXPAND(arg) arg
#define glvm_pv_get_macro_parametrization(\
_class_name,\
_1_1, _1_2, _1_3, _1_4, _1_5,\
_2_1, _2_2, _2_3, _2_4, _2_5,\
_3_1, _3_2, _3_3, _3_4, _3_5,\
_4_1, _4_2, _4_3, _4_4, _4_5,\
_5_1, _5_2, _5_3, _5_4, _5_5,\
_6_1, _6_2, _6_3, _6_4, _6_5,\
_7_1, _7_2, _7_3, _7_4, _7_5,\
_8_1, _8_2, _8_3, _8_4, _8_5,\
_9_1, _9_2, _9_3, _9_4, _9_5,\
_10_1, _10_2, _10_3, _10_4, _10_5,\
_11_1, _11_2, _11_3, _11_4, _11_5,\
_12_1, _12_2, _12_3, _12_4, _12_5,\
_13_1, _13_2, _13_3, _13_4, _13_5,\
_14_1, _14_2, _14_3, _14_4, _14_5,\
_15_1, _15_2, _15_3, _15_4, _15_5,\
_16_1, _16_2, _16_3, _16_4, _16_5,\
_17_1, _17_2, _17_3, _17_4, _17_5,\
_18_1, _18_2, _18_3, _18_4, _18_5,\
_19_1, _19_2, _19_3, _19_4, _19_5,\
_20_1, _20_2, _20_3, _20_4, _20_5,\
_21_1, _21_2, _21_3, _21_4, _21_5,\
_22_1, _22_2, _22_3, _22_4, _22_5,\
_23_1, _23_2, _23_3, _23_4, _23_5,\
_24_1, _24_2, _24_3, _24_4, _24_5,\
macro_arg, ...) macro_arg

/*! Declare a parametrization class implementing only parameters.
* Convenient for quickly declare a class inheriting SlvParametrizationX.
* Does not allow rule management, all parameters are simply named, typed, and commented.*/
#define glvm_parametrization(class_declaration, ...) EXPAND( glvm_pv_get_macro_parametrization(__VA_ARGS__,\
glvm_parametrization24, _null24a, _null24b, _null24c, _null24d,\
glvm_parametrization23, _null23a, _null23b, _null23c, _null23d,\
glvm_parametrization22, _null22a, _null22b, _null22c, _null22d,\
glvm_parametrization21, _null21a, _null21b, _null21c, _null21d,\
glvm_parametrization20, _null20a, _null20b, _null20c, _null20d,\
glvm_parametrization19, _null19a, _null19b, _null19c, _null19d,\
glvm_parametrization18, _null18a, _null18b, _null18c, _null18d,\
glvm_parametrization17, _null17a, _null17b, _null17c, _null17d,\
glvm_parametrization16, _null16a, _null16b, _null16c, _null16d,\
glvm_parametrization15, _null15a, _null15b, _null15c, _null15d,\
glvm_parametrization14, _null14a, _null14b, _null14c, _null14d,\
glvm_parametrization13, _null13a, _null13b, _null13c, _null13d,\
glvm_parametrization12, _null12a, _null12b, _null12c, _null12d,\
glvm_parametrization11, _null11a, _null11b, _null11c, _null11d,\
glvm_parametrization10, _null10a, _null10b, _null10c, _null10d,\
glvm_parametrization9, _null9a, _null9b, _null9c, _null9d,\
glvm_parametrization8, _null8a, _null8b, _null8c, _null8d,\
glvm_parametrization7, _null7a, _null7b, _null7c, _null7d,\
glvm_parametrization6, _null6a, _null6b, _null6c, _null6d,\
glvm_parametrization5, _null5a, _null5b, _null5c, _null5d,\
glvm_parametrization4, _null4a, _null4b, _null4c, _null4d,\
glvm_parametrization3, _null3a, _null3b, _null3c, _null3d,\
glvm_parametrization2, _null2a, _null2b, _null2c, _null2d,\
glvm_parametrization1, _null1a, _null1b, _null1c, _null1d,\
glvm_parametrization0)(class_declaration, __VA_ARGS__))

#define glvm_parametrization0(class_declaration, class_name)\
class class_declaration : public SlvParametrization0 {\
glvm_parametrization0_init(class_name)\
public:\
class_declaration() :SlvParametrization0() {}\
};

#define glvm_parametrization1(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
class class_declaration : public SlvParametrization1<param1_type> {\
glvm_parametrization1_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration) {}\
};

#define glvm_parametrization2(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
class class_declaration : public SlvParametrization2<param1_type, param2_type> {\
glvm_parametrization2_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration) {}\
};

#define glvm_parametrization3(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
class class_declaration : public SlvParametrization3<param1_type, param2_type, param3_type> {\
glvm_parametrization3_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration) {}\
};

#define glvm_parametrization4(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
class class_declaration : public SlvParametrization4<param1_type, param2_type, param3_type, param4_type> {\
glvm_parametrization4_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration) {}\
};

#define glvm_parametrization5(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
class class_declaration : public SlvParametrization5<param1_type, param2_type, param3_type, param4_type, param5_type> {\
glvm_parametrization5_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration) {}\
};

#define glvm_parametrization6(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
class class_declaration : public SlvParametrization6<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type> {\
glvm_parametrization6_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration) {}\
};

#define glvm_parametrization7(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
class class_declaration : public SlvParametrization7<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type> {\
glvm_parametrization7_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration) {}\
};

#define glvm_parametrization8(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
class class_declaration : public SlvParametrization8<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type> {\
glvm_parametrization8_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration) {}\
};

#define glvm_parametrization9(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
class class_declaration : public SlvParametrization9<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type> {\
glvm_parametrization9_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration) {}\
};

#define glvm_parametrization10(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
class class_declaration : public SlvParametrization10<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type> {\
glvm_parametrization10_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration) {}\
};

#define glvm_parametrization11(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
class class_declaration : public SlvParametrization11<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type> {\
glvm_parametrization11_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration) {}\
};

#define glvm_parametrization12(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
class class_declaration : public SlvParametrization12<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type> {\
glvm_parametrization12_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration) {}\
};

#define glvm_parametrization13(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
class class_declaration : public SlvParametrization13<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type> {\
glvm_parametrization13_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration) {}\
};

#define glvm_parametrization14(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
class class_declaration : public SlvParametrization14<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type> {\
glvm_parametrization14_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration) {}\
};

#define glvm_parametrization15(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
class class_declaration : public SlvParametrization15<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type> {\
glvm_parametrization15_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration) {}\
};

#define glvm_parametrization16(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
class class_declaration : public SlvParametrization16<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type> {\
glvm_parametrization16_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration) {}\
};

#define glvm_parametrization17(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
class class_declaration : public SlvParametrization17<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type> {\
glvm_parametrization17_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration) {}\
};

#define glvm_parametrization18(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
class class_declaration : public SlvParametrization18<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type> {\
glvm_parametrization18_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration) {}\
};

#define glvm_parametrization19(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value,\
param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
class class_declaration : public SlvParametrization19<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type, param19_type> {\
glvm_parametrization19_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
glvm_parameter(19, param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration, param19_declaration) {}\
};

#define glvm_parametrization20(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value,\
param19_declaration, param19_type, param19_name, param19_comment, param19_default_value,\
param20_declaration, param20_type, param20_name, param20_comment, param20_default_value)\
class class_declaration : public SlvParametrization20<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type, param19_type, param20_type> {\
glvm_parametrization20_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
glvm_parameter(19, param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
glvm_parameter(20, param20_declaration, param20_type, param20_name, param20_comment, param20_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration, param19_declaration, param20_declaration) {}\
};

#define glvm_parametrization21(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value,\
param19_declaration, param19_type, param19_name, param19_comment, param19_default_value,\
param20_declaration, param20_type, param20_name, param20_comment, param20_default_value,\
param21_declaration, param21_type, param21_name, param21_comment, param21_default_value)\
class class_declaration : public SlvParametrization21<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type, param19_type, param20_type, param21_type> {\
glvm_parametrization21_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
glvm_parameter(19, param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
glvm_parameter(20, param20_declaration, param20_type, param20_name, param20_comment, param20_default_value)\
glvm_parameter(21, param21_declaration, param21_type, param21_name, param21_comment, param21_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration, param19_declaration, param20_declaration, param21_declaration) {}\
};

#define glvm_parametrization22(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value,\
param19_declaration, param19_type, param19_name, param19_comment, param19_default_value,\
param20_declaration, param20_type, param20_name, param20_comment, param20_default_value,\
param21_declaration, param21_type, param21_name, param21_comment, param21_default_value,\
param22_declaration, param22_type, param22_name, param22_comment, param22_default_value)\
class class_declaration : public SlvParametrization22<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type, param19_type, param20_type, param21_type, param22_type> {\
glvm_parametrization22_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
glvm_parameter(19, param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
glvm_parameter(20, param20_declaration, param20_type, param20_name, param20_comment, param20_default_value)\
glvm_parameter(21, param21_declaration, param21_type, param21_name, param21_comment, param21_default_value)\
glvm_parameter(22, param22_declaration, param22_type, param22_name, param22_comment, param22_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration, param19_declaration, param20_declaration, param21_declaration, param22_declaration) {}\
};

#define glvm_parametrization23(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value,\
param19_declaration, param19_type, param19_name, param19_comment, param19_default_value,\
param20_declaration, param20_type, param20_name, param20_comment, param20_default_value,\
param21_declaration, param21_type, param21_name, param21_comment, param21_default_value,\
param22_declaration, param22_type, param22_name, param22_comment, param22_default_value,\
param23_declaration, param23_type, param23_name, param23_comment, param23_default_value)\
class class_declaration : public SlvParametrization23<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type, param19_type, param20_type, param21_type, param22_type, param23_type> {\
glvm_parametrization23_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
glvm_parameter(19, param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
glvm_parameter(20, param20_declaration, param20_type, param20_name, param20_comment, param20_default_value)\
glvm_parameter(21, param21_declaration, param21_type, param21_name, param21_comment, param21_default_value)\
glvm_parameter(22, param22_declaration, param22_type, param22_name, param22_comment, param22_default_value)\
glvm_parameter(23, param23_declaration, param23_type, param23_name, param23_comment, param23_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration, param19_declaration, param20_declaration, param21_declaration, param22_declaration, param23_declaration) {}\
};

#define glvm_parametrization24(class_declaration, class_name,\
param1_declaration, param1_type, param1_name, param1_comment, param1_default_value,\
param2_declaration, param2_type, param2_name, param2_comment, param2_default_value,\
param3_declaration, param3_type, param3_name, param3_comment, param3_default_value,\
param4_declaration, param4_type, param4_name, param4_comment, param4_default_value,\
param5_declaration, param5_type, param5_name, param5_comment, param5_default_value,\
param6_declaration, param6_type, param6_name, param6_comment, param6_default_value,\
param7_declaration, param7_type, param7_name, param7_comment, param7_default_value,\
param8_declaration, param8_type, param8_name, param8_comment, param8_default_value,\
param9_declaration, param9_type, param9_name, param9_comment, param9_default_value,\
param10_declaration, param10_type, param10_name, param10_comment, param10_default_value,\
param11_declaration, param11_type, param11_name, param11_comment, param11_default_value,\
param12_declaration, param12_type, param12_name, param12_comment, param12_default_value,\
param13_declaration, param13_type, param13_name, param13_comment, param13_default_value,\
param14_declaration, param14_type, param14_name, param14_comment, param14_default_value,\
param15_declaration, param15_type, param15_name, param15_comment, param15_default_value,\
param16_declaration, param16_type, param16_name, param16_comment, param16_default_value,\
param17_declaration, param17_type, param17_name, param17_comment, param17_default_value,\
param18_declaration, param18_type, param18_name, param18_comment, param18_default_value,\
param19_declaration, param19_type, param19_name, param19_comment, param19_default_value,\
param20_declaration, param20_type, param20_name, param20_comment, param20_default_value,\
param21_declaration, param21_type, param21_name, param21_comment, param21_default_value,\
param22_declaration, param22_type, param22_name, param22_comment, param22_default_value,\
param23_declaration, param23_type, param23_name, param23_comment, param23_default_value,\
param24_declaration, param24_type, param24_name, param24_comment, param24_default_value)\
class class_declaration : public SlvParametrization24<param1_type, param2_type, param3_type, param4_type, param5_type, param6_type, param7_type, param8_type, param9_type, param10_type, param11_type, param12_type, param13_type, param14_type, param15_type, param16_type, param17_type, param18_type, param19_type, param20_type, param21_type, param22_type, param23_type, param24_type> {\
glvm_parametrization24_init(class_name)\
glvm_parameter(1, param1_declaration, param1_type, param1_name, param1_comment, param1_default_value)\
glvm_parameter(2, param2_declaration, param2_type, param2_name, param2_comment, param2_default_value)\
glvm_parameter(3, param3_declaration, param3_type, param3_name, param3_comment, param3_default_value)\
glvm_parameter(4, param4_declaration, param4_type, param4_name, param4_comment, param4_default_value)\
glvm_parameter(5, param5_declaration, param5_type, param5_name, param5_comment, param5_default_value)\
glvm_parameter(6, param6_declaration, param6_type, param6_name, param6_comment, param6_default_value)\
glvm_parameter(7, param7_declaration, param7_type, param7_name, param7_comment, param7_default_value)\
glvm_parameter(8, param8_declaration, param8_type, param8_name, param8_comment, param8_default_value)\
glvm_parameter(9, param9_declaration, param9_type, param9_name, param9_comment, param9_default_value)\
glvm_parameter(10, param10_declaration, param10_type, param10_name, param10_comment, param10_default_value)\
glvm_parameter(11, param11_declaration, param11_type, param11_name, param11_comment, param11_default_value)\
glvm_parameter(12, param12_declaration, param12_type, param12_name, param12_comment, param12_default_value)\
glvm_parameter(13, param13_declaration, param13_type, param13_name, param13_comment, param13_default_value)\
glvm_parameter(14, param14_declaration, param14_type, param14_name, param14_comment, param14_default_value)\
glvm_parameter(15, param15_declaration, param15_type, param15_name, param15_comment, param15_default_value)\
glvm_parameter(16, param16_declaration, param16_type, param16_name, param16_comment, param16_default_value)\
glvm_parameter(17, param17_declaration, param17_type, param17_name, param17_comment, param17_default_value)\
glvm_parameter(18, param18_declaration, param18_type, param18_name, param18_comment, param18_default_value)\
glvm_parameter(19, param19_declaration, param19_type, param19_name, param19_comment, param19_default_value)\
glvm_parameter(20, param20_declaration, param20_type, param20_name, param20_comment, param20_default_value)\
glvm_parameter(21, param21_declaration, param21_type, param21_name, param21_comment, param21_default_value)\
glvm_parameter(22, param22_declaration, param22_type, param22_name, param22_comment, param22_default_value)\
glvm_parameter(23, param23_declaration, param23_type, param23_name, param23_comment, param23_default_value)\
glvm_parameter(24, param24_declaration, param24_type, param24_name, param24_comment, param24_default_value)\
public:\
class_declaration() :glvm_parametrization_constructor(param1_declaration, param2_declaration, param3_declaration, param4_declaration, param5_declaration, param6_declaration, param7_declaration, param8_declaration, param9_declaration, param10_declaration, param11_declaration, param12_declaration, param13_declaration, param14_declaration, param15_declaration, param16_declaration, param17_declaration, param18_declaration, param19_declaration, param20_declaration, param21_declaration, param22_declaration, param23_declaration, param24_declaration) {}\
};

/*! This class is a sort of std::map, with "factory" features.
Tvalue must inherit SlvLabeling<Tlabel>, with Tlabel being the 'key'.
Therefore, unlike std::map, the key (Tlabel) is owned by Tvalue.
The instance owns the elements (no shared pointer).*/
template <class Tvalue, class Tlabel = typename Tvalue::Tlabeling>
class SlvPool : virtual public SlvOS {

private:

	std::vector<Tvalue*> elements;

public:

	SlvPool();
	SlvPool(const SlvPool<Tvalue, Tlabel>& _pool);
	~SlvPool();

	/*! Clear the instance. Delete owned elements.*/
	void clear();

	typedef typename std::vector<Tvalue*>::const_iterator const_iterator;
	/*! Iterator to the first element.*/
	const_iterator begin() const;
	/*! Iterator to the last element.*/
	const_iterator end() const;

	typedef typename std::vector<Tvalue*>::iterator iterator;
	/*! Iterator to the first element.*/
	iterator begin();
	/*! Iterator to the last element.*/
	iterator end();

	/*! Create and delete elements to match \p _pool.*/
	SlvPool<Tvalue, Tlabel>& operator=(const SlvPool<Tvalue, Tlabel>& _pool);

	/*! Get number of elements. Size of the pool.*/
	std::size_t psize() const;

	/*! Return true if the pool contains no elements.*/
	bool empty() const;

	/*! Add an element created externally.
	* Checks if an element with the same label already exists.
	* The pool instance will own the element (possible deletion).*/
	bool add(Tvalue* _element);

	/*! Get the element which label is equal to \p _label.
	* Return NULL if not found.
	* Template label argument for flexibility in the == operator.*/
	template <class Tlabel2>
	const Tvalue* get(const Tlabel2& _label) const;
	/*! Get the element which label is equal to \p _label.
	* Return NULL if not found.
	* Template label argument for flexibility in the == operator.*/
	template <class Tlabel2>
	Tvalue* get(const Tlabel2& _label);

	/*! Get vector of elements.*/
	const std::vector<Tvalue*>& get_elements() const;

	/*! Create and return an element labelled \p _label.
	* If an element with this _label already exists, returns it.*/
	Tvalue* new_element(const Tlabel& _label);
	/*! Delete element labelled \p _label.
	* Template label argument for flexibility in the == operator.*/
	template <class Tlabel2>
	bool delete_element(const Tlabel2& _label);
	/*! Delete element which label is the same as the one of \p _element.
	* If \p _l_owned is true, delete only if _element is part of the pool.
	* Ambiguous if Tlabel is the same type as Tvalue*. Unlikely though.*/
	template <class Tvalue2>
	bool delete_element(Tvalue2* _element, bool _l_owned = true);
	/*! Delete element at index \p el.
	* _at suffix for disambiguation with Tlabel/Tvalue */
	bool delete_element_at(const unsigned int el);

	/*! Returns the elements index where the element with label \p _label is located.
	* Returns -1 if \p _label is not found.
	* Template label argument for flexibility in the == operator.*/
	template <class Tlabel2>
	unsigned int get_n(const Tlabel2& _label) const;

	/* Returns the iterator of element which label is \p _label.
	* If not found, returns end().*/
	template <class Tlabel2>
	iterator find(const Tlabel2& _label);
	/* Returns the iterator of element which label is \p _label.
	* If not found, returns end().*/
	template <class Tlabel2>
	const_iterator find(const Tlabel2& _label) const;

	/*! Get element at index \p el.*/
	Tvalue* operator[](const unsigned int el);
	/*! Get element at index \p el.*/
	const Tvalue* operator[](const unsigned int el) const;

protected:

	void ostream(std::ostream& _os) const;

};

template <class Tvalue, class Tlabel>
SlvPool<Tvalue, Tlabel>::SlvPool() {

}

template <class Tvalue, class Tlabel>
SlvPool<Tvalue, Tlabel>::SlvPool(const SlvPool<Tvalue, Tlabel>& _pool) {

	*this = _pool;

}

template <class Tvalue, class Tlabel>
SlvPool<Tvalue, Tlabel>::~SlvPool() {

	clear();

}

template <class Tvalue, class Tlabel>
void SlvPool<Tvalue, Tlabel>::clear() {

	for (iterator it = begin(); it != end(); ++it) {
		delete* it;
	}
	elements.clear();

}

template <class Tvalue, class Tlabel>
typename SlvPool<Tvalue, Tlabel>::const_iterator SlvPool<Tvalue, Tlabel>::begin() const {

	return elements.begin();

}

template <class Tvalue, class Tlabel>
typename SlvPool<Tvalue, Tlabel>::const_iterator SlvPool<Tvalue, Tlabel>::end() const {

	return elements.end();

}

template <class Tvalue, class Tlabel>
typename SlvPool<Tvalue, Tlabel>::iterator SlvPool<Tvalue, Tlabel>::begin() {

	return elements.begin();

}

template <class Tvalue, class Tlabel>
typename SlvPool<Tvalue, Tlabel>::iterator SlvPool<Tvalue, Tlabel>::end() {

	return elements.end();

}

template <class Tvalue, class Tlabel>
SlvPool<Tvalue, Tlabel>& SlvPool<Tvalue, Tlabel>::operator=(const SlvPool<Tvalue, Tlabel>& _pool) {

	clear();

	for (const_iterator it = _pool.elements.begin(); it != _pool.elements.end(); ++it) {
		(*new_element(static_cast<const SlvLabeling<Tlabel>*>(*it)->get_label())) = **it;
	}

	return *this;
}

template <class Tvalue, class Tlabel>
std::size_t SlvPool<Tvalue, Tlabel>::psize() const {

	return elements.size();

}

template <class Tvalue, class Tlabel>
bool SlvPool<Tvalue, Tlabel>::empty() const {

	return elements.empty();

}

template <class Tvalue, class Tlabel>
bool SlvPool<Tvalue, Tlabel>::add(Tvalue* _element) {

	// Static cast to prevent get_label shadowing
	if (!get(static_cast<const SlvLabeling<Tlabel>*>(_element)->get_label())) {
		elements.push_back(_element);
		return true;
	} else {
		slv::flag::ISSUE(slv::flag::FlagType::Warning, "Can not add the element ", *_element, " in the pool, an element with the same label ", static_cast<const SlvLabeling<Tlabel>*>(_element)->get_label(), " already exists");
		return false;
	}

}

template <class Tvalue, class Tlabel>
template <class Tlabel2>
Tvalue* SlvPool<Tvalue, Tlabel>::get(const Tlabel2& _label) {

	iterator it = find(_label);
	if (it != end()) {
		return *it;
	} else {
		return NULL;
	}

}

template <class Tvalue, class Tlabel>
template <class Tlabel2>
const Tvalue* SlvPool<Tvalue, Tlabel>::get(const Tlabel2& _label) const {

	return const_cast<SlvPool<Tvalue, Tlabel>*>(this)->get(_label);

}

template <class Tvalue, class Tlabel>
template <class Tlabel2>
unsigned int SlvPool<Tvalue, Tlabel>::get_n(const Tlabel2& _label) const {

	const_iterator it = find(_label);

	if (it != end()) {
		return std::distance(begin(), it);
	} else {
		return -1;
	}

}

template <class Tvalue, class Tlabel>
const std::vector<Tvalue*>& SlvPool<Tvalue, Tlabel>::get_elements() const {
	return elements;
}

template <class Tvalue, class Tlabel>
Tvalue* SlvPool<Tvalue, Tlabel>::new_element(const Tlabel& _label) {

	Tvalue* value = get(_label);
	if (!value) {
		value = new Tvalue(_label);
		elements.push_back(value);
	} else {
		slv::flag::ISSUE(slv::flag::FlagType::Warning, "Can not create the element ", *value, " in the pool, an element with the same label ", value->get_label(), " already exists");
	}

	return value;
}

template <class Tvalue, class Tlabel>
template <class Tlabel2>
bool SlvPool<Tvalue, Tlabel>::delete_element(const Tlabel2& _label) {

	iterator it = find(_label);
	if (it != end()) {
		delete* it;
		elements.erase(it);
		return true;
	} else {
		slv::flag::ISSUE(slv::flag::FlagType::Warning, "Can not delete. The element labelled ", _label, " does not exist.");
		return false;
	}

}

template <class Tvalue, class Tlabel>
template <class Tvalue2>
bool SlvPool<Tvalue, Tlabel>::delete_element(Tvalue2* _element, bool _l_owned) {

	if (!_l_owned || slv::vector::find(static_cast<Tvalue*>(_element), elements)) {
		return delete_element(_element->get_label());
	} else {
		return false;
	}

}

template <class Tvalue, class Tlabel>
bool SlvPool<Tvalue, Tlabel>::delete_element_at(const unsigned int el) {

	if (el < psize()) {
		delete elements[el];
		elements.erase(elements.begin() + el);
		return true;
	} else {
		return false;
	}

}

template <class Tvalue, class Tlabel>
template <class Tlabel2>
typename SlvPool<Tvalue, Tlabel>::iterator SlvPool<Tvalue, Tlabel>::find(const Tlabel2& _label) {

	bool l_found = false;
	iterator it = begin();
	while (it != end() && !l_found) {
		l_found = (static_cast<const SlvLabeling<Tlabel>*>(*it)->get_label() == _label);
		if (!l_found) ++it;
	}

	return it;

}

template <class Tvalue, class Tlabel>
template <class Tlabel2>
typename SlvPool<Tvalue, Tlabel>::const_iterator SlvPool<Tvalue, Tlabel>::find(const Tlabel2& _label) const {

	bool l_found = false;
	const_iterator it = begin();
	while (it != end() && !l_found) {
		l_found = (static_cast<const SlvLabeling<Tlabel>*>(*it)->get_label() == _label);
		if (l_found) ++it;
	}

	return it;

}

template <class Tvalue, class Tlabel>
Tvalue* SlvPool<Tvalue, Tlabel>::operator[](const unsigned int el) {
	return elements[el];
}

template <class Tvalue, class Tlabel>
const Tvalue* SlvPool<Tvalue, Tlabel>::operator[](const unsigned int el) const {
	return elements[el];
}

template <class Tvalue, class Tlabel>
void SlvPool<Tvalue, Tlabel>::ostream(std::ostream& _os) const {

	for (const_iterator it = begin(); it != end(); ++it) {
		_os << **it << ", " << (*it)->get_label() << std::endl;
	}

}

/*! Get name of template type. Specialization. Name SlvPool.*/
template <class Tvalue>
struct SlvDataName< SlvPool<Tvalue> > {
    static std::string name() {
        std::string name = "SlvPool";
        name += "<";
        name += SlvDataName<Tvalue>::name();
        name += ">";
        return name;
    }
};

#ifndef GLOVE_DISABLE_QT

class QStandardItem;

namespace glv {
	/*! Contains methods managing the conversion between template data and QStandardItemModel*/
	namespace tdata {
		/*! Manages Tdata to QStandardItem.*/
		/*! By default: data to string, string to data.*/
		/*! If a QStandardItemModelMaker specialization exists, then it is used to 2-ways translate Tdata to QStandardItem.*/
		template <class Tdata, typename = void>
		struct QStandardItemMaker;

		/*! Write \p _data in \p _item. If the data model exists, the model will expand at \p _item's location.*/
		template <class Tdata>
		void toQStandardItem(const Tdata& _data, QStandardItem* _item, const Qt::ItemFlag _flag_additional = Qt::NoItemFlags);
		/*! Read a data from \p _item.*/
		template <class Tdata>
		Tdata fromQStandardItem(const QStandardItem* _item);
	}

}

template <class Tdata, typename T>
struct glv::tdata::QStandardItemMaker {

	static void make(const Tdata& _data, QStandardItem* _item, const Qt::ItemFlag _flag_additional) {
		QString text = glv::toQString(_data);
		if (text != _item->text()) {
			_item->setText(text);
		}
	}

	static Tdata get_value(const QStandardItem* _item) {

		Tdata data = slv::string::string_to_value<Tdata>(_item->text().toStdString());
		return data;
	}

	static std::vector<int> get_coordinates(const QModelIndex& _index) {
		return std::vector<int>();
	}

};

class QStandardItemModel;

namespace glv {
	/*! Template data to QStandardItemModel management.*/
	namespace tdata {
		/*! Class to specialize to write and read a data to a QStandardItemModel at QModelIndex.
		* This is the very entry point specialization. Remainder is supposed to be automatic.*/
		template <class Tdata, typename = void>
		struct QStandardItemModelMaker {
			static constexpr bool is_specialized = false;
		};

		/*! Creates a model with a data.*/
		template <class Tdata>
		QStandardItemModel* toQStandardItemModel(const Tdata& _data);
		/*! Writes \p _data in \p _model at \p _index location.
		* Requires glv::tdata::QStandardItemModelMaker<Tdata> specialization.
		* _flag_additional adds a flag to QStandardItem created model. For instance, if flag is set to Qt::ItemIsEnabled, then disables Item */
		template <class Tdata>
		void toQStandardItemModel(const Tdata& _data, QStandardItemModel* _model, const QModelIndex _index = QModelIndex(), const Qt::ItemFlag _flag_additional = Qt::NoItemFlags);
		/*! Get data from a model.*/
		template <class Tdata>
		Tdata fromQStandardItemModel(const QStandardItemModel* _model, const QModelIndex _index = QModelIndex(), int _Mrows = -1, int _Ncols = -1);

		/*! Cast the QStandardItem corresponding to _index.*/
		template <class T>
		T* get_item(const QModelIndex& _index);

		template <class T>
		std::vector<int> get_coordinates(const QModelIndex& _index);

		constexpr Qt::ItemFlags type_mismatch_flag = Qt::ItemNeverHasChildren;
		constexpr bool l_allow_type_mismatch_edit = true;
	}

	/*! Resize a model at _index location.*/
	void resize(QStandardItemModel* _model, unsigned int _Mrows, unsigned int _Ncols = 1, const QModelIndex _index = QModelIndex());
	void resize_rows(QStandardItemModel* _model, unsigned int _Mrows, const QModelIndex _index = QModelIndex());
	void resize_cols(QStandardItemModel* _model, unsigned int _Ncols, const QModelIndex _index = QModelIndex());
}

/*! Specialization if there exists a specialization of glv::QStandardItemModelMaker.*/
template <class Tdata>
struct glv::tdata::QStandardItemMaker<Tdata, typename std::enable_if<glv::tdata::QStandardItemModelMaker<Tdata>::is_specialized>::type> {

	static void make(const Tdata& _data, QStandardItem* _item, const Qt::ItemFlag _flag_additional) {

		QStandardItemModel* model = dynamic_cast<QStandardItemModel*>(_item->model());
		if (model) {
			glv::tdata::toQStandardItemModel(_data, model, _item->index(), _flag_additional);
		} else {
			slv::flag::ISSUE(slv::flag::Critical, "make() : QStandardItem must already have a model");
		}

	}

	static Tdata get_value(const QStandardItem* _item) {

		Tdata data;

		QStandardItemModel* model = dynamic_cast<QStandardItemModel*>(_item->model());
		if (model) {
			data = glv::tdata::fromQStandardItemModel<Tdata>(model, _item->index());
		} else {
			slv::flag::ISSUE(slv::flag::Critical, "get_value() : QStandardItem must already have a model");
		}

		return data;
	}

	static std::vector<int> get_coordinates(QModelIndex& _index) {

		return glv::tdata::QStandardItemModelMaker<Tdata>::get_coordinates(_index);

	}

};

template <class Tdata>
void glv::tdata::toQStandardItem(const Tdata& _data, QStandardItem* _item, const Qt::ItemFlag _flag_additional) {

	glv::tdata::QStandardItemMaker<Tdata>::make(_data, _item, _flag_additional);
}

template <class Tdata>
Tdata glv::tdata::fromQStandardItem(const QStandardItem* _item) {

	return glv::tdata::QStandardItemMaker<Tdata>::get_value(_item);
}

template <class Tdata>
QStandardItemModel* glv::tdata::toQStandardItemModel(const Tdata& _data) {

	QStandardItemModel* model = new QStandardItemModel;
	glv::tdata::toQStandardItemModel(_data, model);
	return model;

}

template <class Tdata>
void glv::tdata::toQStandardItemModel(const Tdata& _data, QStandardItemModel* _model, const QModelIndex _index, const Qt::ItemFlag _flag_additional) {

	glv::tdata::QStandardItemModelMaker<Tdata>::make(_data, _model, _index, _flag_additional);
}

template <class Tdata>
Tdata glv::tdata::fromQStandardItemModel(const QStandardItemModel* _model, const QModelIndex _index, int _Mrows, int _Ncols) {

	return glv::tdata::QStandardItemModelMaker<Tdata>::get_value(_model, _index, _Mrows, _Ncols);
}

template <class T>
T* glv::tdata::get_item(const QModelIndex& _index) {

	if (_index.isValid()) {
		const QStandardItemModel* standard_item_model = dynamic_cast<const QStandardItemModel*>(_index.model());
		if (standard_item_model) {
			return dynamic_cast<T*>(standard_item_model->itemFromIndex(_index));
		} else {
			return 0;
		}
	} else {
		return 0;
	}

}

template <class T>
std::vector<int> glv::tdata::get_coordinates(const QModelIndex& _index) {

	QModelIndex index = _index;
	return glv::tdata::QStandardItemMaker<T>::get_coordinates(index);

}

/*! File to include for GlvItemDelegate.
* Includes both general case and modeled specialization.*/

template <class Tdata>
struct GlvLineEdit : public QLineEdit {

};

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent, typename = void>
class GlvItemDelegate;

class GlvAbstractItemView;

class GlvItemDelegate_base : public QStyledItemDelegate {

    Q_OBJECT

protected:

    GlvAbstractItemView* abstract_view;
    QModelIndex current_index;
    /*! Whether to update model data when value changes.*/
    bool l_dynamically_update_data;

    GlvItemDelegate_base(GlvAbstractItemView* _abstract_view, QObject* _parent = 0);
    virtual ~GlvItemDelegate_base();

    void editor_size_changed(QWidget* _editor) const;

    /*! Returns true if the flag of model's index is flagged as type mismatch.*/
    static bool is_mismatch_type(const QModelIndex& _index);

public:

    /*! Whether to update model data when value changes.*/
    void set_dynamically_update_data(bool _l_dynamically_update_data);
    /*! Return whether data is dynamically updated or not.*/
    bool is_dynamically_updating_data() const;

private slots:

    void resize_text_editor();//only for General delegate

protected slots:

    void value_changed_slot_dynamic_check();
    void value_changed_slot();
    /*! Slot catching event when editor's size changed.*/
    void item_changed_slot();
    /*! Slot catching event when editor's size changed. Also commits data.*/
    void item_changed_slot(const QString& _text);

};

#define Tenable_GlvItemDelegateGeneral typename std::enable_if<!glv::tdata::QStandardItemModelMaker<Tdata>::is_specialized>::type

/*! Item delegate for template data for which no model maker is known.
* Ie: no glv::tdata::QStandardItemModelMaker specialization.
* Tview is not used.*/
template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
class GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral> : public GlvItemDelegate_base {

public:

    /*! Static const boolean to check if the delegate is modeled or not. Here, false.
    * Usefull to avoid specialization in some cases.*/
    static bool is_modeled() { return false; }
    /*! Whether persistent editor is possible or not.*/
    static bool is_persistent() { return false; }

    GlvItemDelegate(GlvAbstractItemView* _abstract_view, QObject* _parent = 0);
    ~GlvItemDelegate();

private:
    /*! Reimplementation of QStyledItemDelegate.*/
    QWidget* createEditor(QWidget* _parent, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void destroyEditor(QWidget* _editor, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void setEditorData(QWidget* _editor, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void setModelData(QWidget* _editor, QAbstractItemModel* _model, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void updateEditorGeometry(QWidget* _editor, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;

};

//#include "GlvItemDelegate.h"

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::GlvItemDelegate(GlvAbstractItemView* _abstract_view, QObject* _parent) :GlvItemDelegate_base(_abstract_view, _parent) {

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::~GlvItemDelegate() {

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
QWidget* GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::createEditor(QWidget* _parent, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    QWidget* editor = QStyledItemDelegate::createEditor(_parent, _option, _index);

    QLineEdit* text_editor = dynamic_cast<QLineEdit*>(editor);
    connect(text_editor, SIGNAL(textChanged(const QString&)), this, SLOT(resize_text_editor()));
    connect(text_editor, SIGNAL(textChanged(const QString&)), this, SLOT(item_changed_slot(const QString&)));

    return editor;

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
void GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::destroyEditor(QWidget* _editor, const QModelIndex& _index) const {

    QStyledItemDelegate::destroyEditor(_editor, _index);
    editor_size_changed(NULL);// readjusts view and manages dummies

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
void GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::setEditorData(QWidget* _editor, const QModelIndex& _index) const {

    QStyledItemDelegate::setEditorData(_editor, _index);

}

#define GENERAL_DELEGATE_USE_TYPE

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
void GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::setModelData(QWidget* _editor, QAbstractItemModel* _model, const QModelIndex& _index) const {

#ifndef GENERAL_DELEGATE_USE_TYPE
    QStyledItemDelegate::setModelData(_editor, _model, _index);
#else
    Tdata data;
    std::istringstream iss(static_cast<QLineEdit*>(_editor)->text().toStdString());
    iss >> data;
    if (_model != _index.model()) {
        slv::flag::ISSUE(slv::flag::Critical, "Should not happen");
    }
    glv::tdata::toQStandardItem(data, dynamic_cast<QStandardItemModel*>(_model)->itemFromIndex(_index));
#endif

}

#undef GENERAL_DELEGATE_USE_TYPE

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview>
void GlvItemDelegate<Tdata, Tview, GlvLineEdit, false, Tenable_GlvItemDelegateGeneral>::updateEditorGeometry(QWidget* _editor, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    QStyledItemDelegate::updateEditorGeometry(_editor, _option, _index);
}

#undef Tenable_GlvItemDelegateGeneral

#define Tenable_GlvItemDelegateModeled typename std::enable_if<glv::tdata::QStandardItemModelMaker<Tdata>::is_specialized>::type

/*! Item delegate for template data for which model maker is known.
* Important: each delegate has to be closed in order to apply the edited values.*/
template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
class GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled> : public GlvItemDelegate_base {

public:

    /*! Static const boolean to check if the delegate is modeled or not. Here, true.
    * Usefull to avoid specialization in some cases.*/
    static bool is_modeled() { return true; }
    /*! Whether persistent editor is possible or not.*/
    static bool is_persistent() { return false; }

    GlvItemDelegate(GlvAbstractItemView* _abstract_view, QObject* _parent = 0);
    ~GlvItemDelegate();

private:
    /*! Reimplementation of QStyledItemDelegate.*/
    QWidget* createEditor(QWidget* _parent, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void destroyEditor(QWidget* _editor, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void paint(QPainter* _painter, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void setEditorData(QWidget* _editor, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void setModelData(QWidget* _editor, QAbstractItemModel* _model, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    QSize sizeHint(const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void updateEditorGeometry(QWidget* _editor, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    bool eventFilter(QObject* _editor, QEvent* _event);
};

#define delegate_completely_inside_cell 0

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::GlvItemDelegate(GlvAbstractItemView* _abstract_view, QObject* _parent) :GlvItemDelegate_base(_abstract_view, _parent) {

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::~GlvItemDelegate() {

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
QWidget* GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::createEditor(QWidget* _parent, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    //bool l_type_mismatch = static_cast<const QStandardItemModel*>(_index.model())->itemFromIndex(_index)->flags() & glv::tdata::type_mismatch_flag;
    if (!is_mismatch_type(_index)) {
        Tview<Tdata, Twidget, IsPersistent>* editor;

        editor = new Tview<Tdata, Twidget, IsPersistent>(_parent);
        editor->set_fixed_size(true);
        editor->set_dynamically_update_data(l_dynamically_update_data);
        connect(editor, SIGNAL(sizeChanged()), this, SLOT(item_changed_slot()));
        connect(editor, SIGNAL(valueChanged(const std::vector<int>&)), this, SLOT(value_changed_slot_dynamic_check()));
        const_cast<GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>*>(this)->current_index = _index;

        return editor;
    } else {
        QWidget* editor = QStyledItemDelegate::createEditor(_parent, _option, _index);

        QLineEdit* text_editor = dynamic_cast<QLineEdit*>(editor);
        connect(text_editor, SIGNAL(textChanged(const QString&)), this, SLOT(resize_text_editor()));
        connect(text_editor, SIGNAL(textChanged(const QString&)), this, SLOT(item_changed_slot(const QString&)));

        return editor;
    }

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::destroyEditor(QWidget* _editor, const QModelIndex& _index) const {

    QStyledItemDelegate::destroyEditor(_editor, _index);
    editor_size_changed(NULL);// readjusts view and manages dummies
    const_cast<GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>*>(this)->current_index = QModelIndex();

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::paint(QPainter* _painter, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    QStyledItemDelegate::paint(_painter, _option, _index);

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::setEditorData(QWidget* _editor, const QModelIndex& _index) const {

    if (!is_mismatch_type(_index)) {
        //used when editor is opened
        const QStandardItemModel* model = dynamic_cast<const QStandardItemModel*>(_index.model());
        Tdata data = glv::tdata::fromQStandardItemModel<Tdata>(model, _index);
        static_cast<Tview<Tdata, Twidget, IsPersistent>*>(_editor)->set_value(data);
    } else {
        QStyledItemDelegate::setEditorData(_editor, _index);
    }

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::setModelData(QWidget* _editor, QAbstractItemModel* _model, const QModelIndex& _index) const {

    //used when editor is closed
    //Warning : modifying _model at _index triggers setEditorData. So, glv::tdata::toQStandardItemModel must modify at index last after anything

    if (!is_mismatch_type(_index)) {
        Tdata data = static_cast<Tview<Tdata, Twidget, IsPersistent>*>(_editor)->get_value();
        if (_model != _index.model()) {
            slv::flag::ISSUE(slv::flag::Critical, "Should not happen");
        }
        glv::tdata::toQStandardItemModel(data, dynamic_cast<QStandardItemModel*>(_model), _index);//something here triggers setEditorData
    } else {
        QStyledItemDelegate::setModelData(_editor, _model, _index);
    }

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
QSize GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::sizeHint(const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

#if delegate_completely_inside_cell==1
    if (persistent_editors.find(_index) != persistent_editors.end()) {
        persistent_editors.at(_index)->adjustSize();
        QSize size = persistent_editors.at(_index)->sizeHint();
        size.setWidth(size.width() - 20);
        size.setHeight(size.height() - 10);
        return size;
    } else {
        return QStyledItemDelegate::sizeHint(_option, _index);
    }
#else
    return QStyledItemDelegate::sizeHint(_option, _index) + QSize(0, 0);
#endif

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::updateEditorGeometry(QWidget* _editor, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    QRect rect = _option.rect;
    QSize size = _editor->sizeHint();
    rect.setSize(size);
#if delegate_completely_inside_cell==1
    rect.setX(rect.x() - 10);
    rect.setY(rect.y() - 5);
#endif

    _editor->setGeometry(rect);//warning, triggers sizeChanged() of editor

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
bool GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateModeled>::eventFilter(QObject* _editor, QEvent* _event) {

    if (_event->type() == QEvent::FocusOut) {
        return true;
    } else {
        return QStyledItemDelegate::eventFilter(_editor, _event);
    }

}

#undef Tenable_GlvItemDelegateModeled

#define Tenable_GlvItemDelegateWidget typename std::enable_if<!glv::tdata::QStandardItemModelMaker<Tdata>::is_specialized>::type

/*! Item delegate for template data for which no model maker is known.
* Ie: no glv::tdata::QStandardItemModelMaker specialization.
* Tview is not used.*/
template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
class GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget> : public GlvItemDelegate_base {

public:

    /*! Static const boolean to check if the delegate is modeled or not. Here, false.
    * Usefull to avoid specialization in some cases.*/
    static bool is_modeled() { return false; }
    /*! Whether persistent editor is possible or not.*/
    static bool is_persistent() { return true; }

    GlvItemDelegate(GlvAbstractItemView* _abstract_view, QObject* _parent = 0);
    ~GlvItemDelegate();

private:
    /*! Reimplementation of QStyledItemDelegate.*/
    QWidget* createEditor(QWidget* _parent, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void destroyEditor(QWidget* _editor, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void paint(QPainter* _painter, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void setEditorData(QWidget* _editor, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void setModelData(QWidget* _editor, QAbstractItemModel* _model, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    QSize sizeHint(const QStyleOptionViewItem& _option, const QModelIndex& _index) const;
    /*! Reimplementation of QStyledItemDelegate.*/
    void updateEditorGeometry(QWidget* _editor, const QStyleOptionViewItem& _option, const QModelIndex& _index) const;

};

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::GlvItemDelegate(GlvAbstractItemView* _abstract_view, QObject* _parent) :GlvItemDelegate_base(_abstract_view, _parent) {

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::~GlvItemDelegate() {

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
QWidget* GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::createEditor(QWidget* _parent, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    if (!is_mismatch_type(_index)) {
        Twidget<Tdata>* editor;

        editor = new Twidget<Tdata>(_parent);
        connect(editor, SIGNAL(sizeChanged()), this, SLOT(item_changed_slot()));
        connect(editor, SIGNAL(valueChanged()), this, SLOT(value_changed_slot()));
        const_cast<GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>*>(this)->current_index = _index;
        editor->setAutoFillBackground(true);

        return editor;
    } else {
        QWidget* editor = QStyledItemDelegate::createEditor(_parent, _option, _index);

        QLineEdit* text_editor = dynamic_cast<QLineEdit*>(editor);
        connect(text_editor, SIGNAL(textChanged(const QString&)), this, SLOT(resize_text_editor()));
        connect(text_editor, SIGNAL(textChanged(const QString&)), this, SLOT(item_changed_slot(const QString&)));

        return editor;
    }

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::destroyEditor(QWidget* _editor, const QModelIndex& _index) const {

    QStyledItemDelegate::destroyEditor(_editor, _index);
    _editor = 0;
    editor_size_changed(_editor);
    const_cast<GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>*>(this)->current_index = QModelIndex();

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::paint(QPainter* _painter, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    QStyledItemDelegate::paint(_painter, _option, _index);

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::setEditorData(QWidget* _editor, const QModelIndex& _index) const {

    if (!is_mismatch_type(_index)) {
        const QStandardItemModel* model = dynamic_cast<const QStandardItemModel*>(_index.model());
        Tdata data = glv::tdata::fromQStandardItem<Tdata>(model->itemFromIndex(_index));
        static_cast<Twidget<Tdata>*>(_editor)->set_value(data);
    } else {
        QStyledItemDelegate::setEditorData(_editor, _index);
    }

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::setModelData(QWidget* _editor, QAbstractItemModel* _model, const QModelIndex& _index) const {

    //used when editor is closed
    //Warning : modifying _model at _index triggers setEditorData. So, glv::tdata::toQStandardItemModel must modify at index last after anything

    if (!is_mismatch_type(_index)) {
        Tdata data = static_cast<Twidget<Tdata>*>(_editor)->get_value();
        if (_model != _index.model()) {
            slv::flag::ISSUE(slv::flag::Critical, "Should not happen");
        }
        glv::tdata::toQStandardItem(data, dynamic_cast<QStandardItemModel*>(_model)->itemFromIndex(_index));//something here triggers setEditorData
    } else {
        QStyledItemDelegate::setModelData(_editor, _model, _index);
    }

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
QSize GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::sizeHint(const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    return QStyledItemDelegate::sizeHint(_option, _index);

}

template <class Tdata, template <class _Tdata, template <class __Tdata> class _Twidget, bool _IsPersistent> class Tview, template <class _Tdata> class Twidget, bool IsPersistent>
void GlvItemDelegate<Tdata, Tview, Twidget, IsPersistent, Tenable_GlvItemDelegateWidget>::updateEditorGeometry(QWidget* _editor, const QStyleOptionViewItem& _option, const QModelIndex& _index) const {

    QRect rect = _option.rect;
    QSize size = _editor->sizeHint();
    rect.setSize(size);

    _editor->setGeometry(rect);//warning, triggers sizeChanged() of editor

}

#undef Tenable_GlvItemDelegateWidget

class QAbstractItemView;

/*! Management of resize of QAbstractItemView due to delegate.*/
class GlvAbstractItemView {

private:

    // Can't diamond virtual inherit QAbstractItemView (qt forbids it). So a pointer can make it
    QAbstractItemView* item_view;
    bool l_fixed_size;

    bool l_check_dummy;//to check if runned twice and problem with add/Remove dummy
    QRect delegate_rect;
    QModelIndex delegate_index;

    /*! Max size of instance. Limits global size in case delegate editor is too large.
    * Used only if l_fixed_size is true.*/
    QSize max_size;

    //mini_offset is used if table_view is itself a delegate. Needed for some reason, otherwise unnecessary scrollbars can appear
    //Tweak parameters. Best case would be not to need them (ie = 0)
    glvm_staticVariable(const, int, mini_offset_x, 2);
    glvm_staticVariable(const, int, mini_offset_y, 2);
    glvm_staticVariable(const, int, mini_offset_with_delegate_x, 2);
    glvm_staticVariable(const, int, mini_offset_with_delegate_y, 2);

public:

    GlvAbstractItemView(QAbstractItemView* _item_view);
    ~GlvAbstractItemView();

    /*! Get QAbstractItemView.*/
    QAbstractItemView* get_item_view();

    /*! Reset QAbstractItemView.*/
    void reset();

    /*! Set max size of instance. Limits global size in case delegate editor is too large.
    * Used only if l_fixed_size is true.*/
    void set_max_size(const QSize& _max_size);
    /*! Set fixed size mode as true or false.
    * If true, the widget will have a fixed size up to max size property.
    * If false, the widget will have a free size for manual resizing.*/
    void set_fixed_size(bool _l_fixed_size);

    /*! Whether to update model data when value changes.*/
    virtual void set_dynamically_update_data(bool _l_dynamically_update_data) = 0;
    /*! Return whether data is dynamically updated or not.*/
    virtual bool is_dynamically_upating_data() const = 0;

private:

    virtual QSize get_view_offset() = 0;

    /*! Get total size of table, including dummy row/column or not.*/
    virtual QSize get_total_size(bool l_manage_dummy) const = 0;
    /*! Get the position of the corner of the delegate.*/
    virtual QSize get_delegate_corner(const QRect& _delegate_rect) const = 0;

    // Every resize_fit is supposed to be used only by GlvTreeView/GlvTableView.
    void resize_fit(bool _l_emit);
    void resize_fit(const QModelIndex& _index, bool _l_emit);
    void resize_fit(const QModelIndex& _index);//for click connection
    void resize_fit(const QRect& _delegate_rect, const QModelIndex& _delegate_index, bool _l_emit);

    /*! To be called only by GlvItemDelegate_base.*/
    void item_delegate_changed(const QRect& _delegate_rect, const QModelIndex& _delegate_index, bool _l_emit = true);
    void item_delegate_changed(bool _l_emit = true);
    /*! Emits sizeChanged() signal of inheriting classes.*/
    virtual void emit_sizeChanged() = 0;

    friend class GlvTableView_base;
    friend class GlvTreeView_base;
    friend class GlvItemDelegate_base;

    QSize get_size(const QSize& _table_size, const QSize& _max_size, bool& l_scrollbar_vertical_x, bool& l_scrollbar_horizontal_y);
    QSize get_size_with_delegate(const QSize& _tab_size, const QRect& _delegate_geometry, bool _l_scrollbar_vertical_x, bool _l_scrollbar_horizontal_y);
    QSize new_size_after_delegate_if_still_needs_scrollbars(const QSize& _new_size, const bool _l_scrollbar_vertical_x, const bool _l_scrollbar_horizontal_y);

    virtual bool manage_dummy_column(int _delegate_offset_x, int _default_size_x, const QModelIndex& _delegate_index) = 0;
    virtual bool manage_dummy_row(int _delegate_offset_y, int _default_size_y, const QModelIndex& _delegate_index) = 0;
    virtual void manage_dummy_remove(bool l_remove_dummy_row, bool l_remove_dummy_column) = 0;

};

/*! Base class of GlvTableView.*/
class GlvTableView_base : public QTableView, public GlvAbstractItemView {

    Q_OBJECT

private:
    /*! Edit triggers savec when switching from editable to not editable.*/
    QAbstractItemView::EditTriggers edit_triggers;

protected:

    /*! Whether a row is added to make space for delegate widget.*/
    bool l_dummy_row;
    /*! Whether a column is added to make space for delegate widget.*/
    bool l_dummy_column;

protected://could be public, but there is not real reason for GlvTableView to be

    GlvTableView_base(QWidget* _parent = 0);
    ~GlvTableView_base();

public:

    /*! Reimplementation of QTableView::setModel.*/
    void setModel(QAbstractItemModel* _model);

    /*! Allow edition or not.*/
    void set_editable(bool _l_edit);

    /*! Reimplementation to save editable triggers.*/
    void setEditTriggers(QAbstractItemView::EditTriggers _triggers);

protected:

    /*! Resize table to fit content. \p _l_emit : whether to emit sizeChanged or not.*/
    void resize_fit(bool _l_emit);

    /*! Set dummy row/column status to false.*/
    void reset_dummies();

    void showEvent(QShowEvent* _event);

private:

    /*! Get total size of table, including dummy row/column or not.*/
    QSize get_total_size(bool _l_manage_dummy) const;
    /*! Get the position of the corner of the delegate.*/
    QSize get_delegate_corner(const QRect& _delegate_rect) const;
    /*! Emits size_Changed() signal. Reimplementation of pure virtual method.*/
    void emit_sizeChanged();

    /*! Manage view enlargement when delegate is opened.*/
    bool manage_dummy_column(int _delegate_offset_x, int _default_size_x, const QModelIndex& _delegate_index);
    /*! Manage view enlargement when delegate is opened.*/
    bool manage_dummy_row(int _delegate_offset_y, int _default_size_y, const QModelIndex& _delegate_index);
    /*! Manage view enlargement when delegate is opened.*/
    void manage_dummy_remove(bool l_remove_dummy_row, bool l_remove_dummy_column);

    QSize get_view_offset();

private slots:

    void resize_fit(const QModelIndex& _index);//for click connection

    /*! Select index \p _index.*/
    void select(const QModelIndex& _index) const;

    /*! Emit the coordinates corresponding to \p _index accord to data dimension.*/
    virtual void cell_changed_slot(const QModelIndex& _index) = 0;

protected slots:
    /*! Reimplementation. Recursivity only is dynamic update of data is false, in order to appl a full commit when closing the editor.
    * See: set_dynamically_update_data() */
    void commitData(QWidget* editor);
private:
    void commitData();

signals:

    /*! Emitted whenever model value changes. \p _coordinates are the coordinates of the cell which changed.*/
    void cell_changed(const std::vector<int>& _coordinates);
    /*! Same as cell_changed(). Allow to keep 'cell_changed' for better IDE tracking.*/
    void valueChanged(const std::vector<int>& _coordinates);
    /*! Emitted whenever the size of the widget changes.*/
    void sizeChanged();

};

template <class Tdata>
struct GlvLineEdit;

/*! IsPersistent : Whether delegates are persistent or not, provided Twidget_final is GlvWidget*/
template <class Tdata, template <class _Tdata> class Twidget_final = GlvLineEdit, bool IsPersistent = false>
class GlvTableView;

/*! Makes a table view from a template data.
* If a glv::tdata::QStandardItemModelMaker specialization exists, each delegate item is a GlvTableView.
* Can manage delegate's editor space by adding temporary header sections.
* Edition mode is forced to double click if delegate is modeled.
* It prevents clicking on temporary sections.*/
template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
class GlvTableView : public GlvTableView_base {

public:

    GlvTableView(QWidget* _parent = 0);
    GlvTableView(const Tdata& _value, QWidget* _parent = 0);
    ~GlvTableView();

    Tdata get_value() const;
    void set_value(const Tdata& _data);

    /*! Reimplementation to force to double click if delegate is modeled.*/
    void setEditTriggers(EditTriggers _triggers);

    /*! Whether to update model data when value changes. Default value is true.
    * If false, then the model data is updated only when closing the main editor.*/
    void set_dynamically_update_data(bool _l_dynamically_update_data);
    /*! Return whether data is dynamically updated or not.*/
    bool is_dynamically_upating_data() const;

private:
    /*! Emit the coordinates corresponding to \p _index accord to data dimension.*/
    void cell_changed_slot(const QModelIndex& _index);

};

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
GlvTableView<Tdata, Twidget_final, IsPersistent>::GlvTableView(QWidget* _parent) :GlvTableView(Tdata(), _parent) {

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
GlvTableView<Tdata, Twidget_final, IsPersistent>::GlvTableView(const Tdata& _value, QWidget* _parent) : GlvTableView_base(_parent) {

    GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>* item_delegate = dynamic_cast<GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>*>(this->itemDelegate());

    //check existing self made delegate (unlikely)
    if (!item_delegate) {
        item_delegate = new GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>(this);
        this->setItemDelegate(item_delegate);
    }

    set_value(_value);
    GlvTableView_base::setEditTriggers(EditTrigger::DoubleClicked);

    if (GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>::is_modeled()) {
        GlvTableView_base::setEditTriggers(EditTrigger::DoubleClicked);
    }

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
GlvTableView<Tdata, Twidget_final, IsPersistent>::~GlvTableView() {

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
Tdata GlvTableView<Tdata, Twidget_final, IsPersistent>::get_value() const {

    Tdata value;
    QStandardItemModel* model_ = dynamic_cast<QStandardItemModel*>(model());
    int Mrows = model_->rowCount();
    int Ncols = model_->columnCount();
    if (l_dummy_row) {
        Mrows--;
    }
    if (l_dummy_column) {
        Ncols--;
    }
    value = glv::tdata::fromQStandardItemModel<Tdata>(model_, QModelIndex(), Mrows, Ncols);

    return value;
}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
void GlvTableView<Tdata, Twidget_final, IsPersistent>::set_value(const Tdata& _data) {

    if (!model()) {
        setModel(glv::tdata::toQStandardItemModel(_data));
    } else {

        this->setCurrentIndex(QModelIndex());// Close delegate editor if opened. Prevents overwriting of model when closing the editor after value is set.

        QStandardItemModel* _model = dynamic_cast<QStandardItemModel*>(model());
        reset_dummies();//must be set before, because model modification can trigger 'parent' of this if this is delegate
        _model->blockSignals(true);//block signals so cell_changed() is not emitted each time an item of model is changed
        glv::tdata::toQStandardItemModel(_data, _model);
        _model->blockSignals(false);
        resize_fit(true);
        emit _model->layoutChanged();//to refresh view automatically
    }

    if (GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>::is_persistent()) {
        int Mrows = model()->rowCount();
        int Ncols = model()->columnCount();
        QModelIndex index;
        //setUpdatesEnabled(false);
        for (int i = 0; i < Mrows; ++i) {
            for (int j = 0; j < Ncols; ++j) {
                index = model()->index(i, j);
                bool l_type_mismatch = static_cast<QStandardItemModel*>(model())->itemFromIndex(index)->flags() & glv::tdata::type_mismatch_flag;
                if (!QTableView::isPersistentEditorOpen(index) && !l_type_mismatch && IsPersistent) {
                    QTableView::openPersistentEditor(index);
                }

                // If type mismatch : disable editing. Using a type dedicated widget is not possible
                if (l_type_mismatch && !std::is_same<Twidget_final<void>, GlvLineEdit<void>>::value) {//Twidget_final comparison is actually redundant with is_persistent() for now
                    if (!glv::tdata::l_allow_type_mismatch_edit) {
                        Qt::ItemFlags flags = static_cast<QStandardItemModel*>(model())->itemFromIndex(index)->flags();
                        static_cast<QStandardItemModel*>(model())->itemFromIndex(index)->setFlags(flags ^ Qt::ItemIsEditable);
                    }
                }
            }
        }
        //setUpdatesEnabled(true);
    }

    if (GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>::is_persistent() && IsPersistent) {
        //horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
        int rowCount = model()->rowCount();
        int columnCount = model()->columnCount();
        if (rowCount > 0) {
            for (int j = 0; j < columnCount; j++) {
                QModelIndex index = model()->index(0, j);
                bool l_type_mismatch = static_cast<QStandardItemModel*>(model())->itemFromIndex(index)->flags() & glv::tdata::type_mismatch_flag;
                if (!l_type_mismatch) {
                    horizontalHeader()->setSectionResizeMode(j, QHeaderView::ResizeToContents);
                } else {
                    //horizontalHeader()->setSectionResizeMode(j, QHeaderView::Interactive);
                }
            }
        } else {
            //horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
        }

        verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    }

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
void GlvTableView<Tdata, Twidget_final, IsPersistent>::setEditTriggers(EditTriggers _triggers) {

    if (!GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>::is_modeled()) {
        GlvTableView::setEditTriggers(_triggers);
    }

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
void GlvTableView<Tdata, Twidget_final, IsPersistent>::set_dynamically_update_data(bool _l_dynamically_update_data) {

    GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>* item_delegate = dynamic_cast<GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>*>(this->itemDelegate());

    if (item_delegate) {
        item_delegate->set_dynamically_update_data(_l_dynamically_update_data);
    }

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
bool GlvTableView<Tdata, Twidget_final, IsPersistent>::is_dynamically_upating_data() const {

    GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>* item_delegate = dynamic_cast<GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTableView, Twidget_final, IsPersistent>*>(this->itemDelegate());
    return item_delegate->is_dynamically_updating_data();

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
void GlvTableView<Tdata, Twidget_final, IsPersistent>::cell_changed_slot(const QModelIndex& _index) {

    std::vector<int> coordinates = glv::tdata::get_coordinates<Tdata>(_index);
    emit cell_changed(coordinates);

}

/*! Convenience alias for a GlvTableView with regular line edit.*/
template <class Tdata>
using GlvTableViewLineEdit = GlvTableView<Tdata>;
/*! Convenience alias for a GlvTableView with end editor as GlvWidget.*/
template <class Tdata>
using GlvTableViewWidget = GlvTableView<Tdata, GlvWidget>;
/*! Convenience alias for a GlvTableView with end editor as persistent GlvWidget.*/
template <class Tdata>
using GlvTableViewWidgetPersistent = GlvTableView<Tdata, GlvWidget, true>;

class QDialogButtonBox;

#define Variadic_templates template <class T> typename... Types

/*! Convenience class to build a Ok/Cancel QDialog widget. Twidget can be data display widget such as GlvWidgetData, GlvTableView, or GlvTreeView.*/
template <template <class _Tdata, Variadic_templates> class Twidget, class Tdata>
class GlvDialogData : public QDialog {

private:

	Twidget<Tdata>* widget;
	QDialogButtonBox* button_box;

public:

	GlvDialogData(const Tdata _data = Tdata());
	~GlvDialogData();

	/*! Return the widget managing the data.*/
	Twidget<Tdata>* get_widget();

	/*! Get value currently displayed in the widget.*/
	Tdata get_value() const;
	/*! Set value to the widget.*/
	void set_value(const Tdata& _data);

};

template <template <class _Tdata, Variadic_templates> class Twidget, class Tdata>
GlvDialogData<Twidget, Tdata>::GlvDialogData(const Tdata _data) {

	QVBoxLayout* layout = new QVBoxLayout;
	this->setLayout(layout);
	widget = new Twidget<Tdata>(_data);
	layout->addWidget(widget);

	button_box = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
	connect(button_box, &QDialogButtonBox::accepted, this, &QDialog::accept);
	connect(button_box, &QDialogButtonBox::rejected, this, &QDialog::reject);
	layout->addWidget(button_box);

}

template <template <class _Tdata, Variadic_templates> class Twidget, class Tdata>
GlvDialogData<Twidget, Tdata>::~GlvDialogData() {

}

template <template <class _Tdata, Variadic_templates> class Twidget, class Tdata>
Twidget<Tdata>* GlvDialogData<Twidget, Tdata>::get_widget() {

	return widget;

}

template <template <class _Tdata, Variadic_templates> class Twidget, class Tdata>
Tdata GlvDialogData<Twidget, Tdata>::get_value() const {

	return widget->get_value();

}

template <template <class _Tdata, Variadic_templates> class Twidget, class Tdata>
void GlvDialogData<Twidget, Tdata>::set_value(const Tdata& _data) {

	widget->set_value();

}

#undef Variadic_templates

template <class Tdata>
using GlvTableDialog = GlvDialogData<GlvTableViewLineEdit, Tdata>;
template <class Tdata>
using GlvTableWidgetDialog = GlvDialogData<GlvTableViewWidget, Tdata>;
template <class Tdata>
using GlvTableWidgetPersistentDialog = GlvDialogData<GlvTableViewWidgetPersistent, Tdata>;

/*! Base class of GlvTreeView.*/
class GlvTreeView_base : public QTreeView, public GlvAbstractItemView {

    Q_OBJECT

private:

    QRect delegate_rect;
    QModelIndex delegate_index;

protected:

    GlvTreeView_base(QWidget* _parent = 0);
    ~GlvTreeView_base();

public:

    void setModel(QAbstractItemModel* _model);

protected:

    void resize_fit(bool l_emit);

private:

    /*! Emits size_Changed() signal. Reimplementation of pure virtual method.*/
    void emit_sizeChanged();

    /*! Get total size of table, including dummy row/column or not.*/
    QSize get_total_size(bool l_manage_dummy) const;
    /*! Get the position of the corner of the delegate.*/
    QSize get_delegate_corner(const QRect& _delegate_rect) const;

    /*! Not operational for now. Manage view enlargement when delegate is opened.*/
    bool manage_dummy_column(int _delegate_offset_x, int _default_size_x, const QModelIndex& _delegate_index);
    /*! Not operational for now. Manage view enlargement when delegate is opened.*/
    bool manage_dummy_row(int _delegate_offset_y, int _default_size_y, const QModelIndex& _delegate_index);
    /*! Not operational for now. Manage view enlargement when delegate is opened.*/
    void manage_dummy_remove(bool l_remove_dummy_row, bool l_remove_dummy_column);

    QSize get_view_offset();

public slots:

    void resize_fit(const QModelIndex& _index);//for click connection

private slots:

    /*! Select index \p _index.*/
    void select(const QModelIndex& _index) const;

signals:

    /*! Emitted whenever model value changes.*/
    void cell_changed();
    /*! Same as cell_changed(). Allow to keep 'cell_changed' for better IDE tracking.*/
    void valueChanged();
    /*! Emitted whenever the size of the widget changes.*/
    void sizeChanged();
};

template <class Tdata>
struct GlvLineEdit;

template <class Tdata, template <class _Tdata> class Twidget_final = GlvLineEdit, bool IsPersistent = false>
class GlvTreeView;

/*! Makes a table view from a template data. Caution: work in progress for proper management of delegates size.
* If a glv::tdata::QStandardItemModelMaker specialization exists, each delegate item is a GlvTreeView.
* Can manage delegate's editor space by adding temporary header sections.
* Edition mode is forced to double click if delegate is modeled.
* It prevents clicking on temporary sections.*/
template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
class GlvTreeView : public GlvTreeView_base {

public:

    GlvTreeView(QWidget* _parent = 0);
    GlvTreeView(const Tdata& _value, QWidget* _parent = 0);
    ~GlvTreeView();

    Tdata get_value() const;
    void set_value(const Tdata& _data);

    /*! Whether to update model data when value changes.*/
    void set_dynamically_update_data(bool _l_dynamically_update_data);
    /*! Return whether data is dynamically updated or not.*/
    bool is_dynamically_upating_data() const;

};

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
GlvTreeView<Tdata, Twidget_final, IsPersistent>::GlvTreeView(QWidget* _parent) :GlvTreeView(Tdata(), _parent) {

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
GlvTreeView<Tdata, Twidget_final, IsPersistent>::GlvTreeView(const Tdata& _value, QWidget* _parent) : GlvTreeView_base(_parent) {

    GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>* delegate = dynamic_cast<GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>*>(this->itemDelegate());

    //check existing self made delegate (unlikely)
    if (!delegate) {
        GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>* delegate = new GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>(this);
        this->setItemDelegate(delegate);
    }

    set_value(_value);
}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
GlvTreeView<Tdata, Twidget_final, IsPersistent>::~GlvTreeView() {

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
Tdata GlvTreeView<Tdata, Twidget_final, IsPersistent>::get_value() const {

    Tdata value;
    QStandardItemModel* model_ = dynamic_cast<QStandardItemModel*>(model());
    value = glv::tdata::fromQStandardItemModel<Tdata>(model_);
    return value;

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
void GlvTreeView<Tdata, Twidget_final, IsPersistent>::set_value(const Tdata& _data) {

    if (!model()) {
        setModel(glv::tdata::toQStandardItemModel(_data));
    } else {
        QStandardItemModel* _model = dynamic_cast<QStandardItemModel*>(model());
        //reset_dummies();//must be set before, because model modification can trigger 'parent' of this if this is delegate
        _model->blockSignals(true);//block signals so cell_changed() is not emitted each time an item of model is changed
        glv::tdata::toQStandardItemModel(_data, _model);
        _model->blockSignals(false);
        emit _model->layoutChanged();//to refresh view automatically
    }

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
void GlvTreeView<Tdata, Twidget_final, IsPersistent>::set_dynamically_update_data(bool _l_dynamically_update_data) {

    GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>* item_delegate = dynamic_cast<GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>*>(this->itemDelegate());

    if (item_delegate) {
        item_delegate->set_dynamically_update_data(_l_dynamically_update_data);
    }

}

template <class Tdata, template <class _Tdata> class Twidget_final, bool IsPersistent>
bool GlvTreeView<Tdata, Twidget_final, IsPersistent>::is_dynamically_upating_data() const {

    GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>* item_delegate = dynamic_cast<GlvItemDelegate<typename glv::tdata::QStandardItemModelMaker<Tdata>::Tdata_sub, GlvTreeView, Twidget_final, IsPersistent>*>(this->itemDelegate());
    return item_delegate->is_dynamically_updating_data();

}

/*! Convenience alias for a GlvTreeView with regular line edit.*/
template <class Tdata>
using GlvTreeViewLineEdit = GlvTreeView<Tdata>;
/*! Convenience alias for a GlvTreeView with end editor as GlvWidget.*/
template <class Tdata>
using GlvTreeViewWidget = GlvTreeView<Tdata, GlvWidget>;
/*! Convenience alias for a GlvTreeView with end editor as persistent GlvWidget.*/
template <class Tdata>
using GlvTreeViewWidgetPersistent = GlvTreeView<Tdata, GlvWidget, true>;

template <class Tdata>
using GlvTreeDialog = GlvDialogData<GlvTreeViewLineEdit, Tdata>;
template <class Tdata>
using GlvTreeWidgetDialog = GlvDialogData<GlvTreeViewWidget, Tdata>;
template <class Tdata>
using GlvTreeWidgetPersistentDialog = GlvDialogData<GlvTreeViewWidgetPersistent, Tdata>;

// Containers, except std::map, std::unordered_map and std::string
#define Tenable typename std::enable_if<SlvIsContainer<Tcontainer>::value && !SlvIsMap<Tcontainer>::value && !std::is_same<Tcontainer, std::string>::value>::type
#define Tenable_sub typename std::enable_if<SlvIsContainer<typename _Tcontainer::value_type>::value && !SlvIsMap<typename _Tcontainer::value_type>::value && !std::is_same<typename _Tcontainer::value_type, std::string>::value>::type

/*! Specialization of QStandardItemModelMaker for std::vector, std::list, std::deque, std::array.*/
template <class Tcontainer>
struct glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable> {
    static constexpr bool is_specialized = true;
private:
    template <class _Tcontainer, typename = void>
    struct ContainerHandler;
    template <class _Tcontainer, typename = void>
    struct ContainerHandlerResize;
public:
    typedef typename ContainerHandler<Tcontainer>::Tdata_sub Tdata_sub;
private:
    static QString get_root_text(unsigned int _Mrows, unsigned int _Ncols);
public:
    static void make(const Tcontainer& _container, QStandardItemModel* _model, const QModelIndex _index = QModelIndex(), const Qt::ItemFlag _flag_additional = Qt::NoItemFlags);

    static Tcontainer get_value(const QStandardItemModel* _model, const QModelIndex& _index, const int _Mrows, const int _Ncols);

    static std::vector<int> get_coordinates(QModelIndex& _index);
};

template <class Tcontainer>
template <class _Tcontainer, typename>
struct glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::ContainerHandlerResize {
    static void resize(_Tcontainer& _container, int _size) {
        _container.resize(_size);
    }
};

glvm_SlvHasMethodSignature(SlvHasResize, void, resize, 0)

template <class Tcontainer>
template <class _Tcontainer>
struct glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::ContainerHandlerResize<_Tcontainer, typename std::enable_if<!SlvHasResize<_Tcontainer>::value>::type> {
    static void resize(_Tcontainer& _container, int _size) {
        
    }
};

template <class Tcontainer>
template <class _Tcontainer, typename>
struct glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::ContainerHandler {

    typedef typename Tcontainer::value_type Tdata_sub;

    static std::size_t get_size(const Tcontainer& _container) {
        return 1;
    }

    static void set_model(const typename Tcontainer::value_type& _value, int _i, QStandardItemModel* _model, const QModelIndex& _index, const Qt::ItemFlag _flag_additional) {

        QModelIndex index;
        index = _model->index(_i, 0, _index);
        glv::tdata::toQStandardItem(_value, _model->itemFromIndex(index));
        _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | _flag_additional);

    }

    static void resize(typename Tcontainer::value_type& _value, int _Ncols) {

    }

    static void get_value(typename Tcontainer::value_type& _value, int _i, const QStandardItemModel* _model, const QModelIndex& _index) {

        QStandardItem* item = _model->itemFromIndex(_model->index(_i, 0, _index));
        _value = glv::tdata::fromQStandardItem<typename Tcontainer::value_type>(item);

    }

    static void add_coordinate(std::vector<int>& _coordinates, QModelIndex& _index) {

    }

};

template <class Tcontainer>
template <class _Tcontainer>
struct glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::ContainerHandler<_Tcontainer, Tenable_sub> {

    typedef typename Tcontainer::value_type::value_type Tdata_sub;

    static std::size_t get_size(const Tcontainer& _data) {
        std::size_t size = 0;
        for (typename Tcontainer::const_iterator it = _data.begin(); it != _data.end(); ++it) {
            if (it->size() > size) {
                size = it->size();
            }
        }
        return size;
    }

    static void set_model(const typename Tcontainer::value_type& _value, int _i, QStandardItemModel* _model, const QModelIndex& _index, const Qt::ItemFlag _flag_additional) {

        QModelIndex index;
        int j = 0;
        for (typename Tcontainer::value_type::const_iterator it = _value.begin(); it != _value.end(); ++it, j++) {
            index = _model->index(_i, j, _index);
            glv::tdata::toQStandardItem(*it, _model->itemFromIndex(index));
            _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | _flag_additional);
        }

    }

    static void resize(typename Tcontainer::value_type& _value, int _Ncols) {

        ContainerHandlerResize<typename Tcontainer::value_type>::resize(_value, _Ncols);

    }

    static void get_value(typename Tcontainer::value_type& _value, int _i, const QStandardItemModel* _model, const QModelIndex& _index) {

        QStandardItem* item;
        int j = 0;
        for (typename Tcontainer::value_type::iterator it = _value.begin(); it != _value.end(); ++it, j++) {
            item = _model->itemFromIndex(_model->index(_i, j, _index));
            *it = glv::tdata::fromQStandardItem<typename Tcontainer::value_type::value_type>(item);
        }

    }

    static void add_coordinate(std::vector<int>& _coordinates, QModelIndex& _index) {

        _coordinates.insert(_coordinates.begin(), _index.column());

    }

};

template <class Tcontainer>
QString glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::get_root_text(unsigned int _Mrows, unsigned int _Ncols) {
    return QString::number(_Mrows) + "x" + QString::number(_Ncols);
}

template <class Tcontainer>
void glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::make(const Tcontainer& _container, QStandardItemModel* _model, const QModelIndex _index, const Qt::ItemFlag _flag_additional) {

    if (_model) {

        if (_index == QModelIndex() || _index.model() == _model) {

            unsigned int Mrows = (unsigned int)_container.size();
            glv::resize_rows(_model, Mrows, _index);
            unsigned int Ncols = (unsigned int)ContainerHandler<Tcontainer>::get_size(_container);
            glv::resize_cols(_model, Ncols, _index);

            QModelIndex index;
            typename Tcontainer::const_iterator it = _container.begin();
            for (int i = 0; i < (int)Mrows; i++, ++it) {
                ContainerHandler<Tcontainer>::set_model(*it, i, _model, _index, _flag_additional);
            }

            if (_index != QModelIndex()) {
                QString root_text = get_root_text(Mrows, Ncols);
                if (_model->itemFromIndex(_index)->text() != root_text) {
                    _model->itemFromIndex(_index)->setText(root_text);
                }
            }

        } else {
            slv::flag::ISSUE(slv::flag::Critical, "index's model is different from the one it is supposed to belong to");
        }

    } else {
        slv::flag::ISSUE(slv::flag::Critical, "_model is NULL");
    }

}

template <class Tcontainer>
Tcontainer glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::get_value(const QStandardItemModel* _model, const QModelIndex& _index, const int _Mrows, const int _Ncols) {

    Tcontainer container;

    if (_index == QModelIndex() || _index.model() == _model) {

        int Mrows = (_Mrows == -1) ? _model->rowCount(_index) : std::min(_model->rowCount(_index), _Mrows);
        int Ncols = (_Ncols == -1) ? _model->columnCount(_index) : std::min(_model->columnCount(_index), _Ncols);

        ContainerHandlerResize<Tcontainer>::resize(container, Mrows);
        for (typename Tcontainer::iterator it = container.begin(); it != container.end(); ++it) {
            ContainerHandler<Tcontainer>::resize(*it, Ncols);
        }

        typename Tcontainer::iterator it = container.begin();
        for (int i = 0; i < Mrows; i++, ++it) {
            ContainerHandler<Tcontainer>::get_value(*it, i, _model, _index);
        }

    } else {
        slv::flag::ISSUE(slv::flag::Critical, "index's model is different from the one it is supposed to belong to");
    }

    return container;

}

template <class Tcontainer>
std::vector<int> glv::tdata::QStandardItemModelMaker<Tcontainer, Tenable>::get_coordinates(QModelIndex& _index) {

    std::vector<int> coordinates = glv::tdata::QStandardItemMaker<Tdata_sub>::get_coordinates(_index);
    ContainerHandler<Tcontainer>::add_coordinate(coordinates, _index);
    coordinates.insert(coordinates.begin(), _index.row());
    _index = _index.parent();

    return coordinates;
}

#undef Tenable

// Container of container, except std::map, std::unordered_map and std::string
#define Tenable typename std::enable_if<SlvIsContainer<Tcontainer>::value && SlvIsContainer<typename Tcontainer::value_type>::value && !SlvIsMap<Tcontainer>::value && !std::is_same<Tcontainer, std::string>::value>::type

/*! GlvWidgetData specialization for template type: .*/
template <class Tcontainer>
class GlvWidgetData<Tcontainer, Tenable> : public GlvTableView<Tcontainer> {

public:
    GlvWidgetData(Tcontainer _container = Tcontainer(), QWidget* _parent = 0) :GlvTableView<Tcontainer>(_container, _parent) {}
    ~GlvWidgetData() {}

};

template <class Tcontainer>
struct GlvWidgetMakerConnect<Tcontainer, Tenable> {
    static void connect(GlvWidgetData<Tcontainer>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged(const std::vector<int>&)), _widget_connector, SLOT(valueChanged_slot(const std::vector<int>&)));
    }
};

#undef Tenable

/*! Simple QStandardItem containing a template value and its expression in QString. If no specialization of glv::toQString<T>, slv::string::to_string<T> is used.*/
template <class T>
class GlvStandardItem : public QStandardItem {

protected:

    T value;

public:

    GlvStandardItem();
    GlvStandardItem(const T& _value);
    /*! Text can be explicitly set.*/
    GlvStandardItem(const QString& text);
    GlvStandardItem(const QString& text, const T& _value);
    GlvStandardItem(const QIcon& icon, const QString& text, const T& _value);

    ~GlvStandardItem();

    const T& get_value() const;
    void set_value(const T& _value);

};

template <class T>
GlvStandardItem<T>::GlvStandardItem() :QStandardItem(), value(T()) {

}

template <class T>
GlvStandardItem<T>::GlvStandardItem(const T& _value) : QStandardItem(glv::toQString(_value)), value(_value) {

}

template <class T>
GlvStandardItem<T>::GlvStandardItem(const QString& text) : QStandardItem(text), value(T()) {

}

template <class T>
GlvStandardItem<T>::GlvStandardItem(const QString& text, const T& _value) : QStandardItem(text), value(_value) {

}

template <class T>
GlvStandardItem<T>::GlvStandardItem(const QIcon& icon, const QString& text, const T& _value) : QStandardItem(icon, text), value(_value) {

}

template <class T>
GlvStandardItem<T>::~GlvStandardItem() {

}

template <class T>
const T& GlvStandardItem<T>::get_value() const {

    return value;

}

template <class T>
void GlvStandardItem<T>::set_value(const T& _value) {

    value = _value;

}

/*! Specialization of QStandardItemModelMaker for std::map.*/
template <class Tkey, class Tvalue>
struct glv::tdata::QStandardItemModelMaker< std::map<Tkey, Tvalue> > {
    static constexpr bool is_specialized = true;
    typedef Tvalue Tdata_sub;
private:
    static QString get_root_text(unsigned int _size) {
        return glv::toQString(SlvDataName< std::map<Tkey, Tvalue> >::name()) + " : " + QString::number(_size);
    }
public:
    static void make(const std::map<Tkey, Tvalue>& _map, QStandardItemModel* _model, const QModelIndex _index = QModelIndex(), const Qt::ItemFlag _flag_additional = Qt::NoItemFlags) {

        if (_model && (_index == QModelIndex() || _index.model() == _model)) {

            glv::resize(_model, (unsigned int)_map.size(), 2, _index);

            QModelIndex index;
            int i = 0;
            for (typename std::map<Tkey, Tvalue>::const_iterator it = _map.begin(); it != _map.end(); ++it, i++) {
                index = _model->index(i, 0, _index);
                glv::tdata::toQStandardItem(it->first, _model->itemFromIndex(index));

                _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | _flag_additional);
                
                // If Tvalue is specialized, disable Tkey editing
                static bool condition = glv::tdata::QStandardItemModelMaker<Tkey>::is_specialized || (glv::tdata::QStandardItemModelMaker<Tvalue>::is_specialized && !glv::tdata::l_allow_type_mismatch_edit);
                // C4127
                if (condition) {
                    _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() ^ Qt::ItemIsEditable);
                }
                if (!std::is_same<Tkey, Tvalue>::value) {
                    _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | glv::tdata::type_mismatch_flag);
                }

                index = _model->index(i, 1, _index);
                glv::tdata::toQStandardItem(it->second, _model->itemFromIndex(index));
                _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | _flag_additional);
            }

            if (_index != QModelIndex()) {
                QString root_text = get_root_text((unsigned int)_map.size());
                if (_model->itemFromIndex(_index)->text() != root_text) {
                    _model->itemFromIndex(_index)->setText(root_text);
                }
            }

        }

    }

    static std::map<Tkey, Tvalue> get_value(const QStandardItemModel* _model, const QModelIndex& _index, const int _Mrows, const int _Ncols) {

        std::map<Tkey, Tvalue> map;

        if (_index == QModelIndex() || _index.model() == _model) {

            int N = (_Mrows == -1) ? _model->rowCount(_index) : std::min(_model->rowCount(_index), _Mrows);

            if (_model->columnCount(_index) >= 2) {

                QStandardItem* item;
                Tkey key;
                Tvalue value;
                typename std::map<Tkey, Tvalue>::iterator it;
                for (int i = 0; i < N; i++) {
                    item = _model->itemFromIndex(_model->index(i, 0, _index));
                    key = glv::tdata::fromQStandardItem<Tkey>(item);
                    it = map.find(key);
                    if (it == map.end()) {
                        item = _model->itemFromIndex(_model->index(i, 1, _index));
                        value = glv::tdata::fromQStandardItem<Tvalue>(item);
                        map[key] = value;
                    } else {
                        // key already exists
                    }
                }

            } else {
                slv::flag::ISSUE(slv::flag::Critical, "std::map requires two columns in the model");
            }

        } else {
            slv::flag::ISSUE(slv::flag::Critical, "index's model is different from the one it is supposed to belong to");
        }

        return map;
    }

    static std::vector<int> get_coordinates(QModelIndex& _index) {

        std::vector<int> coordinates = glv::tdata::QStandardItemMaker<Tvalue>::get_coordinates(_index);
        coordinates.insert(coordinates.begin(), _index.column());
        coordinates.insert(coordinates.begin(), _index.row());

        _index = _index.parent();

        return coordinates;
    }

};

/*! Specialization of QStandardItemModelMaker for SlvPool.
First column: label.
Second colum: value.*/
template <class Tvalue, class Tlabel>
struct glv::tdata::QStandardItemModelMaker< SlvPool<Tvalue, Tlabel> > {
    static constexpr bool is_specialized = true;
    typedef Tvalue Tdata_sub;
private:
    static QString get_root_text(unsigned int _size) {
        return glv::toQString(SlvDataName< SlvPool<Tvalue> >::name()) + " : " + QString::number(_size);
    }
public:
    static void make(const SlvPool<Tvalue, Tlabel>& _pool, QStandardItemModel* _model, const QModelIndex _index = QModelIndex(), const Qt::ItemFlag _flag_additional = Qt::NoItemFlags) {

        if (_model && (_index == QModelIndex() || _index.model() == _model)) {

            glv::resize(_model, (unsigned int)(_pool.psize()), 2, _index);

            QModelIndex index;
            for (unsigned int i = 0; i < _pool.psize(); i++) {
                index = _model->index(i, 0, _index);
                glv::tdata::toQStandardItem(_pool[i]->get_label(), _model->itemFromIndex(index));
                _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | _flag_additional);

                // If Tvalue is specialized, disable Tkey editing
                static bool condition = glv::tdata::QStandardItemModelMaker<Tlabel>::is_specialized || (glv::tdata::QStandardItemModelMaker<Tvalue>::is_specialized && !glv::tdata::l_allow_type_mismatch_edit);
                // C4127
                if (condition) {
                    _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() ^ Qt::ItemIsEditable);
                }
                if (!std::is_same<Tlabel, Tvalue>::value) {
                    _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | glv::tdata::type_mismatch_flag);
                }
                index = _model->index(i, 1, _index);
                glv::tdata::toQStandardItem(*_pool[i], _model->itemFromIndex(index));
                _model->itemFromIndex(index)->setFlags(_model->itemFromIndex(index)->flags() | _flag_additional);
            }

            if (_index != QModelIndex()) {
                QString root_text = get_root_text((unsigned int)(_pool.psize()));
                if (_model->itemFromIndex(_index)->text() != root_text) {
                    _model->itemFromIndex(_index)->setText(root_text);
                }
            }

        }

    }

    static SlvPool<Tvalue, Tlabel> get_value(const QStandardItemModel* _model, const QModelIndex& _index, const int _Mrows, const int _Ncols) {

        SlvPool<Tvalue, Tlabel> pool;

        if (_index == QModelIndex() || _index.model() == _model) {

            int N = (_Mrows == -1) ? _model->rowCount(_index) : std::min(_model->rowCount(_index), _Mrows);

            if (_model->columnCount(_index) >= 2) {

                QStandardItem* item;
                Tvalue* value;
                for (int i = 0; i < N; i++) {
                    item = _model->itemFromIndex(_model->index(i, 0, _index));
                    value = pool.new_element(glv::tdata::fromQStandardItem<Tlabel>(item));
                    item = _model->itemFromIndex(_model->index(i, 1, _index));
                    *value = glv::tdata::fromQStandardItem<Tvalue>(item);
                }

            } else {
                slv::flag::ISSUE(slv::flag::Critical, "SlvPool requires two columns in the model");
            }

        } else {
            slv::flag::ISSUE(slv::flag::Critical, "index's model is different from the one it is supposed to belong to");
        }

        return pool;
    }

    static std::vector<int> get_coordinates(QModelIndex& _index) {

        std::vector<int> coordinates = glv::tdata::QStandardItemMaker<Tvalue>::get_coordinates(_index);
        coordinates.insert(coordinates.begin(), _index.column());
        coordinates.insert(coordinates.begin(), _index.row());

        _index = _index.parent();

        return coordinates;
    }

};

class QComboBox;
class QWidget;

namespace glv {

	/*! Create a QComboBox from a Tdata. Displayed values are the first template argument.*/
	template <class Tdata>
	QComboBox* toQComboBox(const Tdata& _data, QString _name = "", QWidget* _parent = 0);
	/*! Assign a Tdata to a QComboBox. Displayed values are the first template argument.*/
	template <class Tdata>
	void toQComboBox(QComboBox* _combo_box, const Tdata& _data, QString _name = "");

}

template <class Tdata>
QComboBox* glv::toQComboBox(const Tdata& _data, QString _name, QWidget* _parent) {

	QComboBox* combo_box = new QComboBox(_parent);
	toQComboBox(combo_box, _data, _name);
	return combo_box;

}

template <class Tdata>
void glv::toQComboBox(QComboBox* _combo_box, const Tdata& _data, QString _name) {

	QStandardItemModel* model = glv::tdata::toQStandardItemModel(_data);
	_combo_box->clear();
	_combo_box->setObjectName(_name);
	_combo_box->setModel(model);

}

#endif

/*! Same as SlvPool, but get method creates the element if not found.
* This auto get function only work if Tvalue has a constructor taking only Tlabel as argument. Otherwise, use SlvPool.*/
template <class Tvalue, class Tlabel>
class SlvPoolFactory : public SlvPool<Tvalue, Tlabel> {

public:

	SlvPoolFactory();
	~SlvPoolFactory();

	/*! Get the element which label is equal to \p _label.
	* Creates the element if \p _label is not found.*/
	const Tvalue* get(const Tlabel& _label) const;
	/*! Get the element which label is equal to \p _label.
	* Creates the element if \p _label is not found.*/
	Tvalue* get(const Tlabel& _label);

};

template <class Tvalue, class Tlabel>
SlvPoolFactory<Tvalue, Tlabel>::SlvPoolFactory() :SlvPool<Tvalue, Tlabel>() {

}

template <class Tvalue, class Tlabel>
SlvPoolFactory<Tvalue, Tlabel>::~SlvPoolFactory() {

}

template <class Tvalue, class Tlabel>
const Tvalue* SlvPoolFactory<Tvalue, Tlabel>::get(const Tlabel& _label) const {

	return const_cast<SlvPoolFactory<Tvalue, Tlabel>*>(this)->get(_label);

}

template <class Tvalue, class Tlabel>
Tvalue* SlvPoolFactory<Tvalue, Tlabel>::get(const Tlabel& _label) {

	Tvalue* element = SlvPool< Tvalue, Tlabel >::get(_label);
	if (!element) {
		element = this->new_element(_label);
	}

	return element;

}

#ifndef GLOVE_DISABLE_QT

class SlvParametrization_base;
class QDialogButtonBox;
class QVBoxLayout;
class GlvParametersWidget_base;
class QPushButton;

/*! Dialog widget managing parametrization widget.
* This is the main widget (with GlvParametrizationWidget) to use for parametrization management in the framework.
* Accept : set the parametrization has the one configured by the widget.
* Reject : does not modify the parametrization. */
class GlvParametrizationDialog_base : public QDialog {

    Q_OBJECT

protected:

    QDialogButtonBox* button_box;
    QPushButton* abide_rules_button;
    bool l_dialog;//whether has buttons. if so, parent's activation depends on "this" state. Also QDialog::accept/reject is activated
    bool l_deny_invalid_parameters;
    SlvParametrization_base* parametrization_base;//usefull to cast to correct child type (see macros)
    /*! Base pointer to manage dialog's size depending on parameters visibility.*/
    GlvParametersWidget_base* parameters_widget_base;
    QVBoxLayout* m_layout;

    GlvParametrizationDialog_base(bool _l_dialog, bool _l_deny_invalid_parameters, QWidget* _parent);
public:
    virtual ~GlvParametrizationDialog_base();

    /*! Returns base pointer to the stored parameterization, so it can be casted to the real parametrization provided its type is known.*/
    const SlvParametrization_base* get_parametrization_base() const;
    void addWidget(QWidget* _widget);

    /*! Show or hide the button controlling rules complying, next to 'Ok' and 'Cancel'.*/
    void enable_abide_rules_button(bool _l_enable);

protected :
    void set_parameters_widget_base(GlvParametersWidget_base* _parameters_widget_base);
    void resizeEvent(QResizeEvent* _event);
public slots:
    /*! Apply parametrization widget. QDialog's accept slot only if l_dialog is true.*/
    virtual void accept() = 0;
    /*! Reset parametrization widget with current parametrization value. QDialog's reject slot only if l_dialog is true.*/
    virtual void reject() = 0;
    /*! Apply parametrization widget and check parameters.*/
    virtual SlvStatus apply() = 0;

private slots:
    /*! Update parametrization according to current values contained in parametrization_widget*/
    virtual void update_parametrization() = 0;
    void parametrizationChanged_slot(std::string _parameter_name);
    void abide_slot();
    /*! Set free maximum height depending on parameters visibility.*/
    void maximum_height_slot();
protected slots:
    // Check parameters by updating parametrization before
    void check_parameters_slot();
signals:
    void parametrizationChanged(std::string _parameter_name);

private:
    /*! Returns true if the parametrization has rules.*/
    virtual bool has_rules() = 0;
    virtual bool abide_rules() = 0;
    virtual const SlvParametrization_base* new_parametrization_base() const = 0;

};

/*! Widget managing SlvParameter.*/
class GlvParameterWidget_base : public QObject {

    Q_OBJECT

protected:

    GlvParameterWidget_base() {}
    virtual ~GlvParameterWidget_base() {}

signals:
    /*! Emitted when the widget interface related to the value of the parameter is modified.*/
    void parameterChanged(std::string _parameter_name);

private slots:
    virtual void valueChanged_slot() = 0;

};

/*! Widget managing SlvParameter.*/
template <class Tparam>
class GlvParameterWidget : public GlvDescribedWidget<Tparam>, public GlvParameterWidget_base {

public:

    GlvParameterWidget(const SlvParameter<Tparam>& _parameter, bool l_editable = true, QWidget* _parent = 0);
    ~GlvParameterWidget();

    /*! Set value.*/
    void set(const SlvParameter<Tparam>& _parameter);
    /*! Set as editable or not.*/
    void set_editable(bool l_editable);
    /*! Apply all rules of \p _parameter.*/
    void abide_rules(const SlvParameter<Tparam>& _parameter);

private:
    /*! Apply \p _parameter_rule.*/
    void abide_rule(const SlvParameterRuleT<Tparam>& _parameter_rule);
    void valueChanged_slot();
    /*! Get description of rules. One rule description per line.*/
    std::string get_rules_description(const SlvParameter<Tparam>& _parameter) const;

};

template <class Tparam>
GlvParameterWidget<Tparam>::GlvParameterWidget(const SlvParameter<Tparam>& _parameter, bool l_editable, QWidget* _parent) :GlvDescribedWidget<Tparam>(_parameter.get_value(), _parameter.get_name(), _parameter.get_description(), l_editable, _parent) {

    QObject::connect(this->data_widget, SIGNAL(valueChanged()), static_cast<GlvParameterWidget_base*>(this), SLOT(valueChanged_slot()));

    abide_rules(_parameter);

    GlvDescribedWidget<Tparam>::append_tool_tip(get_rules_description(_parameter));

}

template <class Tparam>
GlvParameterWidget<Tparam>::~GlvParameterWidget() {

}

template <class Tparam>
void GlvParameterWidget<Tparam>::set(const SlvParameter<Tparam>& _parameter) {

    this->data_widget->set_value(_parameter.get_value());
}

template <class Tparam>
void GlvParameterWidget<Tparam>::set_editable(bool l_editable) {

    this->data_widget->set_editable(l_editable);
}

template <class Tparam>
void GlvParameterWidget<Tparam>::abide_rules(const SlvParameter<Tparam>& _parameter) {

    for (unsigned int r = 0; r < _parameter.get_rules().size(); r++) {
        abide_rule(_parameter.get_rules()[r]);
    }
}

template <class Tparam>
void GlvParameterWidget<Tparam>::abide_rule(const SlvParameterRuleT<Tparam>& _parameter_rule) {

    GlvParameterRuleAbiding<Tparam>::abide(_parameter_rule, this->data_widget->get_widget());

}

template <class Tparam>
void GlvParameterWidget<Tparam>::valueChanged_slot() {

    emit parameterChanged(this->data_name);

}

template <class Tparam>
std::string GlvParameterWidget<Tparam>::get_rules_description(const SlvParameter<Tparam>& _parameter) const {

    std::string description;

    std::vector<std::string> descriptions = _parameter.get_rules_description();

    for (typename std::vector<std::string>::const_iterator it = descriptions.begin(); it != descriptions.end(); ++it) {
        description += *it;
        if (std::next(it) != descriptions.end() && !it->empty()) {
            description += "\n";
        }
    }

    return description;
}

class QVBoxLayout;
class QGridLayout;
template <class Tparam>
class GlvParameterWidget;

/*! Widget managing the parameters of classes SlvParametrization**.*/
class GlvParametersWidget_base : public QGroupBox, public GlvSaveLoad {

	Q_OBJECT

private:
	glvm_staticVariable(const, int, grid_horizontal_spacing, 10);
	glvm_staticVariable_def(const, int, layout_margin);
private :
	/*! Whether the parameters are set in a scroll area or not.*/
	bool l_scrollable;
	class ScrollArea;
	/*! Scroll area of parameters.*/
	ScrollArea* scroll_area;
	/*! Whether last resize update was a height decrease.*/
	bool l_height_decreased;
	/*! If true, max height will apply whenever scroll bar appears.
	* If false (default), the widget can still be resized up to the last height before parameters size reduction.
	* i.e.: Update height hint to fit to parameters widget.*/
	bool l_adapt_max_height;
public:
	enum LayoutType { Vertical, Grid };
protected:
	LayoutType layout_type = LayoutType::Vertical;
	QVBoxLayout* vertical_layout;
	QGridLayout* grid_layout;
	QVBoxLayout* main_layout;
	QWidget* parameters_widget;

	GlvParametersWidget_base();
	virtual ~GlvParametersWidget_base();
public:

	/*! Set layout of parameters widget to vertical, ie a stack of the parameter widgets.
	* More intuitive, but lacks aligment of names and data widgets
	* It is possible to switch from set_layout_grid() to set_layout_vertical() and vice versa.*/
	void set_layout_vertical();
	/*! Set layout of parameters widget as a grid layout.Names and data widgets are aligned, but their ownsership is moved.
	* It is possible to switch from set_layout_grid() to set_layout_vertical() and vice versa.*/
	void set_layout_grid();
	/*! Set layout type either to LayoutType::Vertical or LayoutType::Grid.*/
	virtual void set_layout_type(LayoutType _layout_type) = 0;
	/*! Display or hide data type information in 'whatsthis'.*/
	virtual void enable_data_type_info(bool _l_enable) = 0;

	/*! Returns true if the parameters are fully visible (no scroll bars).*/
	bool is_fully_visible() const;
	/*! Returns true if the parameters widget last resize update was a height decrease.*/
	bool has_height_decreased() const;
	/*! Set parameters to be scrollable or not.
	* Default state is true.*/
	void set_scrollable(bool _l_scrollable);
	/*! Advanced setting.
	* If true, max height will apply whenever scroll bar appears.
	* If false (default), the widget can still be resized up to the last height before parameters size reduction.
	* i.e.: Update height hint to fit to parameters widget.*/
	void set_adapt_max_height(bool _l_adapt);

protected:
	/*! Add the parameter widget to the parameters.*/
	void add_parameter_widget_to_vertical_layout(QWidget* _parameter_widget);
	template <class Tdata>
	void set_parameter_widget_to_grid_layout(GlvParameterWidget<Tdata>* _parameter_widget, int i);
	/*! Set layout type, protected.*/
	void set_layout_type_protected(LayoutType _layout_type);
	/*! Set save/load widget. Called in GlvParametrizationSaveLoad.*/
	void set_save_load_widget(GlvWidgetSaveLoad_base* _save_load_widget);
	/*! Enable/disable possibility to show/hide parameters.*/
	void set_checkable_collapse(bool _l_checkable);
	
private:
	/*! Add to row \p i :
	* Column 0 : \p _dataname_label.
	* Column 1 : \p _data_widget.
	* Column 2 : \p _optional_text.*/
	void add_parameter_widget_to_grid_layout(QWidget* _dataname_label, QWidget* _data_widget, QWidget* _optional_text_label, int i);
	/*! Get number of parameters.*/
	virtual int get_Nparameters() const = 0;
	bool eventFilter(QObject* object, QEvent* _event);
private slots:
	/*! Show parameters or not.*/
	void show_parameters(bool _l_show);
signals:
	/*! Emitted when the parameter named \p _parameter_name has changed.*/
	void parameterChanged(std::string _parameter_name);
	/*! Emitted when the widget containing the parameters (only) is being resized vertically.*/
	void heightChanged();
};

template <class Tdata>
void GlvParametersWidget_base::set_parameter_widget_to_grid_layout(GlvParameterWidget<Tdata>* _parameter_widget, int i) {

	add_parameter_widget_to_grid_layout(reinterpret_cast<QWidget*>(_parameter_widget->data_name_label), \
		_parameter_widget->get_widget(), \
		reinterpret_cast<QWidget*>(_parameter_widget->optional_text_label), i);

}

template <class T>
class GlvParametersWidget;

/*! Widget managing the parameters of classes SlvParametrization**.*/
template <>
class GlvParametersWidget<SlvParametrization0> : public GlvParametersWidget_base {

public:
    GlvParametersWidget(const SlvParametrization0& _parametered_object, bool l_editable);
    ~GlvParametersWidget();
    /*! Set parametrization.*/
    void set(const SlvParametrization0& _parametered_object);
    /*! Get parametrization. Tparametrization is the class inheriting from SlvParametrization.*/
    template <class Tparametrization>
    Tparametrization get() const;
    /*! Set the parameters as editable or not.*/
    void set_editable(bool l_editable);
protected:
    void assign_recursive(SlvParametrization0& _parametrization) const;
    /*! Set the layout of parameters as either
    * Vertical : stack of widgets
    * Grid : parameters name are in the first column, their respective interaction widget on the second one.*/
    void set_layout_type(LayoutType _layout_type);
    /*! Enable or not display of parameter types in WhatsThis.*/
    void enable_data_type_info(bool _l_enable);
private:
    int get_Nparameters() const;
};

inline GlvParametersWidget<SlvParametrization0>::GlvParametersWidget(const SlvParametrization0& _parametered_object, bool l_editable) {

}

inline GlvParametersWidget<SlvParametrization0>::~GlvParametersWidget() {

}

inline void GlvParametersWidget<SlvParametrization0>::set(const SlvParametrization0& _parametered_object) {}

template <class Tparametrization>
Tparametrization GlvParametersWidget<SlvParametrization0>::get() const {
    return Tparametrization();
}

inline void GlvParametersWidget<SlvParametrization0>::set_editable(bool l_editable) {}

inline void GlvParametersWidget<SlvParametrization0>::assign_recursive(SlvParametrization0& _parametrization) const {}

inline void GlvParametersWidget<SlvParametrization0>::set_layout_type(LayoutType _layout_type) {
    GlvParametersWidget_base::set_layout_type_protected(_layout_type);
}

inline void GlvParametersWidget<SlvParametrization0>::enable_data_type_info(bool _l_enable) {}

inline int GlvParametersWidget<SlvParametrization0>::get_Nparameters() const {
    return 0;
}

#define glvm_pv_GlvParametersWidget_make_parameter(i) \
parameter##i = new GlvParameterWidget<Tparam##i>(_parametered_object.get_parameter##i(), l_editable);\
this->connect(static_cast<GlvParameterWidget_base*>(parameter##i), SIGNAL(parameterChanged(std::string)), this, SIGNAL(parameterChanged(std::string)));\
GlvParametersWidget_base::add_parameter_widget_to_vertical_layout(parameter##i);

#define glvm_pv_GlvParametersWidget_get_parameter(i) \
GlvParameterWidget<Tparam##i>* parameter_widget##i = dynamic_cast<GlvParameterWidget<Tparam##i>*>(this->layout()->itemAt(i-1)->widget());\
Tparam##i parameter_value##i;\
parameter_value##i = parameter_widget##i->get_value();

/*! Macro in charge of defining the template class parameter widget for i parameters.*/
#define glvm_pv_GlvParametersWidget(i, meta_Tparameters_current, spec_Tparameters_current)\
template <meta_Tparameters_current>\
class GlvParametersWidget< SlvParametrization##i<spec_Tparameters_current> > : public GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower> {\
    private:\
    GlvParameterWidget<Tparam##i>* parameter##i;\
    protected:\
    Tparam##i get_value##i() const {\
        return parameter##i->get_value();\
    }\
    public:\
    GlvParametersWidget(const SlvParametrization##i<spec_Tparameters_current>& _parametered_object, bool l_editable):GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower>(_parametered_object, l_editable) {\
        glvm_pv_GlvParametersWidget_make_parameter(i)\
    }\
    ~GlvParametersWidget() {}\
    const GlvParameterWidget<Tparam##i>* get_parameter##i() const {return parameter##i;}\
	GlvParameterWidget<Tparam##i>* get_parameter##i() {return parameter##i;}\
    void set(const SlvParametrization##i<spec_Tparameters_current>& _parametered_object) {\
        GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower>::set(_parametered_object);\
        parameter##i->set(_parametered_object.get_parameter##i());\
    }\
    protected:\
    void assign_recursive(SlvParametrization##i<spec_Tparameters_current>& _parametrization) const {\
        GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower>::assign_recursive(_parametrization);\
        const_cast<SlvParameter<Tparam##i>*>(&const_cast<const SlvParametrization##i<spec_Tparameters_current>*>(&_parametrization)->get_parameter##i())->set_value(get_value##i());\
    }\
    public:\
    template <class Tparametrization>\
    Tparametrization get() const {\
        Tparametrization parametrization;\
        assign_recursive(parametrization);\
        static_cast<SlvParametrization_base*>(&parametrization)->param_init();\
        return parametrization;\
    }\
    void set_editable(bool l_editable) {\
        GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower>::set_editable(l_editable);\
        parameter##i->set_editable(l_editable);\
    }\
    void set_layout_type(GlvParametersWidget_base::LayoutType _layout_type) {\
        GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower>::set_layout_type(_layout_type);\
        if (_layout_type == GlvParametersWidget_base::LayoutType::Vertical) {\
            GlvParametersWidget_base::add_parameter_widget_to_vertical_layout(parameter##i);\
            parameter##i->reclaim_widgets_ownership();\
        } else if (_layout_type == GlvParametersWidget_base::LayoutType::Grid) {\
            GlvParametersWidget_base::set_parameter_widget_to_grid_layout(parameter##i, i - 1);\
        }\
    }\
    void enable_data_type_info(bool _l_enable) {\
        GlvParametersWidget<typename SlvParametrization##i<spec_Tparameters_current>::Tparametrization_lower>::enable_data_type_info(_l_enable);\
        parameter##i->enable_data_type_info(_l_enable);\
    }\
private:\
    int get_Nparameters() const {\
        return i;\
    }\
};

glvm_pv_GlvParametersWidget(1, class Tparam1, \
Tparam1)

glvm_pv_GlvParametersWidget(2, class Tparam1 COMMA class Tparam2, \
Tparam1 COMMA Tparam2)

glvm_pv_GlvParametersWidget(3, class Tparam1 COMMA class Tparam2 COMMA class Tparam3, \
Tparam1 COMMA Tparam2 COMMA Tparam3)

glvm_pv_GlvParametersWidget(4, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4)

glvm_pv_GlvParametersWidget(5, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5)

glvm_pv_GlvParametersWidget(6, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6)

glvm_pv_GlvParametersWidget(7, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7)

glvm_pv_GlvParametersWidget(8, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8)

glvm_pv_GlvParametersWidget(9, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9)

glvm_pv_GlvParametersWidget(10, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10)

glvm_pv_GlvParametersWidget(11, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11)

glvm_pv_GlvParametersWidget(12, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12)

glvm_pv_GlvParametersWidget(13, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13)

glvm_pv_GlvParametersWidget(14, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14)

glvm_pv_GlvParametersWidget(15, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15)

glvm_pv_GlvParametersWidget(16, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16)

glvm_pv_GlvParametersWidget(17, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17)

glvm_pv_GlvParametersWidget(18, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18)

glvm_pv_GlvParametersWidget(19, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18 COMMA class Tparam19, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18 COMMA Tparam19)

glvm_pv_GlvParametersWidget(20, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18 COMMA class Tparam19 COMMA class Tparam20, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18 COMMA Tparam19 COMMA Tparam20)

glvm_pv_GlvParametersWidget(21, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18 COMMA class Tparam19 COMMA class Tparam20 COMMA class Tparam21, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18 COMMA Tparam19 COMMA Tparam20 COMMA Tparam21)

glvm_pv_GlvParametersWidget(22, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18 COMMA class Tparam19 COMMA class Tparam20 COMMA class Tparam21 COMMA class Tparam22, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18 COMMA Tparam19 COMMA Tparam20 COMMA Tparam21 COMMA Tparam22)

glvm_pv_GlvParametersWidget(23, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18 COMMA class Tparam19 COMMA class Tparam20 COMMA class Tparam21 COMMA class Tparam22 COMMA class Tparam23, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18 COMMA Tparam19 COMMA Tparam20 COMMA Tparam21 COMMA Tparam22 COMMA Tparam23)

glvm_pv_GlvParametersWidget(24, class Tparam1 COMMA class Tparam2 COMMA class Tparam3 COMMA class Tparam4 COMMA class Tparam5 COMMA class Tparam6 COMMA class Tparam7 COMMA class Tparam8 COMMA class Tparam9 COMMA class Tparam10 COMMA class Tparam11 COMMA class Tparam12 COMMA class Tparam13 COMMA class Tparam14 COMMA class Tparam15 COMMA class Tparam16 COMMA class Tparam17 COMMA class Tparam18 COMMA class Tparam19 COMMA class Tparam20 COMMA class Tparam21 COMMA class Tparam22 COMMA class Tparam23 COMMA class Tparam24, \
Tparam1 COMMA Tparam2 COMMA Tparam3 COMMA Tparam4 COMMA Tparam5 COMMA Tparam6 COMMA Tparam7 COMMA Tparam8 COMMA Tparam9 COMMA Tparam10 COMMA Tparam11 COMMA Tparam12 COMMA Tparam13 COMMA Tparam14 COMMA Tparam15 COMMA Tparam16 COMMA Tparam17 COMMA Tparam18 COMMA Tparam19 COMMA Tparam20 COMMA Tparam21 COMMA Tparam22 COMMA Tparam23 COMMA Tparam24)

template <class Tparametrization>
class GlvParametrizationSaveLoad;

/*! Widget managing SlvParametrization to widget, and vice versa.
* Tparametrization is a class inheriting from SlvParametrization.
* Member values not belonging to SlvParametrization are ignored here (constructor values).
* This is the main widget (with GlvParametrizationDialog) to use for parametrization management in the framework.*/
template <class Tparametrization>
class GlvParametrizationWidget : public GlvParametersWidget<typename Tparametrization::Tparametrization> {

public:

    GlvParametrizationWidget(const Tparametrization _parametrization = Tparametrization(), bool l_editable = true, QWidget* _parent = 0);
    ~GlvParametrizationWidget();

    /*! Get parametrization.*/
    Tparametrization get_parametrization() const;
    /*! Set parametrization.*/
    void set_parametrization(const Tparametrization& _parametrization);

    /*! Same as get_parametrization(), to be compliant with GlvWidgetMaker.*/
    Tparametrization get_value() const;
    /*! Same as set_parametrization(), to be compliant with GlvWidgetMaker.*/
    void set_value(const Tparametrization& _parametrization);

    friend class GlvParametrizationSaveLoad<Tparametrization>;
};

/*! Convenience macro to access widget (GlvWidgetData) of parameter number 'parameter_index'.
* See example in sample001.cpp.*/
#define glvm_get_parameter_GlvWidgetData(glv_parametrization_widget, parameter_index) glv_parametrization_widget->get_parameter##parameter_index()->get_widget()->get_widget()
/*! Convenience macro to access widget (GlvWidget) of parameter number 'parameter_index'.*/
#define glvm_get_parameter_GlvWidget(glv_parametrization_widget, parameter_index) glv_parametrization_widget->get_parameter##parameter_index()->get_widget()

template <class Tparametrization>
GlvParametrizationWidget<Tparametrization>::GlvParametrizationWidget(const Tparametrization _parametrization, bool l_editable, QWidget* _parent) :GlvParametersWidget<typename Tparametrization::Tparametrization>(_parametrization, l_editable) {

    this->setTitle(QString(Tparametrization::name().c_str()));
    // Set grid layout by default. More ergonomic.
    GlvParametersWidget_base::set_layout_grid();

}

template <class Tparametrization>
GlvParametrizationWidget<Tparametrization>::~GlvParametrizationWidget() {

}

template <class Tparametrization>
Tparametrization GlvParametrizationWidget<Tparametrization>::get_parametrization() const {

    return this->template get<Tparametrization>();

}

template <class Tparametrization>
void GlvParametrizationWidget<Tparametrization>::set_parametrization(const Tparametrization& _parametrization) {

    return this->set(_parametrization);
}

template <class Tparametrization>
Tparametrization GlvParametrizationWidget<Tparametrization>::get_value() const {
    return get_parametrization();
}

template <class Tparametrization>
void GlvParametrizationWidget<Tparametrization>::set_value(const Tparametrization& _parametrization) {
    set_parametrization(_parametrization);
}

class QWidget;

namespace glv {
	/*! Flag functions for Glv*/
	namespace flag {
		/*! Calls QMessageBox according to \p _status most critical type.
		* \p _l_show_all : if false displays only most critical message (if any). If true displays all messages.
		* Return true if message box was being clicked its Ok button.*/
		bool showQMessageBox(const SlvStatus& _status, bool _l_show_all, QWidget* _parent = NULL);
		/*! Calls QMessageBox according to \p _status most critical type.
		* \p _message : preceding message.
		* \p _l_show_all : if false displays only most critical message (if any). If true displays all messages.
		* Return true if message box was being clicked its Ok button.*/
		bool showQMessageBox(const QString& _message, const SlvStatus& _status, bool _l_show_all, QWidget* _parent = NULL);
		/*! Calls QMessageBox::critical with message \p _message and breaks.*/
		void BREAK(std::string warning_message, QWidget* _parent = NULL);
		/*! Calls QMessageBox::information with message \p _message.*/
		void INFO(std::string warning_message, QWidget* _parent = NULL);
	}
}

/*! Dialog widget managing parametrization widget.
* Tparametrization is a class inheriting from SlvParametrization.
* Member values not belonging to SlvParametrization are ignored here (constructor values).
* This is the main widget (with GlvParametrizationWidget) to use for parametrization management in the framework.
* Accept : set the parametrization has the one configured by the widget.
* Reject : does not modify the parametrization. */
template <class Tparametrization>
class GlvParametrizationDialog : public GlvParametrizationDialog_base {

private:

    /*! Widget managing SlvParametrization to widget, and vice versa.*/
    GlvParametrizationWidget<Tparametrization>* parametrization_widget;

public:

    /*! \p _parametrization : Initial parametrization.
    * \p _l_dialog: Whether the widget enables QDialog properties or not, such as button box, and related signals.
    * \p _l_deny_invalid_parameters : if true, acceptance of the parametrization is not possible if one of the parameters is invalid.*/
    GlvParametrizationDialog(Tparametrization _parametrization = Tparametrization(), bool _l_dialog = true, bool _l_deny_invalid_parameters = true, QWidget* _parent = NULL);
    GlvParametrizationDialog(bool _l_dialog, bool _l_deny_invalid_parameters, QWidget* _parent = NULL);
    GlvParametrizationDialog(bool _l_dialog, QWidget* _parent = NULL);
    GlvParametrizationDialog(QWidget* _parent);
    ~GlvParametrizationDialog();

    /*! Get current parametrization in memory. Does not return the parametrization currently displayed in the parametrization widget.*/
    const Tparametrization& get_parametrization() const;
    /*! Set parameterization. If \p _l_param_only is true, then only the parameters are set. If false, the whole instance is assigned (not recommended, must be a special case).*/
    void set_parametrization(const Tparametrization& _parametrization, bool _l_param_only = true);

    /*! Get the widget managing the parametrization interface.*/
    GlvParametrizationWidget<Tparametrization>* get_parametrization_widget();

    /*! Apply parametrization widget and check parameters.*/
    SlvStatus apply();

    /*! Apply parametrization widget. QDialog's accept slot only if l_dialog is true.*/
    void accept();
    /*! Reset parametrization widget with current parametrization value. QDialog's reject slot only if l_dialog is true.*/
    void reject();
    /*! Closing the widget means rejection.*/
    void closeEvent(QCloseEvent* _event);

private:

    /*! Update parametrization according to current values contained in parametrization_widget*/
    void update_parametrization();
    /*! Returns true if the parametrization has rules.*/
    bool has_rules();
    /*! Returns false if the rules were not abided, meaning there was a modification of the parametrization*/
    /*! Returns true if rules are abided, meaning there was no modification of the parameterization*/
    bool abide_rules();
    /*! Create a new parametrization instance from the parametrization widget. Deletion must be managed after using this method.*/
    const SlvParametrization_base* new_parametrization_base() const;

};

template <class Tparametrization>
GlvParametrizationDialog<Tparametrization>::GlvParametrizationDialog(Tparametrization _parametrization, bool _l_dialog, bool _l_deny_invalid_parameters, QWidget* _parent) :GlvParametrizationDialog_base(_l_dialog, _l_deny_invalid_parameters, _parent) {

    parametrization_base = new Tparametrization;
    parametrization_widget = new GlvParametrizationWidget<Tparametrization>;
    set_parameters_widget_base(parametrization_widget);
    set_parametrization(_parametrization);

    connect(parametrization_widget, SIGNAL(parameterChanged(std::string)), this, SLOT(parametrizationChanged_slot(std::string)));
    addWidget(parametrization_widget);

    // Rules are actually static, but rtti is needed to access the actual parameters
    enable_abide_rules_button(parametrization_base->has_rules());

}

template <class Tparametrization>
GlvParametrizationDialog<Tparametrization>::GlvParametrizationDialog(bool _l_dialog, bool _l_deny_invalid_parameters, QWidget* _parent) :GlvParametrizationDialog(Tparametrization(), _l_dialog, _l_deny_invalid_parameters, _parent) {
    
}

template <class Tparametrization>
GlvParametrizationDialog<Tparametrization>::GlvParametrizationDialog(bool _l_dialog, QWidget* _parent) :GlvParametrizationDialog(Tparametrization(), _l_dialog, true, _parent) {
    
}

template <class Tparametrization>
GlvParametrizationDialog<Tparametrization>::GlvParametrizationDialog(QWidget* _parent) : GlvParametrizationDialog(Tparametrization(), true, _parent) {

}

template <class Tparametrization>
GlvParametrizationDialog<Tparametrization>::~GlvParametrizationDialog() {

}

template <class Tparametrization>
const Tparametrization& GlvParametrizationDialog<Tparametrization>::get_parametrization() const {

    return (*dynamic_cast<Tparametrization*>(parametrization_base));

}

template <class Tparametrization>
void GlvParametrizationDialog<Tparametrization>::set_parametrization(const Tparametrization& _parametrization, bool _l_param_only) {

    if (_l_param_only) {
        dynamic_cast<Tparametrization*>(parametrization_base)->param_assign(_parametrization);
    } else {
        (*dynamic_cast<Tparametrization*>(parametrization_base)) = _parametrization;
    }
    dynamic_cast<GlvParametrizationWidget<Tparametrization>*>(parametrization_widget)->set_parametrization(_parametrization);
    check_parameters_slot();

}

template <class Tparametrization>
void GlvParametrizationDialog<Tparametrization>::update_parametrization() {

    // no param_cast() assignment here because the updated parametrization is supposed to be equal to an instance freshly created
    (*dynamic_cast<Tparametrization*>(parametrization_base)) = dynamic_cast<GlvParametrizationWidget<Tparametrization>*>(parametrization_widget)->get_parametrization();

}

template <class Tparametrization>
bool GlvParametrizationDialog<Tparametrization>::has_rules() {

    return Tparametrization::has_rules();

}

template <class Tparametrization>
bool GlvParametrizationDialog<Tparametrization>::abide_rules() {

    // Update parametrization
    update_parametrization();
    // Abide rules
    bool l_abide = parametrization_base->abide_rules();

    // If rules were not abided (parametrization was modified)
    if (!l_abide) {
        // Assign to widget
        dynamic_cast<GlvParametrizationWidget<Tparametrization>*>(parametrization_widget)->set_parametrization(*dynamic_cast<Tparametrization*>(parametrization_base));
    }

    return l_abide;
}

template <class Tparametrization>
GlvParametrizationWidget<Tparametrization>* GlvParametrizationDialog<Tparametrization>::get_parametrization_widget() {

    return dynamic_cast<GlvParametrizationWidget<Tparametrization>*>(parametrization_widget);

}

template <class Tparametrization>
const SlvParametrization_base* GlvParametrizationDialog<Tparametrization>::new_parametrization_base() const {

    Tparametrization* parametrization = new Tparametrization;
    *parametrization = dynamic_cast<GlvParametrizationWidget<Tparametrization>*>(parametrization_widget)->get_parametrization();
    return parametrization;
}

template <class Tparametrization>
void GlvParametrizationDialog<Tparametrization>::accept() {

    SlvStatus status = apply();

    if (status || !l_deny_invalid_parameters) {

        if (l_dialog) {
            QDialog::accept();
        }

    }

}

template <class Tparametrization>
void GlvParametrizationDialog<Tparametrization>::reject() {

    // Set previous parametrization
    dynamic_cast<GlvParametrizationWidget<Tparametrization>*>(parametrization_widget)->set_parametrization(*dynamic_cast<Tparametrization*>(parametrization_base));
    if (l_dialog) QDialog::reject();
}

template <class Tparametrization>
SlvStatus GlvParametrizationDialog<Tparametrization>::apply() {

    update_parametrization();

    SlvStatus status = parametrization_base->check_parameters();
    if (!status && l_deny_invalid_parameters) {
        glv::flag::showQMessageBox(status, false, this);
    }
    return status;
}

template <class Tparametrization>
void GlvParametrizationDialog<Tparametrization>::closeEvent(QCloseEvent* _event) {

    reject();

}

template <class Tparametrization>
class GlvParametrizationWidget;

/*! Manages save and load of Tparametrization in a binary file.
* See example sample009.*/
template <class Tparametrization>
class GlvParametrizationSaveLoad : public GlvWidgetSaveLoad_base {

private:

    GlvParametrizationWidget<Tparametrization>* parametrization_widget;

public:

    /*! \p _widget : direct integration to the GlvWidget. Nothing else to do.
    * \p _allowed_extensions : file extensions the file can read and write to. Allowed extensions contains by default the static name of the parametrization.
    * \p _orientation : Orientation of Save/Load buttons. Stacked (default) or side-by-side. */
    GlvParametrizationSaveLoad(GlvParametrizationWidget<Tparametrization>* _parametrization_widget, SlvFileExtensions _allowed_extensions = {}, Qt::Orientation _orientation = Qt::Orientation::Horizontal);
    ~GlvParametrizationSaveLoad();

    /*! Save parametrization to file \p _file_name.*/
    void save(const std::string& _file_name);
    /*! Load parametrization from file \p _file_name.*/
    SlvStatus load(const std::string& _file_name);

private :

    static SlvFileExtensions allowed_extensions_constructor(SlvFileExtensions _allowed_extensions);

    friend class GlvParametrizationWidget<Tparametrization>;
};

template <class Tparametrization>
GlvParametrizationSaveLoad<Tparametrization>::GlvParametrizationSaveLoad(GlvParametrizationWidget<Tparametrization>* _parametrization_widget, SlvFileExtensions _allowed_extensions, Qt::Orientation _orientation) : GlvWidgetSaveLoad_base(allowed_extensions_constructor(_allowed_extensions), _orientation, Tparametrization::name()) {

    parametrization_widget = _parametrization_widget;
    parametrization_widget->set_save_load_widget(this);

}

template <class Tparametrization>
GlvParametrizationSaveLoad<Tparametrization>::~GlvParametrizationSaveLoad() {

    parametrization_widget->set_save_load_widget(NULL);

}

template <class Tparametrization>
void GlvParametrizationSaveLoad<Tparametrization>::save(const std::string& _file_name) {

    bool l_write_default_binary = true;

#if OPTION_USE_THIRDPARTY_JSON==1
    if (SlvFileMgr::get_extension(_file_name) == ".json") {
        if (slv::rw::json::ReadWrite<Tparametrization>::l_valid) {

            l_write_default_binary = false;

            std::ofstream file_stream;
            SlvStatus status = SlvFileMgr::open_file(file_stream, _file_name);
            if (status) {
                nlohmann::json json_value;
                slv::rw::json::ReadWrite<Tparametrization>::writeJson(parametrization_widget->get_value(), json_value);
                file_stream << json_value.dump(4);
                file_stream.close();
            }

        } else {
            SlvStatus status_tmp(SlvStatus::statusType::warning, "Json parser is not managed for this type.\nUsing default binary parser.");
            glv::flag::showQMessageBox(status_tmp, false, this);
        }
    }
#endif

    if (l_write_default_binary) {
        SlvFileMgr::write_binary(parametrization_widget->get_value().param_cast(), _file_name);
    }

}

template <class Tparametrization>
SlvStatus GlvParametrizationSaveLoad<Tparametrization>::load(const std::string& _file_name) {

    SlvStatus status;
    Tparametrization value;

    bool l_read_default_binary = true;

#if OPTION_USE_THIRDPARTY_JSON==1
    if (SlvFileMgr::get_extension(_file_name) == ".json") {
        if (slv::rw::json::ReadWrite<Tparametrization>::l_valid) {

            l_read_default_binary = false;

            std::ifstream file_stream;
            status = SlvFileMgr::open_file(file_stream, _file_name);
            if (status) {

                nlohmann::json json_value;
                file_stream >> json_value;
                if (!json_value.empty()) {
                    status = slv::rw::json::ReadWrite<Tparametrization>::readJson(value, json_value);
                    bool l_set_parameters = interactive_load_parameters(_file_name, status);
                    if (l_set_parameters) {
                        value.param_init();
                        parametrization_widget->set_value(value);
                    }

                }

            }

        } else {
            SlvStatus status_tmp(SlvStatus::statusType::warning, "Json parser is not managed for this type.\nUsing default binary parser.");
            glv::flag::showQMessageBox(status_tmp, false, this);
        }
    }
#endif

    if (l_read_default_binary) {

        status = SlvFileMgr::read_binary(value.param_cast(), _file_name);
        if (status) {
            value.param_init();
            parametrization_widget->set_value(value);
        }

    }

    return status;
}

template <class Tparametrization>
SlvFileExtensions GlvParametrizationSaveLoad<Tparametrization>::allowed_extensions_constructor(SlvFileExtensions _allowed_extensions) {

    SlvFileExtensions allowed_extensions = _allowed_extensions;
    allowed_extensions.add(SlvFileMgr::replace_forbidden_file_characters(Tparametrization::name(), '_', true, true));
#if OPTION_USE_THIRDPARTY_JSON==1
    if (slv::rw::json::ReadWrite<Tparametrization>::l_valid) {
        allowed_extensions.add(".json");
    }
#endif
    return allowed_extensions;

}

class GlvProgression;
class SlvProgressionQt;
class QVBoxLayout;

/*! Widget to manage easily and directly SlvProgressionQt.
* Closing the widget cancels the managed progressions.*/
class GlvProgressMgr : public QWidget {

    Q_OBJECT

private:

    std::vector<GlvProgression*> progressions;
    QVBoxLayout* m_layout;

    /*! Whether widget will close as soon as possible.*/
    bool l_close;

public:

    GlvProgressMgr(QWidget* _parent = 0);
    ~GlvProgressMgr();

    /*! Add progression. Optional: hide the progression when over. Not recommended if the progression is meant to end and start over (update issue when mouse is not on the widget).*/
    GlvProgression* add_progression(SlvProgressionQt* _progression, bool _l_hide_when_over = false);
    /*! Clear progressions.*/
    void clear();

private:

    void remove_progression(GlvProgression* _progression);

    /*! Check if all progressions are over.*/
    bool is_over() const;

    friend class GlvProgression;

protected:
    /*! Implemented as a workaround to QProgressDialog::setDuration.*/
    void paintEvent(QPaintEvent* _event);
    /*! Cancel progressions.*/
    void closeEvent(QCloseEvent* _event);

public slots:

    /*! Cancel all progressions.*/
    void cancel();

private slots:

    void check_close();

};

class SlvStatus;

/*! Class for status message display using message boxes.*/
class GlvStatusMgr : public QObject {

	Q_OBJECT

private:

	std::vector<const SlvStatus*> statuses;
	/*! Manage state of returned message boxes accpetance.*/
	bool l_continue;

public:

	GlvStatusMgr();
	~GlvStatusMgr();

	/*! Clear statuses from the instance.*/
	void clear();

	void add(const SlvStatus* _status);

	/*! Forbid continuation.*/
	void set_frozen();
	/*! Whether continue is possible or not.*/
	bool proceeed() const;

private slots:

	/*! Show all status messages as Qt message boxes.*/
	void show_status();

signals:

	/*! Signal request to show all status messages. Convenient for threads context.*/
	void display();

};

/*! Use a parameter named \p parameter_name of the CLI parametrization as a location where to save the configuration file.
* If such a parameter does not exist, return empty string.*/
#define GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY(Tparametrization, parameter_name)\
template <>\
struct GlvApp::ParamOutput<Tparametrization> {\
		static std::string get_path(const Tparametrization& _parametrization) {\
			const SlvParameter_base* parameter = _parametrization.find_first(parameter_name, false);\
			if (parameter) {\
				return parameter->get_stream_value();\
			} else {\
				return std::string();\
			}\
	}\
};

/*! Use a parameter of the CLI parametrization as a location where to save the configuration file.
* The parameter is defined by its declaration name.
* The parameter can be nested into other parameters. Can accept parameter nested up to 3 levels (ie: 4 parameter declarations specification).*/
#define GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL(Tparametrization, ...) EXPAND( glvm_pv_get_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL(__VA_ARGS__, glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL4, glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL3, glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL2, glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL1)(Tparametrization, __VA_ARGS__))
#define EXPAND(arg) arg
#define glvm_pv_get_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL(_1, _2, _3, _4, macro_arg, ...) macro_arg
#define glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL1(Tparametrization, parameter_name)\
template <>\
struct GlvApp::ParamOutput<Tparametrization> {\
		static std::string get_path(const Tparametrization& _parametrization) {\
			std::ostringstream stream;\
			stream << _parametrization.get_##parameter_name();\
			return stream.str();\
	}\
};

#define glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL2(Tparametrization, parameter_name1, parameter_name2)\
template <>\
struct GlvApp::ParamOutput<Tparametrization> {\
		static std::string get_path(const Tparametrization& _parametrization) {\
			std::ostringstream stream;\
			stream << _parametrization.get_##parameter_name1().get_##parameter_name2();\
			return stream.str();\
	}\
};

#define glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL3(Tparametrization, parameter_name1, parameter_name2, parameter_name3)\
template <>\
struct GlvApp::ParamOutput<Tparametrization> {\
		static std::string get_path(const Tparametrization& _parametrization) {\
			std::ostringstream stream;\
			stream << _parametrization.get_##parameter_name1().get_##parameter_name2().get_##parameter_name3();\
			return stream.str();\
	}\
};

#define glvm_pv_GLOVE_APP_CLI_PARAMETRIZATION_OUTPUT_DIRECTORY_DECL4(Tparametrization, parameter_name1, parameter_name2, parameter_name3, parameter_name4)\
template <>\
struct GlvApp::ParamOutput<Tparametrization> {\
		static std::string get_path(const Tparametrization& _parametrization) {\
			std::ostringstream stream;\
			stream << _parametrization.get_##parameter_name1().get_##parameter_name2().get_##parameter_name3().get_##parameter_name4();\
			return stream.str();\
	}\
};

/* ------------------------------
*  GLOVE_APP macro
*  ------------------------------
Transform a program into a GUI application. To be used at the very beginning of the main.
- GLOVE_APP : by setting -glove as CLI argument
- GLOVE_APP_AUTO : no need to set -glove => turn program into GUI as default
- GLOVE_APP_PARAM(Tparametrization) : same as GLOVE_APP, adds CLI arguments by-pass through a parametrization widget defined by Tparametrization.
- GLOVE_APP_PARAM_AUTO(Tparametrization) : same as GLOVE_APP_AUTO, adds CLI arguments by-pass through a parametrization widget defined by Tparametrization.
*/

/*! Transform a program into a GUI application by setting -glove as CLI argument. To be used at the very beginning of the main.
* Provide two additional variables:
* - bool is_glove : whether -glove cli argument was used or not.
* - Tparametrization glove_parametrization : the parametrization configured in the gui. If is_glove is false, then this parametrization is the default one.*/
#define GLOVE_APP_PARAM(Tparametrization) \
glvm_pv_GLOVE_APP(Tparametrization, false)

#define GLOVE_APP \
glvm_pv_GLOVE_APP(GLOVE_APP_default_parametrization, false)

/*! Same as GLOVE_APP macro, but forces use of glove (ie: -glove is set by default).
* Transform a program into a GUI application. To be used at the very beginning of the main.
* Provide two additional variables:
* - bool is_glove : whether -glove cli argument was used or not.
* - Tparametrization glove_parametrization : the parametrization configured in the gui. If is_glove is false, then this parametrization is the default one.*/
#define GLOVE_APP_PARAM_AUTO(Tparametrization) \
glvm_pv_GLOVE_APP(Tparametrization, true)

#define GLOVE_APP_AUTO \
glvm_pv_GLOVE_APP(GLOVE_APP_default_parametrization, true)

glvm_parametrization(GLOVE_APP_default_parametrization, "default");

/*! Optional: Disable program execution in a separate thread. Progressions and status display can not be managed in this mode, only input parametrization can.
* Can be convenient if one wants to execute the program in the closest conditions as the initial program is.
* The program being 'gloved' remains fully compliant with thread mode deactivated.
* Default is : true.
* To be set just before calling GLOVE_APP.*/
#define GLOVE_APP_THREAD_MODE true

#define glvm_pv_GLOVE_APP(Tparametrization, _l_auto_glove) \
return GlvApp::main<Tparametrization>(argc, argv, _l_auto_glove, GLOVE_APP_THREAD_MODE);\
}\
template <>\
int glv_cli_main(int argc, char* argv[], bool is_glove, const Tparametrization& glove_parametrization) {

template <class Tparametrization>
int glv_cli_main(int argc, char* argv[], bool _l_gloved, const Tparametrization& _parametrization);//forward declare for gcc

#define GLOVE_APP_MSVC_NO_CONSOLE \
comment(linker, "/SUBSYSTEM:windows /ENTRY:mainCRTStartup")

class GlvProgressMgr;
class GlvStatusMgr;
class SlvProgressionQt;

class GlvApp {
	
public:

	template <class Tparametrization>
	static int main(int _argc, char* _argv[], bool _l_auto_glove = false, bool _l_threaded = true);

private:

	/*! Class to specialize to provide output path for parameters file.*/
	template <class Tparametrization>
	struct ParamOutput {
		static std::string get_path(const Tparametrization& _parametrization) {
			return "";
		}
	};

	/*! Progressions managed by GLOVE_APP_CLI.*/
	glvm_staticVariable_def(, SlvPoolFactory<SlvProgressionQt COMMA slv::lbl::Name>, progressions);
	glvm_staticVariable(, SlvStatus, status, {});
	glvm_staticVariable(, GlvStatusMgr*, status_mgr, NULL);

public :

	static SlvProgressionQt* get_progression(const slv::lbl::Name& _name);
	/*! Show a status widget as a QMesssageBox. Does nothing if GLOVE_APP is not used.
	* \p _l_wait : if ture, the program will not continue until 'Ok' is clicked.
	* Caution, in case \p _l_wait is false, showing many QMessageBoxes (~40) altogether can produce an overflow.*/
	static void show(const SlvStatus& _status, bool _l_wait = true);

};

template <class Tparametrization>
int GlvApp::main(int _argc, char* _argv[], bool _l_auto_glove, bool _l_threaded) {

	if (SlvCLI::has_glove(_argc, _argv) || _l_auto_glove) {

		QApplication q_app(_argc, _argv);

		std::string autosave_file_name = SlvFileMgr::replace_forbidden_file_characters(Tparametrization::name(), '_', true, true);
#if OPTION_USE_THIRDPARTY_JSON==1
		autosave_file_name += ".json";
#endif

		GlvParametrizationDialog<Tparametrization> dialog;
		GlvParametrizationSaveLoad<Tparametrization>* save_load_widget = new GlvParametrizationSaveLoad<Tparametrization>(dialog.get_parametrization_widget());

		SlvCLI::Arguments arguments(_argc, _argv);

		if (!arguments.get_glove_argument().empty()) {

			save_load_widget->load(arguments.get_glove_argument());

		}

		Tparametrization parametrization = dialog.get_parametrization_widget()->get_parametrization();
		SlvStatus status;

		if (!arguments.is_empty()) {

			status = SlvCLI::parse(parametrization, arguments);

			glv::flag::showQMessageBox(QObject::tr("Arguments conflict"), status, true);

			dialog.set_parametrization(parametrization);

		} else if (SlvFile(autosave_file_name).exists() && arguments.get_glove_argument().empty()) {

			save_load_widget->load(autosave_file_name);

		}

		int result;
		if (Tparametrization::Nparameters() > 0) {
			result = dialog.exec();
		} else {
			result = QDialog::Accepted;
		}

		if (result == QDialog::Accepted) {

			save_load_widget->save(autosave_file_name);
			
			SlvDirectory directory(ParamOutput<Tparametrization>::get_path(dialog.get_parametrization()));
			if (directory.exists()) {
				save_load_widget->save(SlvFile(directory, autosave_file_name).get_path());
			}

			std::vector< std::pair<std::string, std::string> > parameter_arguments = dialog.get_parametrization().get_string_serialization_bool().first;
			for (SlvCLI::Arguments::Tparameters::const_iterator it = arguments.get_parameter_arguments().begin(); it != arguments.get_parameter_arguments().end(); ++it) {
				parameter_arguments.push_back({ it->first, it->second[0] });
			}

			std::vector<std::string> solo_arguments = dialog.get_parametrization().get_string_serialization_bool().second;
			slv::vector::add(solo_arguments, arguments.get_solo_arguments());

			std::pair<int, char**> cli_arguments = SlvCLI::get_arguments(parameter_arguments, solo_arguments);
			cli_arguments.second[0] = _argv[0];

#ifdef GLOVE_DEBUG
			if (!_l_threaded && !GlvApp::progressions().empty()) {

				glv::flag::showQMessageBox(QObject::tr("Thread issue"), SlvStatus(SlvStatus::statusType::critical, "Can not manage progressions if thread mode is not active."), true);
				return 0;

			} else {
#endif

				if (_l_threaded) {

					status_mgr() = new GlvStatusMgr;
					status_mgr()->add(&GlvApp::status());

					GlvProgressMgr progress_mgr;
					for (int i = 0; i < progressions().psize(); i++) {
						bool l_hide_when_over = !progressions()[i]->is_recurrent();
						progress_mgr.add_progression(progressions()[i], l_hide_when_over);
					}
					progress_mgr.show();

					QFuture<int> future = QtConcurrent::run(&glv_cli_main<Tparametrization>, cli_arguments.first, cli_arguments.second, true, dialog.get_parametrization());
					QFutureWatcher<int> future_watcher;
					QObject::connect(&future_watcher, SIGNAL(finished()), &q_app, SLOT(closeAllWindows()));
					future_watcher.setFuture(future);

					return q_app.exec();
				} else {
					status_mgr() = NULL;
					return glv_cli_main(cli_arguments.first, cli_arguments.second, true, dialog.get_parametrization());
				}

#ifdef GLOVE_DEBUG
			}
#endif

		} else {
			return 0;
		}

	} else {
		return glv_cli_main(_argc, _argv, false, Tparametrization());
	}

}

class QVBoxLayout;
class QGridLayout;
class QComboBox;
class QLabel;
class QDialogButtonBox;

class GlvListDialog_base : public QDialog {

    Q_OBJECT

protected:

    /*! Whether QDialog functionalities are activated or not (buttons, accept/reject).*/
    bool l_dialog;

    /*! Main layout.*/
    QVBoxLayout* layout;
    QGridLayout* list_layout;

    QLabel* text_widget;
    QLabel* list_name_widget;
    QComboBox* combo_list;
    QDialogButtonBox* button_box;

    /*! \p _parent : If not NULL, then the widget is modal.
    * \p _l_dialog : Whether the list enables QDialog properties or not, such as button box, and related signals.*/
    GlvListDialog_base(QWidget* _parent, bool _l_dialog);
    virtual ~GlvListDialog_base();

public:

    /*! Get combo's current text.*/
    std::string get_currentText();
    /*! Set combo's current index to the one corresponding to \p _name. If \p _name is not found, returns false.*/
    bool set_currentText(const std::string& _name);

    /*! Set descriptive text of the widget.*/
    void set_text(const QString& _text);

    /*! Add \p _widget to the main layout while keeping QDialogButtonBox on the bottom.*/
    void addWidget(QWidget* _widget);

    /*! QDialog's accept slot only if l_dialog is true.*/
    void accept();
    /*! QDialog's reject slot only if l_dialog is true.*/
    void reject();

protected:
    /*! Enables or disables Ok button (if dialog button box is activated).
    * Usefull to clear items which have been filtered by GlvParamListDialog_Filtering.*/
    void setOkButtonEnabled(bool _l_enable);

public slots:

    /*! Enables all items in the QComboBox list.*/
    void enable_combo_items();

};

/*! QDialog list of a list of names. See sample003 for example.*/
class GlvListDialog : public GlvListDialog_base {

public:
    /*! \p _names : List of names to fill the combo list.
    * \p _list_name : name of the list used for display.
    * \p _parent : If not NULL, then the widget is modal.
    * \p _l_dialog: Whether the list enables QDialog properties or not, such as button box, and related signals.*/
    GlvListDialog(const std::vector<std::string>& _names, const std::string _list_name, QWidget* _parent, bool _l_dialog = true);
    ~GlvListDialog();

};

/*! Default filtering structure. Any Toption is compatible with any Telement.*/
template <class Telement, class Toption, typename = void>
struct GlvListFilterDefault {
    static constexpr bool is_compatible = true;//whether Toption is compatible with Telement
};

/*! Structure in charge of filtering (disabling) QComboBox items in GlvParamListDialog and GlvListDialogTlist.
* If the type associated to a QComboBox item name is not compatible with another type (Toption), then the item is being disabled.*/
struct GlvParamListDialog_Filtering {

public:

    /*! Filters.
    * \p _combo_list : QComboBox to process.
    * \p _Nitems : if not NULL, returns the number of enabled items.*/
    template <class Tlist, template <class Tlist_item, class Toption, class _Tenable> class Tfiltering, class Toption>
    static SlvStatus filter_list(QComboBox* _combo_list, int* _Nitems);

private:

    /*! Specialization with Tlist to use dedicated macro. See example in sample003_1 and sample003_2.*/
    template <class Tlist>
    struct Spec;

    /*! Returns true if set as enabled. False if the item is filtered (disabled).
    * Tfiltering is the filtering structure
    * T1 is the type associated to item cointained in _combo_list at index
    * T2 is the filtering argument.*/
    template < template <class T1, class T2, typename = void> class Tfiltering, class T1, class T2 >
    static bool filter(QComboBox* _combo_list, unsigned int _index);

    /*! Sets current index to first item not deactivated.*/
    static void update_current_item(QComboBox* _combo_list);

};

template <class Tlist, template <class Tlist_item, class Toption, class _Tenable> class Tfiltering, class Toption>
SlvStatus GlvParamListDialog_Filtering::filter_list(QComboBox* _combo_list, int* _Nitems) {

    SlvStatus status;
    std::string item_name;
    bool l_enabled;
    if (_Nitems) *_Nitems = 0;
    for (int i = 0; i < _combo_list->count(); i++) {

        item_name = _combo_list->itemText(i).toStdString();
        l_enabled = Spec<Tlist>::template filter<Tfiltering, Toption>(item_name, _combo_list, i);

        if (l_enabled && _Nitems) (*_Nitems)++;
    }

    update_current_item(_combo_list);

    return status;
}

template <class Tlist>
struct GlvParamListDialog_Filtering::Spec {
    template <template <class Tlist_item, class Toption, class _Tenable> class Tfiltering, class Toption>
    static bool filter(const std::string& _item_name, QComboBox* _combo_list, int i) {
        return true;
    }
};

template < template <class T1, class T2, typename = void> class Tfiltering, class T1, class T2 >
bool GlvParamListDialog_Filtering::filter(QComboBox* _combo_list, unsigned int _index) {

    if (!Tfiltering<T1, T2>::is_compatible) {
        qobject_cast<QStandardItemModel*>(_combo_list->model())->item(_index)->setEnabled(false);
        return false;
    } else {
        qobject_cast<QStandardItemModel*>(_combo_list->model())->item(_index)->setEnabled(true);
        return true;
    }

}

/*! QDialog list of Tlist type.
* Tlist must have:
* - static const std::vector<std::string>& list() method
* - static const std::string& name() method
* No GlvParametrizationDialog management as compared to GlvParamListDialog.*/
template <class Tlist>
class GlvListDialogTlist : public GlvListDialog {

public:

    GlvListDialogTlist(QWidget* _parent, bool _l_dialog = true);
    ~GlvListDialogTlist() {}

    /*! Enables or disables items in QComboBox depending on whether types of the list are compatible with T1 according to Tfiltering.*/
    template < template <class T1, class T2, class Tenable> class Tfiltering, class T1 >
    void filter_list();// This method is also in GlvParamListDialog. Factorization is not straightfoward because it is impossible to virtually inherit QObject.

};

template <class Tlist>
GlvListDialogTlist<Tlist>::GlvListDialogTlist(QWidget* _parent, bool _l_dialog) :GlvListDialog(Tlist::list(), Tlist::name(), _parent, _l_dialog) {

}

template <class Tlist>
template < template <class T1, class T2, class Tenable> class Tfiltering, class T1 >
void GlvListDialogTlist<Tlist>::filter_list() {

    int Nitems;
    GlvParamListDialog_Filtering::filter_list<Tlist, Tfiltering, T1>(combo_list, &Nitems);

    if (Nitems == 0) {
        setOkButtonEnabled(false);
    } else {
        setOkButtonEnabled(true);
    }

}

template <class Tbase, class Tsublist, class Toption>
class GlvParamListDialog_Open_TemplateObject;

/*! Specialization with Tlist to use dedicated macro. Use by GlvParamListDialog_Open_TemplateObject.*/
template <class Tsublist>
struct GlvParamListDialog_Open_TemplateObject_Spec {
    template <class Tbase, class Toption>
    static bool build_parametrization_templated(GlvParametrizationDialog_base*& _configure_window, std::string _item_name, const Toption* _option, bool _l_show, QWidget* _parent);
    /*! Calls and return GlvParamListDialog_Open_TemplateObject::cast_check.
    * Only replace preprocessor macro.
    * Not implemented, just provides method signature.*/
    template <class Tbase, class Toption>
    static GlvParametrizationDialog_base* cast_check(std::string _item_name, const GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>* _list);
    /*! Creates new GlvParametrizationDialog.
    * Only replace preprocessor macro.
    * Not implemented, just provides method signature.*/
    template <class Tbase, class Toption>
    static GlvParametrizationDialog_base* build_parametrization(std::string _item_name, QWidget* _parent);
    /*! Applies changes to the created parametrization widget.
    * Not implemented, just provides method signature.*/
    template <class Tbase, class Toption>
    static void configuration(std::string _item_name, const GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>* _list);
};

/*! List to select the type among Tsublist.
Tbase: base type of the template object. Tbase::Tderived<Telement, Toption> to be the 'real' type.*/
template <class Tbase, class Tsublist, class Toption>
class GlvParamListDialog_Open_TemplateObject : public GlvListDialogTlist<Tsublist> {

private:
    /*! Pointer to the reference parametrization widget.*/
    GlvParametrizationDialog_base*& parametrization_dialog;
    /*! Whether the parametrization widget is shown or not.*/
    const bool l_show_parametrization_dialog;
    /*! Option.*/
    const Toption* option;
public:
    /*! Whether a parametrization widget has been created or not.*/
    bool l_created = false;
public:
    GlvParamListDialog_Open_TemplateObject(QWidget* _parent, GlvParametrizationDialog_base*& _parametrization_dialog, const Toption* _option, bool _l_show_parametrization_dialog);
    ~GlvParamListDialog_Open_TemplateObject();

    /*! Casts parametrization widget with a type (Targ) of the list.*/
    template <class Targ>
    GlvParametrizationDialog_base* cast_check() const;

    /*! Rejects QDialog and sets parametrization widget creation status to false.*/
    void reject();
    /*! Accepts the selected type of the list, and creates the parametrization widget.
    * Sets parametrization widget creation status to true.*/
    void accept();

    friend struct GlvParamListDialog_Open_TemplateObject_Spec<Tsublist>;
};

template <class Tbase, class Tsublist, class Toption>
GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>::GlvParamListDialog_Open_TemplateObject(QWidget* _parent, GlvParametrizationDialog_base*& _parametrization_dialog, const Toption* _option, bool _l_show_parametrization_dialog)
    :GlvListDialogTlist<Tsublist>(_parent), parametrization_dialog(_parametrization_dialog), l_show_parametrization_dialog(_l_show_parametrization_dialog) {

    option = _option;
}

template <class Tbase, class Tsublist, class Toption>
GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>::~GlvParamListDialog_Open_TemplateObject() {}

template <class Tbase, class Tsublist, class Toption>
template <class Targ>
GlvParametrizationDialog_base* GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>::cast_check() const {

    GlvParametrizationDialog_base* parametrization_dialog_cast_check;
    parametrization_dialog_cast_check = dynamic_cast<GlvParametrizationDialog<typename Tbase::template Tderived<Targ, Toption> >*>(parametrization_dialog);

    return parametrization_dialog_cast_check;
}

template <class Tbase, class Tsublist, class Toption>
void GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>::reject() {
    GlvListDialogTlist<Tsublist>::reject();

    l_created = false;
}

template <class Tbase, class Tsublist, class Toption>
void GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>::accept() {

    l_created = false;

    GlvListDialogTlist<Tsublist>::accept();
    std::string item_name = this->get_currentText();

    if (Tsublist::is_templated(item_name)) {

        l_created = GlvParamListDialog_Open_TemplateObject_Spec<Tsublist>::template build_parametrization_templated<Tbase, Toption>(parametrization_dialog, item_name, option, l_show_parametrization_dialog, this);

    } else {

        GlvParametrizationDialog_base* parametrization_dialog_cast_check;

        parametrization_dialog_cast_check = GlvParamListDialog_Open_TemplateObject_Spec<Tsublist>::template cast_check<Tbase, Toption>(item_name, this);

        if (parametrization_dialog_cast_check) {
            //means that parametrization type hasn't change from previously created parametrization_dialog

        } else {
            //means that parametrization type has changed, or simply that there was no parametrization_dialog created yet

            if (parametrization_dialog) {
                delete parametrization_dialog;
            }

            parametrization_dialog = GlvParamListDialog_Open_TemplateObject_Spec<Tsublist>::template build_parametrization<Tbase, Toption>(item_name, this->parentWidget());

            l_created = true;

            GlvParamListDialog_Open_TemplateObject_Spec<Tsublist>::configuration(item_name, this);

        }

        if (l_show_parametrization_dialog) parametrization_dialog->show();

    }

}

/*! In charge of opening a secondary list to select a secondary type. Target type is sort of: Tbase<Tsublist-pick>.
* Not supposed to be specialized.*/
template <class Tbase, class Tsublist, class Toption>
struct GlvParamListDialog_Open_Templated {

    template <template <class _Tlist_item, class _Toption, class _Tenable> class Tfiltering = GlvListFilterDefault>
    static bool open(GlvParametrizationDialog_base*& _parametrization_dialog, const Toption* _option, bool _l_show_parametrization_dialog, QWidget* _parent) {

        GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>* sublist;
        sublist = new GlvParamListDialog_Open_TemplateObject<Tbase, Tsublist, Toption>(_parent, _parametrization_dialog, _option, _l_show_parametrization_dialog);
        sublist->template filter_list<Tfiltering, Toption>();

        sublist->set_text(glv::toQString("Select " + Tbase::name() + "'s " + Tsublist::item_description()));

        if (_l_show_parametrization_dialog) {
            sublist->exec();
        } else {
            sublist->accept();
        }
        bool l_created = sublist->l_created;

        delete sublist;

        return l_created;

    }

};

template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
class GlvParamListDialog_Open_TemplateTemplateObject;

template <class Tsublist>
struct GlvParamListDialog_Open_TemplateTemplateObject_Spec {
    template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Toption>
    static bool build_parametrization_templated(GlvParametrizationDialog_base*& _configure_window, std::string _item_name, const Toption* _option, bool _l_show, QWidget* _parent);
    /*! Calls and return GlvParamListDialog_Open_TemplateObject::cast_check.
    * Only replace preprocessor macro.
    * Not implemented, just provides method signature.*/
    template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Toption>
    static GlvParametrizationDialog_base* cast_check(std::string _item_name, const GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>* _list);
    /*! Creates new GlvParametrizationDialog.
    * Only replace preprocessor macro.
    * Not implemented, just provides method signature.*/
    template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Toption>
    static GlvParametrizationDialog_base* build_parametrization(std::string _item_name, QWidget* _parent);
    /*! Applies changes to the created parametrization widget.
    * Not implemented, just provides method signature.*/
    template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Toption>
    static void configuration(std::string _item_name, const GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>* _list);
};

/*! List to select the type among Tsublist.
Tbase: base type of the template object. Tclass<Tbase::Tderived<Telement, Toption>, Toption> to be the 'real' type.*/
template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
class GlvParamListDialog_Open_TemplateTemplateObject : public GlvListDialogTlist<Tsublist> {

private:
    /*! Pointer to the reference parametrization widget.*/
    GlvParametrizationDialog_base*& parametrization_dialog;
    /*! Whether the parametrization widget is shown or not.*/
    const bool l_show_parametrization_dialog;
    /*! Option.*/
    const Toption* option;
public:
    /*! Whether a parametrization widget has been created or not.*/
    bool l_created = false;
public:
    GlvParamListDialog_Open_TemplateTemplateObject(QWidget* _parent, GlvParametrizationDialog_base*& _parametrization_dialog, const Toption* _option, bool _l_show_configure_window);
    ~GlvParamListDialog_Open_TemplateTemplateObject();

    /*! Cast parametrization widget with a type (Targ) of the list.*/
    template <class Targ>
    GlvParametrizationDialog_base* cast_check() const;

    /*! Rejects QDialog and sets parametrization widget creation status to false.*/
    void reject();
    /*! Accepts the selected type of the list, and creates the parametrization widget.
    * Sets parametrization widget creation status to true.*/
    void accept();

    friend struct GlvParamListDialog_Open_TemplateObject_Spec<Tsublist>;
};

template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>::GlvParamListDialog_Open_TemplateTemplateObject(QWidget* _parent, GlvParametrizationDialog_base*& _parametrization_dialog, const Toption* _option, bool _l_show_parametrization_dialog)
    :GlvListDialogTlist<Tsublist>(_parent), parametrization_dialog(_parametrization_dialog), l_show_parametrization_dialog(_l_show_parametrization_dialog) {

    option = _option;
}

template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>::~GlvParamListDialog_Open_TemplateTemplateObject() {}

template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
template <class Targ>
GlvParametrizationDialog_base* GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>::cast_check() const {

    GlvParametrizationDialog_base* parametrization_dialog_cast_check;
    parametrization_dialog_cast_check = dynamic_cast<GlvParametrizationDialog<Tclass<typename Tbase::template Tderived<Targ, Toption>, Toption > >*>(parametrization_dialog);

    return parametrization_dialog_cast_check;
}

template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
void GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>::reject() {
    GlvListDialogTlist<Tsublist>::reject();

    l_created = false;
}

template < template <class Tbase_derived, class Toption> class Tclass, class Tbase, class Tsublist, class Toption>
void GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>::accept() {

    l_created = false;

    GlvListDialogTlist<Tsublist>::accept();
    std::string item_name = this->get_currentText();

    if (Tsublist::is_templated(item_name)) {

        l_created = GlvParamListDialog_Open_TemplateTemplateObject_Spec<Tsublist>::template build_parametrization_templated<Tclass, Tbase, Toption>(parametrization_dialog, item_name, option, l_show_parametrization_dialog, this);

    } else {

        GlvParametrizationDialog_base* parametrization_dialog_cast_check;

        parametrization_dialog_cast_check = GlvParamListDialog_Open_TemplateTemplateObject_Spec<Tsublist>::template cast_check<Tclass, Tbase, Toption>(item_name, this);

        if (parametrization_dialog_cast_check) {
            //means that parametrization type hasn't change from previously created parametrization_dialog

        } else {
            //means that parametrization type has changed, or simply that there was no parametrization_dialog created yet

            if (parametrization_dialog) {
                delete parametrization_dialog;
            }

            parametrization_dialog = GlvParamListDialog_Open_TemplateTemplateObject_Spec<Tsublist>::template build_parametrization<Tclass, Tbase, Toption>(item_name, this->parentWidget()->parentWidget());

            l_created = true;

            GlvParamListDialog_Open_TemplateTemplateObject_Spec<Tsublist>::configuration(item_name, this);

        }

        if (l_show_parametrization_dialog) parametrization_dialog->show();

    }

}

/*! In charge of opening a tertiary list to select a tertiary type. Target type is sort of: Tclass<Tbase<Tsublist-pick>>.
* Not supposed to be specialized.*/
template < template <class Tbase_derived, class _Toption> class Tclass, class Tbase, class Tsublist, class Toption>
struct GlvParamListDialog_Open_TemplatedTemplated {

    template <template <class _Tlist_item, class _Toption, class _Tenable> class Tfiltering = GlvListFilterDefault>
    static bool open(GlvParametrizationDialog_base*& _parametrization_dialog, const Toption* _option, bool _l_show_parametrization_dialog, QWidget* _parent) {

        GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>* sublist;
        sublist = new GlvParamListDialog_Open_TemplateTemplateObject<Tclass, Tbase, Tsublist, Toption>(_parent, _parametrization_dialog, _option, _l_show_parametrization_dialog);
        sublist->template filter_list<Tfiltering, Toption>();

        sublist->set_text(glv::toQString("Select " + Tbase::name() + "'s " + Tsublist::item_description()));

        if (_l_show_parametrization_dialog) {
            sublist->exec();
        } else {
            sublist->accept();
        }
        bool l_created = sublist->l_created;

        delete sublist;

        return l_created;

    }

};

class GlvParametrizationDialog_base;
class SlvParametrization_base;

class GlvParamListDialog_base : public GlvListDialog {

	Q_OBJECT

protected:
	/*! \p _names : List of names to fill the combo list.
	* \p _list_name : name of the list used for display.
	* \p _l_dialog: Whether QDialog functionalities are activated or not (buttons, accept/reject).
	* \p _l_visible_config : If true, configure button is displayed. Otherwise, parametrization is triggered when changing QComboBox item.*/
	GlvParamListDialog_base(const std::vector<std::string>& _names, const std::string _list_name, QWidget* _parent, bool _l_dialog, bool _l_visible_config);
public:
	virtual ~GlvParamListDialog_base();
protected:

	/*! Whether configuration is displayed below list, or accessible by configure button.*/
	bool l_visible_config;

	/*! Parametrization widget.*/
	GlvParametrizationDialog_base* parametrization_dialog;

	/*! Delete parametrization widget.*/
	void delete_parametrization_dialog();

public:

	/*! Get base parametrization widget.*/
	GlvParametrizationDialog_base* get_parametrization_dialog_base();
	/*! Get base parametrization.*/
	const SlvParametrization_base* get_parametrization_base() const;

private slots:

	virtual void make_parametrization_dialog() = 0;
	virtual void make_parametrization_dialog(const QString& _item_name) = 0;

signals:
	/*! Emitted when a parametrization widget is requested in GlvParamListDialog (ex: creation).*/
	void configure(QString _item_name);

};

template <class Tparametrization>
class GlvParametrizationDialog;

/*! Configuration list of Tlist type.
* Tlist must have:
* - static const std::vector<std::string>& list() method
* - static const std::string& name() method
* Toption is the type of the optional data provided for the parametrization windows. See GlvParamListDialog_Open::open.
* The optional data is not stored in the GlvParamListDialog instance.*/
template <class Tlist, class Toption = void>
class GlvParamListDialog;

class GlvParametrizationDialog_base;
class QWidget;

/*! Specialization with Tlist to use dedicated macro. Use by GlvParamListDialog_Open.*/
template <class Tlist>
struct GlvParamListDialog_Open_Spec {
    /*! Creates new GlvParametrizationDialog.
    * Only replace preprocessor macro.
    * Not implemented, just provides method signature.*/
    template <class Toption>
    static bool build_parametrization_templated(GlvParametrizationDialog_base*& _parametrization_dialog, std::string _item_name, const Toption* _option, bool _l_show_parametrization_dialog, QWidget* _parent);
    /*! Creates new GlvParametrizationDialog.
    * Only replace preprocessor macro.
    * Not implemented, just provides method signature.*/
    template <class Toption>
    static GlvParametrizationDialog_base* build_parametrization(std::string _item_name, QWidget* _parent);
    /*! Applies changes to the created parametrization widget.
    * Not implemented, just provides method signature.*/
    template <class Toption>
    static void configuration(GlvParametrizationDialog_base* _parametrization_dialog, std::string _item_name, const Toption* _option);
};

/*! Needs specialization for each Tlist, because a macro in charge of mapping names to types should go with it.*/
template <class Tlist, class Toption = void>
struct GlvParamListDialog_Open {
    /*! Returns true if a new parametrization widget has been created.
    No implementation. Specialization has to be provided to map type names listed into types.
    See provided example: sample003.*/
    static bool open(GlvParametrizationDialog_base*& _parametrization_dialog, const std::string& _parametrization_name, const Toption* _option, bool _l_show_parametrization_dialog, QWidget* _parent) {

        bool l_created = false;

        if (Tlist::is_templated(_parametrization_name)) {

            l_created = GlvParamListDialog_Open_Spec<Tlist>::template build_parametrization_templated<Toption>(_parametrization_dialog, _parametrization_name, _option, _l_show_parametrization_dialog, _parent);

        } else {

            if (_parametrization_dialog && _parametrization_dialog->get_parametrization_base()->get_name() == _parametrization_name) {
                // nothing to do
            } else {
                if (_parametrization_dialog) delete _parametrization_dialog;

                _parametrization_dialog = GlvParamListDialog_Open_Spec<Tlist>::template build_parametrization<Toption>(_parametrization_name, _parent);

                l_created = true;

                GlvParamListDialog_Open_Spec<Tlist>::template configuration<Toption>(_parametrization_dialog, _parametrization_name, _option);
            }

            if (_l_show_parametrization_dialog) {
                _parametrization_dialog->show();
            }

        }

        return l_created;
    }
};

/*! Used when a list "List" (class_name) is defined, along with its macro: glvm_List_instruction_name_to_type.*/
#define glvm_instruction_base_to_dcast(class_name, instruction_front, parametization_base, instruction_end) \
glvm_##class_name##_instruction_name_to_type(instruction_front dynamic_cast<, parametization_base->get_name(), *>(parametization_base) instruction_end)

/*! Used when a list "List" (class_name) is defined, along with its macro: glvm_List_instruction_name_to_type.*/
#define glvm_instruction_base_to_dcast_const(class_name, instruction_front, parametization_base, instruction_end) \
glvm_##class_name##_instruction_name_to_type(instruction_front dynamic_cast<const, parametization_base->get_name(), *>(parametization_base) instruction_end)

template <class Tparametrization>
class GlvParametrizationDialog;

/*! Configuration list of Tlist type.
* Tlist must have:
* - static const std::vector<std::string>& list() method
* - static const std::string& name() method
* Toption is the type of the optional data provided for the parametrization windows. See GlvParamListDialog_Open::open.
* The optional data is not stored in the GlvParamListDialog instance.*/
template <class Tlist, class Toption>
class GlvParamListDialog : public GlvParamListDialog_base {

private:

    const Toption* optional_data;

public:

    /*! \p _list : Instance to convert to list.
    * \p _optional_data : pointer to optional data to be managed by all the parametrizations.
    * \p _l_dialog: Whether QDialog functionalities are activated or not (buttons, accept/reject).
    * \p _l_visible_config : If true, configure button is displayed. Otherwise, parametrization is triggered when changing QComboBox item.*/
    GlvParamListDialog(QWidget* _parent, const Toption* _optional_data, bool _l_dialog = true, bool _l_visible_config = true);
    GlvParamListDialog(QWidget* _parent = NULL, bool _l_dialog = true, bool _l_visible_config = true);
    ~GlvParamListDialog();

    /*! Get parametrization widget. The parametrization type must match the type currently selected/configured. Otherwise returns NULL.*/
    template <class Tparametrization>
    GlvParametrizationDialog<Tparametrization>* get_parametrization_dialog();

    /*! Set optional data for parametrization windows.*/
    void set_optional_data(const Toption* _optional_data);

public:

    /*! Applies default parametrization (if none is configured yet) and accepts QDialog.*/
    void accept();

    /*! Enables or disables items in QComboBox depending on whether types of the list are compatible with T1 according to Tfiltering.*/
    template < template <class T1, class T2, class Tenable> class Tfiltering, class T1 = Toption>
    void filter_list();//this method is also GlvListDialogTlist. I didn't restructred inheritance yet (can't virtual inherit QWidget)

private:

    /*! Implements pure virtual slot of GlvParamListDialog_base.*/
    void make_parametrization_dialog();
    /*! Implements pure virtual slot of GlvParamListDialog_base.*/
    void make_parametrization_dialog(const QString& _item_name);

    /*! Creates new parametrization window. \p _parametrization_name is the name of the parametrization type.
    * The parametrization window can be displayed or not using \p _l_show.*/
    void new_parametrization_dialog(const QString& _parametrization_name, bool l_show);

};

template <class Tlist, class Toption>
GlvParamListDialog<Tlist, Toption>::GlvParamListDialog(QWidget* _parent, const Toption* _optional_data, bool _l_dialog, bool _l_visible_config) :\
GlvParamListDialog_base(Tlist::list(), Tlist::name(), _parent, _l_dialog, _l_visible_config) {

    set_optional_data(_optional_data);

}

template <class Tlist, class Toption>
GlvParamListDialog<Tlist, Toption>::GlvParamListDialog(QWidget* _parent, bool _l_dialog, bool _l_visible_config) :\
GlvParamListDialog<Tlist, Toption>(_parent, (Toption*)(NULL), _l_dialog, _l_visible_config) {

}

template <class Tlist, class Toption>
GlvParamListDialog<Tlist, Toption>::~GlvParamListDialog() {

}

template <class Tlist, class Toption>
template <class Tparametrization>
GlvParametrizationDialog<Tparametrization>* GlvParamListDialog<Tlist, Toption>::get_parametrization_dialog() {

    return dynamic_cast<GlvParametrizationDialog<Tparametrization>*>(parametrization_dialog);//ddynamic_cast

}

template <class Tlist, class Toption>
void GlvParamListDialog<Tlist, Toption>::set_optional_data(const Toption* _optional_data) {

    optional_data = _optional_data;
}

template <class Tlist, class Toption>
void GlvParamListDialog<Tlist, Toption>::accept() {

    // Do not call new_parametrization_dialog if a parametrization widget already exists.
    // Avoids getting list items value that are by default not the ones that may be configured
    // Call it if combo item name differs from the current parametrization (ex: combo item has changed and direct 'ok') 
    if (!parametrization_dialog || parametrization_dialog->get_parametrization_base()->get_name() != combo_list->currentText().toStdString()) {
        bool l_show = false;
        new_parametrization_dialog(combo_list->currentText(), l_show);
    }

    GlvListDialog::accept();

}

template <class Tlist, class Toption>
template < template <class T1, class T2, class Tenable> class Tfiltering, class T1 >
void GlvParamListDialog<Tlist, Toption>::filter_list() {

    int Nitems;
    GlvParamListDialog_Filtering::filter_list<Tlist, Tfiltering, T1>(combo_list, &Nitems);

    if (Nitems == 0) {
        setOkButtonEnabled(false);
    } else {
        setOkButtonEnabled(true);
    }

}

template <class Tlist, class Toption>
void GlvParamListDialog<Tlist, Toption>::make_parametrization_dialog(const QString& _item_name) {

    bool l_show = true;
    new_parametrization_dialog(_item_name, l_show);

}

template <class Tlist, class Toption>
void GlvParamListDialog<Tlist, Toption>::make_parametrization_dialog() {

    make_parametrization_dialog(combo_list->currentText());

}

template <class Tlist, class Toption>
void GlvParamListDialog<Tlist, Toption>::new_parametrization_dialog(const QString& _parametrization_name, bool l_show) {

    /*! This is where specialization occurs.*/
    bool l_created = GlvParamListDialog_Open<Tlist, Toption>::open(parametrization_dialog, _parametrization_name.toStdString(), optional_data, l_show, this);

    if (l_created) emit configure(_parametrization_name);
}

// Needed most of the time when using glv lists

/*! GlvWidgetData for type SlvParametrization*/
template <class Tparametrization>
class GlvWidgetData<Tparametrization, typename std::enable_if<std::is_base_of<SlvParametrization_base, Tparametrization>::value>::type> : public GlvParametrizationWidget<Tparametrization> {

public:
    GlvWidgetData(Tparametrization _value = Tparametrization(), QWidget* _parent = 0) :GlvParametrizationWidget<Tparametrization>(_value, true, _parent) {
        this->set_checkable_collapse(true);
        this->set_scrollable(false);
    }
    ~GlvWidgetData() {}

};

template <class Tparametrization>
struct GlvWidgetMakerConnect<Tparametrization, typename std::enable_if<std::is_base_of<SlvParametrization_base, Tparametrization>::value>::type> {
    static void connect(GlvWidgetData<Tparametrization>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(parameterChanged(std::string)), _widget_connector, SLOT(valueChanged_slot(std::string)));
    }
};

// Include all GlvWidgetData specializations

// Include necessary headers for managing parametrization widgets

/*! Widget to add in a GlvWidgetData specialization. Manages save and load of Tdata in a binary file.
* See example sample009.*/
template <class Tdata>
class GlvWidgetSaveLoad : public GlvWidgetSaveLoad_base {

private:

    /*! Handled widget in regular case.*/
    GlvWidget<Tdata>* widget;
    /*! Handled widget in specialization case.*/
    GlvWidgetData<Tdata>* widget_data;

public:

    /*! \p _widget : direct integration to the GlvWidget. Nothing else to do.
    * \p _allowed_extensions : file extensions the file can read and write to. Allowed extensions contains by default the static name of Tdata.
    * \p _orientation : Orientation of Save/Load buttons. Stacked or side-by-side (default). */
    GlvWidgetSaveLoad(GlvWidget<Tdata>* _widget, SlvFileExtensions _allowed_extensions = {}, const  Qt::Orientation _orientation = Qt::Orientation::Horizontal);
private:
    /*! Same, but allows integration directly in a GlvWidgetData. Recommended to use only in case of GlvWidgetData specialization.*/
    GlvWidgetSaveLoad(GlvWidgetData<Tdata>* _widget_data, SlvFileExtensions _allowed_extensions = {}, const  Qt::Orientation _orientation = Qt::Orientation::Horizontal);
public:
    ~GlvWidgetSaveLoad();

    /*! Save data to file \p _file_name.*/
    void save(const std::string& _file_name);
    /*! Load data from file \p _file_name.*/
    SlvStatus load(const std::string& _file_name);

private:

    /*! Friend class for specific case manaing GlvWidgetData.*/
    template <class T, typename>
    friend class GlvWidgetData;

};

template <class Tdata>
GlvWidgetSaveLoad<Tdata>::GlvWidgetSaveLoad(GlvWidget<Tdata>* _widget, SlvFileExtensions _allowed_extensions, Qt::Orientation _orientation) : GlvWidgetSaveLoad_base((_allowed_extensions.add(SlvFileMgr::replace_forbidden_file_characters(SlvDataName<Tdata>::name(), '_', true, true)), _allowed_extensions), _orientation, SlvDataName<Tdata>::name()) {

    widget = _widget;
    _widget->set_save_load_widget(this);
    widget_data = NULL;

}

template <class Tdata>
GlvWidgetSaveLoad<Tdata>::GlvWidgetSaveLoad(GlvWidgetData<Tdata>* _widget_data, SlvFileExtensions _allowed_extensions, Qt::Orientation _orientation) : GlvWidgetSaveLoad_base((_allowed_extensions.add(SlvFileMgr::replace_forbidden_file_characters(SlvDataName<Tdata>::name(), '_', true, true)), _allowed_extensions), _orientation, SlvDataName<Tdata>::name()) {

    widget_data = _widget_data;
    widget = NULL;

}

template <class Tdata>
GlvWidgetSaveLoad<Tdata>::~GlvWidgetSaveLoad() {

    widget->set_save_load_widget(NULL);

}

template <class Tdata>
void GlvWidgetSaveLoad<Tdata>::save(const std::string& _file_name) {

    Tdata value;
    if (widget) {
        value = widget->get_value();
    } else if (widget_data) {
        value = widget_data->get_value();
    }
    SlvFileMgr::write_binary(value, _file_name);

}

template <class Tdata>
SlvStatus GlvWidgetSaveLoad<Tdata>::load(const std::string& _file_name) {

    Tdata value;
    SlvStatus status = SlvFileMgr::read_binary(value, _file_name);
    if (status) {
        if (widget) {
            widget->set_value(value);
        } else if (widget_data) {
            widget_data->set_value(value);
        }
    }

    return status;
}

/*! Convenience methods to make Glv widgets out of Tdata.*/
class GlvWidgetAuto {

public:

    template <class Tdata>
    static GlvWidget<Tdata>* make(const Tdata _value = Tdata(), bool l_editable = true, QWidget* _parent = 0);

    template <class Tdata>
    static GlvDescribedWidget<Tdata>* make_described(const Tdata _value = Tdata(), std::string _data_name = "", std::string _description = "", bool l_editable = true, QWidget* _parent = 0);

    template <class Tparametrization>
    static GlvParametrizationWidget<Tparametrization>* make_parametrization(const Tparametrization _parametrization = Tparametrization(), bool l_editable = true, QWidget* _parent = 0);

};

template <class Tdata>
GlvWidget<Tdata>* GlvWidgetAuto::make(const Tdata _value, bool l_editable, QWidget* _parent) {

    GlvWidget<Tdata>* widget = new GlvWidget<Tdata>(_value, l_editable, _parent);
    return widget;
}

template <class Tdata>
GlvDescribedWidget<Tdata>* GlvWidgetAuto::make_described(const Tdata _value, std::string _data_name, std::string _description, bool l_editable, QWidget* _parent) {

    GlvDescribedWidget<Tdata>* widget = new GlvDescribedWidget<Tdata>(_value, _data_name, _description, l_editable, _parent);
    return widget;
}

template <class Tparametrization>
GlvParametrizationWidget<Tparametrization>* GlvWidgetAuto::make_parametrization(const Tparametrization _parametrization, bool l_editable, QWidget* _parent) {

    GlvParametrizationWidget<Tparametrization>* widget = new GlvParametrizationWidget<Tparametrization>(_parametrization, l_editable, _parent);
    return widget;
}

#endif

/*! Sort management of a list of template data. Not to be used directly. Use SlvSortAscending or SlvSortDescending.
* Sort data as soon as they are added.
* Tdata is the type of data to sort, and Trange is the type by which two Tdata are being compared.
* Range is the maximal range between data. Range value must be positive.
* Maximum number of datas sorted is always 1 at minimum.
* Possibility to limit the number of data.
* Ascending: Input priority (front of datas) to the lowest values.
* Descending: Input priority (front of datas) to the highest values.*/
template <class Tdata, class Trange = Tdata>
class SlvSort : public SlvParametrization2<unsigned int, Trange>, virtual public SlvIOS {

    glvm_parameter_ruled(1, Ndatas_max, unsigned int, "Maximum number of elements", "Maximum number the sort instance can contain.", (unsigned int)-1)
    glvm_parameter_add_rule(min, 1)
    glvm_parameter_end
    glvm_parameter_ruled(2, range, Trange, "Maximum range", "Maximum delta from the front element.", 0)
    glvm_parameter_add_rule(min, 0)
    glvm_parameter_end

protected:

    std::vector<Tdata> datas;

public:

    SlvSort() :glvm_parametrization_constructor(Ndatas_max, range) {}
    /*! \p _Ndatas_max is the maximum number of elements in the instance.
    * \p _range is the maximum delta from the front element.*/
    SlvSort(unsigned int _Ndatas_max, Trange _range = 0);
    ~SlvSort();

    /*! Clear sorted datas. Keeps parameters.*/
    void clear();

    unsigned int size() const;
    const Tdata& operator[] (const unsigned int i) const;

    /*! Access datas vector.*/
    const std::vector<Tdata>& get() const;
    /*! Access datas vector.*/
    std::vector<Tdata>& get();

    /*! Get index where \p _data should belong.*/
    unsigned int get_index(const Tdata& _data) const;
    /*! Add \p _data. Return true if successfully added.*/
    bool add(const Tdata& _data);

    /*! Comparison test between two datas. Implemented in SlvSortAscending and SlvSortDescending.*/
    virtual bool test_data(const Tdata& _data1, const Tdata& _data2) const = 0;
    /*! Return true if \p _data is in the proper range, comparing from front sorted data.*/
    virtual bool check_range(const Tdata& _data) const = 0;

    void writeB(std::ofstream& _output_file) const;
    bool readB(std::ifstream& _input_file);

private:

    void ostream(std::ostream& _os) const;
    void istream(std::istream& _is);

};

template <class Tdata, class Trange>
SlvSort<Tdata, Trange>::SlvSort(unsigned int _Ndatas_max, Trange _range) :SlvSort() {
    set_Ndatas_max(_Ndatas_max);
    set_range(_range);
}

template <class Tdata, class Trange>
SlvSort<Tdata, Trange>::~SlvSort() {

}

template <class Tdata, class Trange>
void SlvSort<Tdata, Trange>::clear() {

    datas.clear();
}

template <class Tdata, class Trange>
unsigned int SlvSort<Tdata, Trange>::size() const {

    return (unsigned int)datas.size();
}

template <class Tdata, class Trange>
const Tdata& SlvSort<Tdata, Trange>::operator[] (const unsigned int i) const {

    return datas[i];
}

template <class Tdata, class Trange>
const std::vector<Tdata>& SlvSort<Tdata, Trange>::get() const {
    return datas;
}

template <class Tdata, class Trange>
std::vector<Tdata>& SlvSort<Tdata, Trange>::get() {
    return datas;
}

template <class Tdata, class Trange>
unsigned int SlvSort<Tdata, Trange>::get_index(const Tdata& _data) const {

    unsigned int i = 0;
    unsigned int i_lower = 0;
    unsigned int i_upper = (unsigned int)datas.size();

    while (i_lower + 1 < i_upper) {

        i = i_lower + (i_upper - i_lower) / 2;

        if (test_data(datas[i], _data)) {
            i_lower = i;
        } else {
            i_upper = i;
        }

    }

    if (i_lower != i_upper) {
        if (test_data(datas[i_lower], _data)) {
            i = i_upper;
        } else {
            i = i_lower;
        }
    }

    return i;

}

template <class Tdata, class Trange>
bool SlvSort<Tdata, Trange>::add(const Tdata& _data) {

    bool l_return = true;

    //get index where _data should belong
    unsigned int i = get_index(_data);

    if (i == 0) {

        datas.insert(datas.begin(), _data);
        if (datas.size() > get_Ndatas_max()) {
            datas.pop_back();
        } else if (get_range() != Trange(0)) {// range reference may have changed
            while (!check_range(datas.back())) {
                datas.pop_back();
            }
        }

    } else {

        if (i == datas.size()) {

            if (i < get_Ndatas_max() && (get_range() == Trange(0) || check_range(_data))) {
                datas.push_back(_data);
            } else {
                l_return = false;
            }

        } else {

            datas.insert(datas.begin() + i, _data);
            if (datas.size() > get_Ndatas_max()) {
                datas.pop_back();
            }

        }

    }

    return l_return;
}

template <class Tdata, class Trange>
void SlvSort<Tdata, Trange>::writeB(std::ofstream& _output_file) const {
    slv::rw::writeB(datas, _output_file);
}

template <class Tdata, class Trange>
void SlvSort<Tdata, Trange>::ostream(std::ostream& _os) const {
    _os << datas;
}

template <class Tdata, class Trange>
bool SlvSort<Tdata, Trange>::readB(std::ifstream& _input_file) {
    return slv::rw::readB(datas, _input_file);
}

template <class Tdata, class Trange>
void SlvSort<Tdata, Trange>::istream(std::istream& _is) {
    _is >> datas;
}

/////////////////////////////////////////////////////////////////////////////////////
//////////////////// Ascending/Descending ///////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

template <class Tdata, class Trange = Tdata>
class SlvSortDescending : public SlvSort<Tdata, Trange> {

    glvm_parametrization2_inherited_template_init(SlvSort<Tdata COMMA Trange>)// Required for GCC
    glvm_parametrization2_init("Sort descending")

public:

    /*! \p _Ndatas_max is the maximum number of elements in the instance.
    * \p _range is the maximum delta from the front element.*/
    SlvSortDescending(unsigned int _Ndatas_max = -1, Trange _range = Trange(0));
    ~SlvSortDescending();

private:

    bool test_data(const Tdata& _data1, const Tdata& _data2) const;
    bool check_range(const Tdata& _data) const;

};

template <class Tdata, class Trange>
SlvSortDescending<Tdata, Trange>::SlvSortDescending(unsigned int _Ndatas_max, Trange _range) :SlvSort<Tdata, Trange>(_Ndatas_max, _range) {

}

template <class Tdata, class Trange>
SlvSortDescending<Tdata, Trange>::~SlvSortDescending() {

}

template <class Tdata, class Trange>
bool SlvSortDescending<Tdata, Trange>::test_data(const Tdata& _data1, const Tdata& _data2) const {
    return _data1 >= _data2;
}

template <class Tdata, class Trange>
bool SlvSortDescending<Tdata, Trange>::check_range(const Tdata& _data) const {
    return this->datas.front() - _data <= this->get_range();
}

template <class Tdata, class Trange = Tdata>
class SlvSortAscending : public SlvSort<Tdata, Trange> {

    glvm_parametrization2_inherited_template_init(SlvSort<Tdata COMMA Trange>)// Required for GCC
    glvm_parametrization2_init("Sort ascending")

public:

    /*! \p _Ndatas_max is the maximum number of elements in the instance.
    * \p _range is the maximum delta from the front element.*/
    SlvSortAscending(unsigned int _Ndatas_max = -1, Trange _range = Trange(0));
    ~SlvSortAscending();

private:

    bool test_data(const Tdata& _data1, const Tdata& _data2) const;
    bool check_range(const Tdata& _data) const;

};

template <class Tdata, class Trange>
SlvSortAscending<Tdata, Trange>::SlvSortAscending(unsigned int _Ndatas_max, Trange _range) :SlvSort<Tdata, Trange>(_Ndatas_max, _range) {

}

template <class Tdata, class Trange>
SlvSortAscending<Tdata, Trange>::~SlvSortAscending() {

}

template <class Tdata, class Trange>
bool SlvSortAscending<Tdata, Trange>::test_data(const Tdata& _data1, const Tdata& _data2) const {
    return _data1 <= _data2;
}

template <class Tdata, class Trange>
bool SlvSortAscending<Tdata, Trange>::check_range(const Tdata& _data) const {
    return _data - this->datas.front() <= this->get_range();
}

template <class T>
class SlvSize2d : public SlvIOS {

public:

	T width;
	T height;

	SlvSize2d(T _width = T(), T _height = T());

	bool operator==(const SlvSize2d<T>& _size) const;

	bool readB(std::ifstream& _input_file);
	void writeB(std::ofstream& _output_file) const;

private:

	void istream(std::istream& _is);
	void ostream(std::ostream& _os) const;

};

template <class T>
SlvSize2d<T>::SlvSize2d(T _width, T _height) {

	width = _width;
	height = _height;

}

template <class T>
bool SlvSize2d<T>::operator==(const SlvSize2d<T>& _size) const {

	return width == _size.width && height == _size.height;

}

template <class T>
bool SlvSize2d<T>::readB(std::ifstream& _input_file) {

    bool l_read = slv::rw::readB(width, _input_file);
    if (l_read) l_read = slv::rw::readB(height, _input_file);
    return l_read;

}

template <class T>
void SlvSize2d<T>::writeB(std::ofstream& _output_file) const {

    slv::rw::writeB(width, _output_file);
    slv::rw::writeB(height, _output_file);
}

template <class T>
void SlvSize2d<T>::istream(std::istream& _is) {

    std::string size_str;
    _is >> size_str;
    
	size_t pos = size_str.find('x');
	if (pos != std::string::npos) {
		std::istringstream(size_str.substr(0, pos)) >> width;
		std::istringstream(size_str.substr(pos + 1)) >> height;
	}

}

template <class T>
void SlvSize2d<T>::ostream(std::ostream& _os) const {

    _os << width << "x" << height;

}

#ifndef GLOVE_DISABLE_QT

/*! Widget for std::pair.*/
class GlvSize2dWidget_base : public QWidget {
    Q_OBJECT
protected:
    GlvSize2dWidget_base(QWidget* _parent = 0) : QWidget(_parent) {}
    virtual ~GlvSize2dWidget_base() {}
public:
    void set_editable(bool l_editable) {
        QWidget::setEnabled(l_editable);
    }
signals:
    /*! Emitted when width is modified.*/
    void valueChanged_width();
    /*! Emitted when height is modified.*/
    void valueChanged_height();
};

template <class T>
class GlvDescribedWidget;

#define _Tdata_ SlvSize2d<T>

/*! Widget for SlvSize2d.*/
template <class T>
class GlvSize2dWidget : public GlvSize2dWidget_base {

private:

    GlvDescribedWidget<T>* width_widget;
    GlvDescribedWidget<T>* height_widget;

public:

    GlvSize2dWidget(_Tdata_ _size = _Tdata_(), QWidget* _parent = 0);
    ~GlvSize2dWidget();

    void set_size(const _Tdata_ _size);
    _Tdata_ get_size() const;

};

template <class T>
GlvSize2dWidget<T>::GlvSize2dWidget(_Tdata_ _size, QWidget* _parent) : GlvSize2dWidget_base(_parent) {

    QHBoxLayout* layout = new QHBoxLayout;
    setLayout(layout);

    layout->setSpacing(4);
    layout->setContentsMargins(0, 0, 0, 0);

    bool l_editable = true;
    width_widget = new GlvDescribedWidget<T>(_size.width, "", "Width", l_editable, _parent);
    connect(width_widget, SIGNAL(valueChanged()), this, SIGNAL(valueChanged_width()));
    layout->addWidget(width_widget);
    layout->addWidget(new QLabel("x"));
    height_widget = new GlvDescribedWidget<T>(_size.height, "", "Height", l_editable, _parent);
    connect(height_widget, SIGNAL(valueChanged()), this, SIGNAL(valueChanged_height()));
    layout->addWidget(height_widget);

}

template <class T>
GlvSize2dWidget<T>::~GlvSize2dWidget() {

}

template <class T>
void GlvSize2dWidget<T>::set_size(const _Tdata_ _size) {

    width_widget->set_value(_size.width);
    height_widget->set_value(_size.height);

}

template <class T>
_Tdata_ GlvSize2dWidget<T>::get_size() const {

    _Tdata_ value;
    value.width = width_widget->get_value();
    value.height = height_widget->get_value();
    return value;

}

#undef _Tdata_

#define Tdata SlvSize2d<T>
/*! GlvWidgetData specialization for template type: std::vector.*/
template <class T>
class GlvWidgetData<Tdata> : public GlvSize2dWidget<T> {

public:
    GlvWidgetData(Tdata _size = Tdata(), QWidget* _parent = 0) :GlvSize2dWidget<T>(_size, _parent) {}
    ~GlvWidgetData() {}

    Tdata get_value() const {
        return GlvSize2dWidget<T>::get_size();
    }
    void set_value(const Tdata& _value) {
        return GlvSize2dWidget<T>::set_size(_value);
    }

};

template <class T>
struct GlvWidgetMakerConnect<Tdata> {
    static void connect(GlvWidgetData<Tdata>* _widget, GlvWidget_base::GlvWidgetConnector* _widget_connector) {
        QObject::connect(_widget, SIGNAL(valueChanged_width()), _widget_connector, SLOT(valueChanged_slot()));
        QObject::connect(_widget, SIGNAL(valueChanged_height()), _widget_connector, SLOT(valueChanged_slot()));
    }
};

#undef Tdata

#endif

/*! Get name of template type. Specialization. Name std::vector< std::vector<> >.*/
template <class T>
struct SlvDataName< std::vector< std::vector<T> > > {
    static std::string name() {
        std::string name = "matrix";
        name += "<";
        name += SlvDataName<T>::name();
        name += ">";
        return name;
    }
};

#if __cplusplus > 201402L

template <>
bool slv::rw::readB<std::filesystem::path>(std::filesystem::path& _dat, std::ifstream& _input_file);
template <>
void slv::rw::writeB<std::filesystem::path>(const std::filesystem::path& _dat, std::ofstream& _output_file);

#endif

#ifndef GLOVE_DISABLE_QT

template <>
void slv::rw::writeB<QModelIndex>(const QModelIndex& _index, std::ofstream& _output_file);
template <>
bool slv::rw::readB<QModelIndex>(QModelIndex& _index, std::ifstream& _input_file);

//specialized with double because "Function template partial specialization is not allowed ..."
template <>
void slv::rw::writeB< QVector<double> >(const QVector<double>& _vector, std::ofstream& _output_file);

template <>
bool slv::rw::readB< QVector<double> >(QVector<double>& _vector, std::ifstream& _input_file);

#endif

/*! SAME AS std::pair.
Combos are compared according to their value for inf/sup operators.
Combos are compared according to their data for equal/different operators.*/
template <class Tdata, class Tvalue>
class SlvCombo : public SlvIOS {

public:

	Tdata data;
	Tvalue value;

	SlvCombo();
	SlvCombo(const Tdata& _data, const Tvalue& _value);
	~SlvCombo();

	////////////////////
	//comparable data
	////////////////////
	bool operator==(const SlvCombo<Tdata, Tvalue>& _combo) const;
	bool operator!=(const SlvCombo<Tdata, Tvalue>& _combo) const;
	////////////////////

	////////////////////
	//comparable value
	////////////////////
	bool operator>(const SlvCombo<Tdata, Tvalue>& _combo) const;
	bool operator>(const Tvalue& _value) const;
	bool operator<(const SlvCombo<Tdata, Tvalue>& _combo) const;
	bool operator<(const Tvalue& _value) const;
	bool operator>=(const SlvCombo<Tdata, Tvalue>& _combo) const;
	bool operator>=(const Tvalue& _value) const;
	bool operator<=(const SlvCombo<Tdata, Tvalue>& _combo) const;
	bool operator<=(const Tvalue& _value) const;

	Tvalue operator-(const SlvCombo<Tdata, Tvalue>& _combo) const;
	Tvalue operator+(const SlvCombo<Tdata, Tvalue>& _combo) const;

	void writeB(std::ofstream& _output_file) const;
	bool readB(std::ifstream& _input_file);

private:

	void ostream(std::ostream& _os) const;
	void istream(std::istream& _is);

};

template <class Tdata, class Tvalue>
SlvCombo<Tdata, Tvalue>::SlvCombo() {

}

template <class Tdata, class Tvalue>
SlvCombo<Tdata, Tvalue>::SlvCombo(const Tdata& _data, const Tvalue& _value) {
	data = _data;
	value = _value;
}

template <class Tdata, class Tvalue>
SlvCombo<Tdata, Tvalue>::~SlvCombo() {

}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator==(const SlvCombo<Tdata, Tvalue>& _combo) const {
	//for slv::vector::remove for instance
	return data == _combo.data;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator!=(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return !(*this == _combo);
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator>(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return value > _combo.value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator>(const Tvalue& _value) const {
	return value > _value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator<(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return value < _combo.value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator<(const Tvalue& _value) const {
	return value < _value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator>=(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return value >= _combo.value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator>=(const Tvalue& _value) const {
	return value >= _value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator<=(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return value <= _combo.value;
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::operator<=(const Tvalue& _value) const {
	return value <= _value;
}

template <class Tdata, class Tvalue>
Tvalue SlvCombo<Tdata, Tvalue>::operator-(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return Tvalue(value - _combo.value);//constructor called here for enum managmenet
}

template <class Tdata, class Tvalue>
Tvalue SlvCombo<Tdata, Tvalue>::operator+(const SlvCombo<Tdata, Tvalue>& _combo) const {
	return Tvalue(value + _combo.value);
}

template <class Tdata, class Tvalue>
void SlvCombo<Tdata, Tvalue>::writeB(std::ofstream& _output_file) const {

	slv::rw::writeB(data, _output_file);
	slv::rw::writeB(value, _output_file);

}

template <class Tdata, class Tvalue>
void SlvCombo<Tdata, Tvalue>::ostream(std::ostream& _os) const {

	_os << '{' << data << ", " << value << '}';
}

template <class Tdata, class Tvalue>
bool SlvCombo<Tdata, Tvalue>::readB(std::ifstream& _input_file) {

	bool l_read = slv::rw::readB(data, _input_file);
	if (l_read) l_read = slv::rw::readB(value, _input_file);
	return l_read;
}

template <class Tdata, class Tvalue>
void SlvCombo<Tdata, Tvalue>::istream(std::istream& _is) {

	_is >> data;
	_is >> value;
}

/*! Static methods for SlvCombo.*/
struct SlvComboFunc {

    /*! Get value of the first SlvCombo in \p _combos which data equals \p _data.
    * Return NULL if not found.*/
    template <class Tdata, class Tvalue>
    static const Tvalue* get_combo_value(const Tdata& _data, const std::vector< SlvCombo<Tdata, Tvalue> >& _combos);

    /*! Get index of \p _combos of the first SlvCombo in \p _combos which data equals \p _data.
    * Return -1 if not found.*/
    template <class Tdata, class Tvalue>
    static unsigned int get_combo_index(const Tdata& _data, const std::vector< SlvCombo<Tdata, Tvalue> >& _combos);

    /*! Get iterator of \p _combos of the first SlvCombo in \p _combos which data equals \p _data.
    * Return _combos.end() if not found.*/
    template <class Tdata, class Tvalue>
    static typename std::vector< SlvCombo<Tdata, Tvalue> >::const_iterator find_data(const Tdata& _data, const std::vector< SlvCombo<Tdata, Tvalue> >& _combos);

    /*! Get value sum of \p _combos.*/
    template <class Tdata, class Tvalue>
    static Tvalue calc_value_sum(const std::vector< SlvCombo<Tdata, Tvalue> >& _combos);

};

template <class Tdata, class Tvalue>
const Tvalue* SlvComboFunc::get_combo_value(const Tdata& _data, const std::vector< SlvCombo<Tdata, Tvalue> >& _combos) {

    typename std::vector< SlvCombo<Tdata, Tvalue> >::const_iterator it = find_data(_data, _combos);
    if (it != _combos.end()) {
        return &it->value;
    } else {
        return NULL;
    }

}

template <class Tdata, class Tvalue>
unsigned int SlvComboFunc::get_combo_index(const Tdata& _data, const std::vector< SlvCombo<Tdata, Tvalue> >& _combos) {

    typename std::vector< SlvCombo<Tdata, Tvalue> >::const_iterator it = find_data(_data, _combos);
    if (it != _combos.end()) {
        return std::distance(_combos.begin(), it);
    } else {
        return -1;
    }

}

template <class Tdata, class Tvalue>
typename std::vector< SlvCombo<Tdata, Tvalue> >::const_iterator SlvComboFunc::find_data(const Tdata& _data, const std::vector< SlvCombo<Tdata, Tvalue> >& _combos) {

    typename std::vector< SlvCombo<Tdata, Tvalue> >::const_iterator it = _combos.begin();

    while (it != _combos.end() && it->data != _data) {
        ++it;
    }

    return it;
}

template <class Tdata, class Tvalue>
Tvalue SlvComboFunc::calc_value_sum(const std::vector< SlvCombo<Tdata, Tvalue> >& _combos) {

    Tvalue sum = 0;

    for (typename std::vector< SlvCombo<Tdata, Tvalue> >::const_iterator it = _combos.begin(); it != _combos.end(); ++it) {
        sum += it->value;
    }

    return sum;
}

template <>
bool slv::rw::readB<int>(int* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<unsigned int>(unsigned int* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<long unsigned int>(long unsigned int* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<unsigned long long>(unsigned long long* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<float>(float* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<double>(double* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<bool>(bool* _dat, std::ifstream& _input_file);
template <>
bool slv::rw::readB<char>(char* _dat, std::ifstream& _input_file);

#ifndef GLOVE_DISABLE_QT

class QPushButton;
class SlvProgressionQt;
class GlvProgressMgr;

/*! Widget managing progress a SlvProgressionQt.*/
class GlvProgression : public QProgressDialog {

    Q_OBJECT

private:

    /*! Watching the instance belongs to.*/
    GlvProgressMgr* progress_mgr;
    SlvProgressionQt* progression;
    QPushButton* cancel_button;

    /*! Automatically hide the progression once ended.*/
    const bool l_auto_hide;
    /*! Show before the progress has started.*/
    const bool l_show_before_start;
    /*! Whether progress has started or not.*/
    bool l_has_started;
    /*! If progress is not cancelable, keep cancel request for end.*/
    bool l_cancel_requested;

public:

    GlvProgression(GlvProgressMgr* _progress_mgr, SlvProgressionQt* _progression = 0, bool _l_auto_hide = false, bool _l_show_before_start = false, QWidget* _parent = 0);
    ~GlvProgression();

    /*! Associate progression to this progress instance.*/
    void set_progression(SlvProgressionQt* _progression);
    /*! Get progression.*/
    const SlvProgressionQt* get_progression() const;

    /*! Whether the progression has reached its maximum or not.*/
    bool is_over() const;

    /*! Whether the progression is showable based on start status or shoability before start.
    * Workaround to manage QProgressDialog::minimumDuration().*/
    bool is_showable() const;

public slots:

    void cancel();

private slots:

    /*! Start/reset GlvProgression.
    * Enable or diable Cancel button depending on the attached progression..*/
    void start();
    /*! Auto hide if enabled.*/
    void end();
    /*! Remove progression from GlvProgressMgr.*/
    void final();

};

class QTreeView;
class QStandardItemModel;

namespace glv {
	/*! Methods managing View widgets.*/
	namespace view {
		/*! Creates new QTreeView from a \p _model.*/
		QTreeView* toQTreeView(QStandardItemModel* _model);
		/*! Creates new QTreeView from a \p _data.*/
		template <class Tdata>
		QTreeView* toQTreeView(const Tdata& _data);

		/*! Tree expansions coordinates.*/
		typedef std::vector< std::vector<unsigned int> > Ttree_expansions;
		namespace {//anonymous namespace to simulate private attribute
			void get_tree_expansions(QTreeView* _tree_view, QModelIndex _index, Ttree_expansions& _expansions, const std::vector<unsigned int>& _expansion_element);
		}
		/*! Get the tree expansions of the \p _tree_view*/
		Ttree_expansions get_tree_expansions(QTreeView* _tree_view);
		/*! Set the tree expansions of the \p _tree_view*/
		void set_tree_expansions(QTreeView* _tree_view, const Ttree_expansions& _expansion);
	}
}

template <class Tdata>
QTreeView* glv::view::toQTreeView(const Tdata& _data) {

	return toQTreeView(toQStandardItemModel(_data));
}

//tricky to include using Clang. Used for debug mostly

template <class T>
std::ostream& operator<<(std::ostream& _os, const QVector<T>& _vector) {

    _os << _vector.toStdVector();

    return _os;
}

template <class T>
std::istream& operator>>(std::istream& _is, QVector<T>& _vector) {

    std::vector<T> _std_vector;
    _is >> _std_vector;
    _vector.fromStdVector(_std_vector);

    return _is;
}

#endif

template <class T>
std::istream& operator>>(std::istream& _is, T*& ptr);

template <class T>
std::istream& operator>>(std::istream& _is, T*& ptr) {
    return _is;
}

/*! Can be used in GlvParamListDialog::filter_list<SlvIsSameFilter, Targ>().
* Possibility to filter list with filter structure and a template argument.*/
template <class T1, class T2, typename = void>
struct SlvIsSameFilter {
    static constexpr bool is_compatible = std::is_same<T1, T2>::value;
};

/*! Contains functions for the slv framework. No Qt/Glv here.*/
namespace slv {
    /*! Misc convenient functions.*/
    namespace misc {
        /*! Get number of decimals of \p _value.
        * \p _l_floating_point_arithmetic_error : whether to assume rounding in the order of floating point arithmetic error.*/
        template <class T>
        unsigned int get_Ndecimals(const T& _value, bool _l_round_floating_point_arithmetic_error = true);
    }
}

template <class T>
unsigned int slv::misc::get_Ndecimals(const T& _value, bool _l_round_floating_point_arithmetic_error) {

    unsigned int count = 0;
    T value = std::abs(_value);
    value = value - int(value);
    // Floating point arithmetic error
    T fpae = T(100) * std::numeric_limits<T>::epsilon();
    T tolerance = fpae;
    T error(0);// initalization value is not used
    if (_l_round_floating_point_arithmetic_error) error = std::abs(T(1) - value);
    while (value > tolerance && (!_l_round_floating_point_arithmetic_error || error > fpae)) {
        value *= T(10);
        ++count;
        value = value - int(value);
        if (_l_round_floating_point_arithmetic_error) error = std::abs(T(1) - value);
    }

    return count;
}

#ifndef GLOVE_DISABLE_QT

class QDialogButtonBox;

/*! Convenience class to build a ok / cancel QDialog widget. Twidget must inherit QWidget.*/
template <class Twidget>
class GlvDialog : public QDialog {

private:

	QDialogButtonBox* button_box;

public:

	Twidget* widget;

	GlvDialog();
	~GlvDialog();

};

template <class Twidget>
GlvDialog<Twidget>::GlvDialog() {

	QVBoxLayout* layout = new QVBoxLayout;
	this->setLayout(layout);
	widget = new Twidget;
	layout->addWidget(widget);

	button_box = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
	connect(button_box, &QDialogButtonBox::accepted, this, &QDialog::accept);
	connect(button_box, &QDialogButtonBox::rejected, this, &QDialog::reject);
	layout->addWidget(button_box);

}

template <class Twidget>
GlvDialog<Twidget>::~GlvDialog() {

}

class GlvTableView_base;

namespace glv {
	/*! Methods managing View widgets.*/
	namespace view {
		/*! Get text of \p _table_view at coordinates \p i \p j*/
		QString get_string(const GlvTableView_base* _table_view, unsigned int i, unsigned j = 0);
		/*! Set text of \p _table_view at coordinates \p i \p j*/
		void set_string(GlvTableView_base* _table_view, const QString& _string, unsigned int i, unsigned j = 0);
	}
}

class QWidget;
class QLayout;
class QScrollArea;

/*! Contains functions for the Glv framework.*/
namespace glv {
	/*! Usefull functions for widget handling.*/
	namespace widget {
		/*! \p _widget_scroll: widget containing elements to be scrolled. \p _widget_over : final widget.
		* Can provid margin for intermediate layout.*/
		QScrollArea* make_scrollable(QWidget* _widget_scroll, QWidget* _widget_over, int _left_m = 2, int _top_m = 2, int _right_m = 2, int _bottom_m = 2);
		QScrollArea* make_scrollable(QLayout* _layout_scroll, QWidget* _widget_over);

		/*! Clear the layout of \p _widget.*/
		void clear(QWidget* _widget);
		/*! Delete layout items from \p _start_index. If \p _l_recursive is true, layout of items are also being cleared.*/
		void clear(QLayout* _layout, unsigned int _start_index = 0, bool _l_recursive = false);
		/*! Remove \p _widget in \p _layout. Delete \p _widget if \p _l_delete is true.*/
		void remove_widget(QLayout* _layout, QWidget* _widget, bool _l_delete = true);
		/*! Remove widget indexed \p _index in \p _layout. Delete \p _widget if \p _l_delete is true.*/
		void remove_widget(QLayout* _layout, int _index, bool _l_delete = true);

		/*! Performs dynamic_cast of type Tcast on \p _arg. Pops up a critical message on \p _parent if casting fails */
		template <class Tcast, class Targ>
		Tcast dynamic_cast_message_box(Targ* _arg, QWidget* _parent = 0);
	}
};

template <class Tcast, class Targ>
Tcast glv::widget::dynamic_cast_message_box(Targ* _arg, QWidget* _parent) {

	Tcast result = dynamic_cast<Tcast>(_arg);
	if (!result) {
		QMessageBox::critical(_parent, QMessageBox::tr(""), QMessageBox::tr("dynamic_cast error from type ") + typeid(Targ*).name() + QMessageBox::tr(" to ") + typeid(Tcast).name());
	}
	return result;
}

//tricky to include using Clang. Used for debug mostly

std::ostream& operator<<(std::ostream& _os, const QModelIndex& _index);
std::istream& operator>>(std::istream& _is, QModelIndex& _index);

#endif

inline const std::string& slv::flag::str_delimiter0() {
    static std::string* str_delimiter0 = new std::string("################################################################################");
    return *str_delimiter0;
}

inline const std::string& slv::flag::str_delimiter1() {
    static std::string* str_delimiter1 = new std::string("---------------------------------------------------------------------");
    return *str_delimiter1;
}

inline const std::string& slv::flag::str_delimiter2() {
    static std::string* str_delimiter2 = new std::string("***********************************************************");
    return *str_delimiter2;
}

inline const std::string slv::flag::str_delimiter0(const std::string& _string) {
    std::string pattern = "###########";
    std::string delimiter = pattern;
    delimiter += _string;
    delimiter += pattern;
    return delimiter;
}

inline const std::string slv::flag::str_delimiter1(const std::string& _string) {
    std::string pattern = "----------";
    std::string delimiter = pattern;
    delimiter += _string;
    delimiter += pattern;
    return delimiter;
}

inline const std::string slv::flag::str_delimiter2(const std::string& _string) {
    std::string pattern = "***********";
    std::string delimiter = pattern;
    delimiter += _string;
    delimiter += pattern;
    return delimiter;
}

inline const std::string& slv::flag::warning_intro() {
    static std::string* str = new std::string();
    *str = "WARNING - ";
    return *str;
}

inline void slv::flag::WARNING(std::string warning_message) {
    std::cout << warning_intro() << warning_message << std::endl;
}

inline void slv::flag::BREAK() {
#if OPTION_STD_BREAK_THROW_EXCEPTION==0
#ifdef _MSC_VER
    __debugbreak();
#else
    raise(SIGTRAP);
#endif
#else
    throw std::runtime_error("");
#endif
}

inline void slv::flag::BREAK(std::string warning_message) {
    ISSUE(FlagType::Critical, warning_message);
}

inline void slv::flag::WIP() {
    slv::flag::ISSUE(FlagType::Critical, "Work in progress");
}

inline void slv::flag::WIP(std::string _work_in_progress_message) {
    slv::flag::ISSUE(FlagType::Critical, "Work in progress : " + _work_in_progress_message);
}

inline void slv::flag::ISSUE(FlagType _flag_type, std::string warning_message) {
    std::cout << warning_intro() << warning_message << std::endl;
    if (_flag_type == FlagType::Critical) {
        BREAK();
    } else {
        // Do not crash
    }
}

inline void slv::flag::ISSUE(FlagType _flag_type, const std::ostringstream& _stream) {

    if (_flag_type == FlagType::Critical) {
#if OPTION_STD_BREAK_THROW_EXCEPTION==0
        std::cout << _stream.str();
        BREAK();
#else
        throw std::runtime_error(_stream.str());
#endif
    } else if (_flag_type == FlagType::Warning) {
        std::cout << _stream.str();
    }

}

inline void slv::flag::loop_display(const unsigned int _i_loop, const unsigned int _Nloop, const std::string _message, const unsigned int _Nfraction) {

    unsigned int Ndelta;
    if (_Nloop < _Nfraction) {
        Ndelta = 1;
    } else {
        Ndelta = _Nloop / _Nfraction;
    }

    if (_i_loop == 0) {

        std::cout << "Loop starting, " << _message << " : " << _Nloop << " iterations" << std::endl;

    } else if ((_i_loop + 1) % Ndelta == 0) {

        unsigned int percent = 100 * (_i_loop + 1) / (_Nloop);

        std::cout << "Loop, " << _message << " : " << percent << " %" << std::endl;
    }
}

inline SlvFileName::SlvFileName() {

}

inline SlvFileName::SlvFileName(const SlvFileStem& _stem, const SlvFileExtension& _extension) {
    stem = _stem;
    extension = _extension;
}

inline SlvFileName::SlvFileName(const std::string& _string) {
    stem = SlvFileMgr::get_file_name_str(_string, false);
    extension = SlvFileMgr::get_extension(_string);
}

inline SlvFileName::~SlvFileName() {

}

inline std::string SlvFileName::get_total_name() const {
    if (extension.size() > 0) {
        return stem + extension;
    } else {
        return stem;
    }
}

inline bool SlvFileName::operator==(const SlvFileName& _file_name) const {

    return stem == _file_name.stem \
        && extension == _file_name.extension;

}

inline bool SlvFileName::readB(std::ifstream& _input_file) {

    bool l_read = slv::rw::readB(stem, _input_file);
    if (l_read) l_read = slv::rw::readB(extension, _input_file);
    return l_read;

}

inline void SlvFileName::writeB(std::ofstream& _output_file) const {

    slv::rw::writeB(stem, _output_file);
    slv::rw::writeB(extension, _output_file);

}

inline SlvIS::SlvIS() {

}

inline SlvIS::~SlvIS() {

}

inline std::istream& operator>>(std::istream& _is, SlvIS& _IS) {

	_IS.istream(_is);
	return _is;

}

inline SlvOS::SlvOS() {

}

inline SlvOS::~SlvOS() {

}

inline std::ostream& operator<<(std::ostream& _os, const SlvOS& _OS) {

	_OS.ostream(_os);
	return _os;

}

inline SlvDirectory::SlvDirectory() {
    l_relative = false;
}

inline SlvDirectory::SlvDirectory(const std::string _string) {
    path = SlvFileMgr::get_directory_str(_string);
    l_relative = SlvFileMgr::is_path_relative(path);
}

inline SlvDirectory::SlvDirectory(const char* _string) :SlvDirectory(std::string(_string)) {

}

inline SlvDirectory::SlvDirectory(const SlvDirectory& _directory) {
    path = _directory.path;
    l_relative = _directory.l_relative;
}

inline SlvDirectory::~SlvDirectory() {

}

inline const std::string& SlvDirectory::get_path() const {
    return path;
}

inline bool SlvDirectory::is_relative() const {
    return l_relative;
}

inline bool SlvDirectory::exists() const {

#if __cplusplus > 201402L
    return std::filesystem::is_directory(path);
#else
    struct stat info;
    if (stat(path.c_str(), &info) != 0) {
        return false;
    } else if (info.st_mode & S_IFDIR) {
        return true;
    } else {
        return false;
    }
#endif

}

inline bool SlvDirectory::operator==(const SlvDirectory& _directory) const {

    return path == _directory.path \
        && l_relative == _directory.l_relative;

}

inline bool SlvDirectory::operator!=(const SlvDirectory& _directory) const {

    return !(*this == _directory);

}

inline void SlvDirectory::istream(std::istream& _is) {

    std::string tmp_path;
    slv::string::istream(_is, tmp_path);
    *this = SlvDirectory(tmp_path);

}

inline void SlvDirectory::ostream(std::ostream& _os) const {

    _os << path;

}

inline bool SlvDirectory::readB(std::ifstream& _input_file) {

    bool l_read = slv::rw::readB(path, _input_file);
    if (l_read) l_read = slv::rw::readB(l_relative, _input_file);
    return l_read;

}

inline void SlvDirectory::writeB(std::ofstream& _output_file) const {

    slv::rw::writeB(path, _output_file);
    slv::rw::writeB(l_relative, _output_file);

}

inline SlvFileExtensions::SlvFileExtensions() {

}

inline SlvFileExtensions::SlvFileExtensions(const std::vector<SlvFileExtension>& _extensions) {

    for (std::vector<SlvFileExtension>::const_iterator it = _extensions.begin(); it != _extensions.end(); ++it) {
        add(*it);
    }

}

inline SlvFileExtensions::~SlvFileExtensions() {

}

inline const SlvFileExtension& SlvFileExtensions::operator[](int i) const {

    return extensions[i];

}

inline const std::vector<SlvFileExtension>& SlvFileExtensions::get() const {
    return extensions;
}

inline void SlvFileExtensions::add(const SlvFileExtension& _extension) {
    if (!slv::vector::find(_extension, extensions)) {
        extensions.push_back(_extension);
    }
}

inline void SlvFileExtensions::add_front(const SlvFileExtension& _extension) {
    std::vector<SlvFileExtension>::iterator it = std::find(extensions.begin(), extensions.end(), _extension);
    if (it != extensions.end()) {
        extensions.erase(it);
    }
    extensions.insert(extensions.begin(), _extension);
}

inline void SlvFileExtensions::remove(const SlvFileExtension& _extension) {

    slv::vector::remove(_extension, extensions);

}

inline bool SlvFileExtensions::exists(const SlvFileExtension& _extension) const {

    return slv::vector::find(_extension, extensions);

}

inline void SlvFileExtensions::add(const SlvFileExtensions& _extensions) {

    for (std::vector<SlvFileExtension>::const_iterator it = _extensions.extensions.begin(); it != _extensions.extensions.end(); ++it) {
        add(*it);
    }

}

inline bool SlvFileExtensions::empty() const {

    return extensions.empty();

}

inline bool SlvFileExtensions::operator==(const SlvFileExtensions& _file_extensions) const {

    return extensions == _file_extensions.extensions;
}

inline const std::string& slv::string::str_void() {
    static std::string* str_void = new std::string("");
    return *str_void;
}

inline std::string slv::string::number_to_string(int _n, int _Ndigits) {

    //auto Ndigits
    if (_Ndigits == 0) {
        if (_n != 0) {
            _Ndigits = int(std::log10(_n)) + 1;
        } else {
            _Ndigits = 1;
        }
    }

    int zero = 0;

    std::ostringstream out_n;

    int digit = 0;
    bool l_match = false;
    while (digit < _Ndigits && !l_match) {
        if (_n < std::pow(10., digit + 1)) {
            for (int digit2 = digit; digit2 < _Ndigits - 1; digit2++) {
                out_n << zero;
            }
            l_match = true;
        }
        digit++;
    }

    if (_n >= std::pow(10, _Ndigits)) {
        slv::flag::ISSUE(slv::flag::Warning, "in std::string number_to_string(int n, int Ndigits), int n = ", _n, " can't be expressed on ", _Ndigits, " digits");
    }

    out_n << _n;

    return out_n.str();
}

inline std::string slv::string::number_to_string_auto(int n) {

    if (n != 0) {
        return number_to_string(n, int(std::log10(n)) + 1);
    } else {
        return "0";
    }

}

inline std::string slv::string::value_to_string(const double& _value) {

    std::ostringstream strs;
    strs << _value;

    return strs.str();
}

inline void slv::string::remove_substring(const std::string& _substring, std::string& _string) {

    std::size_t found_pos = _string.find(_substring);

    if (found_pos != std::string::npos) {
        _string.erase(found_pos, _substring.size());
    }

}

inline void slv::string::istream(std::istream& _is, std::string& _string) {

    std::getline(_is, _string);

}

inline std::string slv::string::format_va_list(const char* _format, std::va_list _args) {

    std::string string;

    va_list args;
    va_copy(args, _args);

    size_t length = vsnprintf(0, 0, _format, args);
    string.resize(length + 1);

    vsnprintf(&string[0], length + 1, _format, _args);
    string.resize(length);

    return string;

}

inline SlvFile::SlvFile() {

}

inline SlvFile::SlvFile(const std::string& _path, IO _io_mode, std::string _description)
    :SlvFile(SlvDirectory(_path), SlvFileName(_path), _io_mode, _description) {

}

inline SlvFile::SlvFile(const char* _string, IO _io_mode, std::string _description) :SlvFile((_string) ? (std::string(_string)) : std::string(""), _io_mode, _description) {

}

inline SlvFile::SlvFile(const std::string& _path, const SlvFileExtensions& _allowed_extensions, IO _io_mode, std::string _description)
    :SlvFile(_path, _io_mode, _description) {

    add_allowed_extensions(_allowed_extensions);

}

inline SlvFile::SlvFile(const char* _string, const SlvFileExtensions& _allowed_extensions, IO _io_mode, std::string _description) :SlvFile((_string) ? (std::string(_string)) : std::string(""), _allowed_extensions, _io_mode, _description) {

}

inline SlvFile::SlvFile(IO _io_mode, std::string _description) :SlvFile("", _io_mode, _description) {

}

inline SlvFile::SlvFile(const SlvDirectory& _directory, const SlvFileName& _file_name, IO _io_mode, std::string _description) {

    directory = _directory;
    file_name = _file_name;

    if (file_name.extension != slv::string::str_void()) {
        add_allowed_extension(file_name.extension);
    }

    description = _description;

    io_mode = _io_mode;
}

inline SlvFile::SlvFile(const SlvDirectory& _directory, SlvFileExtensions _allowed_extensions, IO _io_mode) {

    directory = _directory;
    allowed_extensions = _allowed_extensions;
    io_mode = _io_mode;

}

inline SlvFile::SlvFile(SlvFileExtensions _allowed_extensions, IO _io_mode, std::string _description) {

    description = _description;
    allowed_extensions = _allowed_extensions;
    io_mode = _io_mode;

}

inline SlvFile::~SlvFile() {

}

inline const std::string SlvFile::get_name() const {

    return file_name.get_total_name();
}

inline const std::string SlvFile::get_path() const {
    std::string path = directory.get_path() + get_name();
    return path;
}

inline const SlvFileName& SlvFile::get_file_name() const {
    return file_name;
}

inline const SlvDirectory& SlvFile::get_directory() const {
    return directory;
}

inline const std::string& SlvFile::get_description() const {
    return description;
}

inline const SlvFileExtensions& SlvFile::get_allowed_extensions() const {
    return allowed_extensions;
}

inline SlvFile::IO SlvFile::get_io_mode() const {
    return io_mode;
}

inline bool SlvFile::set_name(const std::string& _path) {

    if (slv::vector::find(SlvFileMgr::get_extension(_path), allowed_extensions.get())) {
        file_name = SlvFileName(_path);
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::FlagType::Warning, "can't set name: ", _path, " allowed extensions are: ", allowed_extensions.get());
        return false;
    }

}

inline void SlvFile::set_directory(const std::string& _path) {

    directory = SlvDirectory(_path);

}

inline void SlvFile::add_allowed_extension(const std::string& _ext) {

    allowed_extensions.add(_ext);

}

inline void SlvFile::add_allowed_extensions(const SlvFileExtensions& _extensions) {

    allowed_extensions.add(_extensions);

}

inline bool SlvFile::exists() const {

#if __cplusplus > 201402L
    return std::filesystem::is_regular_file(get_path());
#else
    if (file_name.get_total_name().empty()) {
        return false;
    } else if (file_name.get_total_name().find_first_not_of('.') == std::string::npos) {// stat recognize "." path as existing file
        return false;
    } else {
#ifdef COMPILER_MSVC
#define glvm_pv_stat _stat64
#else
#define glvm_pv_stat stat64
#endif
        struct glvm_pv_stat info;
        return (glvm_pv_stat(get_path().c_str(), &info) == 0);
    }
#endif

}

inline bool SlvFile::operator==(const SlvFile& _file) const {

    return file_name == _file.file_name \
        && directory == _file.directory \
        && description == _file.description \
        && allowed_extensions == _file.allowed_extensions;

}

inline bool SlvFile::operator!=(const SlvFile& _file) const {

    return !(*this == _file);

}

inline bool SlvFile::readB(std::ifstream& _input_file) {

    bool l_read = slv::rw::readB(file_name, _input_file);
    if (l_read) l_read = slv::rw::readB(directory, _input_file);
    return l_read;

}

inline void SlvFile::writeB(std::ofstream& _output_file) const {

    slv::rw::writeB(file_name, _output_file);
    slv::rw::writeB(directory, _output_file);
}

inline void SlvFile::istream(std::istream& _is) {

    std::string path;
    slv::string::istream(_is, path);
    directory = SlvDirectory(path);
    file_name = SlvFileName(path);

    if (io_mode == IO::Read && !exists()) {
        std::cout << "Caution : The file " << get_path()  << " does not exist " << std::endl;
    }

}

inline void SlvFile::ostream(std::ostream& _os) const {

    _os << get_path();

}

template <>
inline std::string slv::string::to_id_str(const SlvFile& _value) {

    return to_string(_value.get_name());
}

//const std::string end_of_file_str = "end of file";
//const std::string slv::rw::end_of_file_str = "end of file";

template <>
inline bool slv::rw::readB<int>(int& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(int));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<unsigned int>(unsigned int& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(unsigned int));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<long unsigned int>(long unsigned int& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(long unsigned int));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<unsigned long long>(unsigned long long& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(unsigned long long));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<float>(float& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(float));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<double>(double& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(double));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<bool>(bool& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(bool));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<char>(char& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(char));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<unsigned char>(unsigned char& _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&_dat, sizeof(unsigned char));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline void slv::rw::writeB<int>(const int& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(int));
}

template <>
inline void slv::rw::writeB<unsigned int>(const unsigned int& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(unsigned int));
}

template <>
inline void slv::rw::writeB<long unsigned int>(const long unsigned int& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(long unsigned int));
}

template <>
inline void slv::rw::writeB<unsigned long long>(const unsigned long long& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(unsigned long long));
}

template <>
inline void slv::rw::writeB<float>(const float& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(float));
}

template <>
inline void slv::rw::writeB<double>(const double& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(double));
}

template <>
inline void slv::rw::writeB<bool>(const bool& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(bool));
}

template <>
inline void slv::rw::writeB<char>(const char& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(char));
}

template <>
inline void slv::rw::writeB<unsigned char>(const unsigned char& _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&_dat, sizeof(unsigned char));
}

template <>
inline void slv::rw::writeB<int>(int* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(int));
}

template <>
inline void slv::rw::writeB<unsigned int>(unsigned int* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(unsigned int));
}

template <>
inline void slv::rw::writeB<long unsigned int>(long unsigned int* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(long unsigned int));
}

template <>
inline void slv::rw::writeB<unsigned long long>(unsigned long long* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(unsigned long long));
}

template <>
inline void slv::rw::writeB<float>(float* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(float));
}

template <>
inline void slv::rw::writeB<double>(double* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(double));
}

template <>
inline void slv::rw::writeB<bool>(bool* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(bool));
}

template <>
inline void slv::rw::writeB<char>(char* const _dat, std::ofstream& _output_file) {
    _output_file.write((char*)&(*_dat), sizeof(char));
}

template <>
inline bool slv::rw::readB<std::string>(std::string& _dat, std::ifstream& _input_file) {
    unsigned int N;
    bool l_read = slv::rw::readB(N, _input_file);
    if (!l_read) N = 0;
    _dat.resize(N);
    for (unsigned int i = 0; i < N && l_read; i++) {
        l_read = slv::rw::readB(_dat[i], _input_file);
    }
    return l_read;
}

template <>
inline void slv::rw::writeB<std::string>(const std::string& _dat, std::ofstream& _output_file) {
    unsigned int size = (unsigned int)_dat.size();
    slv::rw::writeB(size, _output_file);
    for (unsigned int i = 0; i < _dat.size(); i++) {
        slv::rw::writeB(_dat[i], _output_file);
    }
}

inline bool slv::rw::readB(std::vector<bool>& _vector, std::ifstream& _input_file) {

    _vector.clear();

    unsigned int vector_size;
    bool l_read = slv::rw::readB(vector_size, _input_file);

    std::vector<unsigned char> char_vector;
    if (l_read) l_read = slv::rw::readB(char_vector, _input_file);

    unsigned int N = 8;
    bool l_temp;
    unsigned int c, j, i;

    i = 0;
    for (c = 0; c < char_vector.size(); c++) {
        for (j = 0; j < N; j++) {
            if (i < vector_size) {
                l_temp = char_vector[c] & (1 << j);
                _vector.push_back(l_temp);
            }
            i++;
        }
    }

    return l_read;
}

inline void slv::rw::writeB(const std::vector<bool>& _vector, std::ofstream& _output_file) {

    unsigned int vector_size = (unsigned int)_vector.size();
    slv::rw::writeB(vector_size, _output_file);

    std::vector<unsigned char> char_vector;

    unsigned int N = 8;
    unsigned int c = 0;

    unsigned int i, j, ipj;

    for (i = 0; i < vector_size;) {

        char_vector.push_back(0);

        for (j = 0; j < N; j++) {

            ipj = i;
            ipj += j;

            if (ipj < vector_size) {
                char_vector[c] = char_vector[c] | (_vector[ipj] << j);
            }

        }
        c++;
        i += N;

    }

    slv::rw::writeB(char_vector, _output_file);

}

inline SlvLblIdentifier::SlvLblIdentifier(slv::lbl::Identifier _Id) :SlvLabeling<slv::lbl::Identifier>(_Id) {

}

inline SlvLblIdentifier::~SlvLblIdentifier() {

}

inline const slv::lbl::Identifier& SlvLblIdentifier::get_Id() const {
	return get_label();
}

inline SlvLblName::SlvLblName(std::string _name) :SlvLabeling<std::string>(_name) {

}

inline SlvLblName::~SlvLblName() {

}

inline const std::string& SlvLblName::get_name() const {

	return get_label();

}

inline void SlvLblName::ostream(std::ostream& _os) const {

	_os << get_name();

}

inline SlvStatus::SlvStatus(statusType _type, std::string _message) {

    status_signals = new std::vector<SlvStatusSignal>;

    push(_type, _message);

}

inline SlvStatus::SlvStatus(statusType _type, const char* _format, ...) {

    std::va_list args;
    va_start(args, _format);
    std::string string{ slv::string::format_va_list(_format, args) };
    va_end(args);

    status_signals = new std::vector<SlvStatusSignal>;
    push(_type, string);

}

inline SlvStatus::SlvStatus(const SlvStatus& _status) {

    status_signals = new std::vector<SlvStatusSignal>(*_status.status_signals);

    for (const_iterator_sub it = _status.begin_sub(); it != _status.end_sub(); ++it) {
        add_sub_status(**it);
    }

}

inline SlvStatus::~SlvStatus() {

    delete status_signals;
    clear_sub_status();

}

inline void SlvStatus::clear_sub_status() {

    for (const_iterator_sub it = begin_sub(); it != end_sub(); ++it) {
        delete* it;
    }
    sub_status.clear();

}

inline bool SlvStatus::sortStatusSignal(SlvStatusSignal _signal1, SlvStatusSignal _signal2) {
    return _signal1.value > _signal2.value;
}

inline void SlvStatus::push(const statusType& _type, const std::string& _message) {

    SlvStatusSignal signal(_message, _type);
    if (!slv::vector::find(signal, *status_signals)) {
        if (status_signals->empty() || _type != statusType::ok) {//do not add multiple 'ok' status
            status_signals->push_back(signal);
        }
        std::sort(status_signals->begin(), status_signals->end(), SlvStatus::sortStatusSignal);
        // Remove 'ok' if more critical signals exist
        if (status_signals->size() > 1 && status_signals->back().value == statusType::ok) {
            status_signals->pop_back();
        }
    }

}

inline SlvStatus::const_iterator SlvStatus::begin() const {

    return status_signals->begin();

}

inline SlvStatus::const_iterator SlvStatus::end() const {

    return status_signals->end();

}

inline SlvStatus::const_iterator_sub SlvStatus::begin_sub() const {

    return sub_status.begin();

}

inline SlvStatus::const_iterator_sub SlvStatus::end_sub() const {

    return sub_status.end();

}

inline size_t SlvStatus::size() const {

    return status_signals->size();

}

inline const SlvStatus::statusType& SlvStatus::get_type() const {

    return get_status_signal().value;
}

inline const std::string& SlvStatus::get_message() const {

    return get_status_signal().data;

}

inline const SlvStatus::SlvStatusSignal& SlvStatus::get_status_signal() const {

    if (!has_sub_status()) {
        return (*status_signals)[0];
    } else {
        if ((*status_signals)[0].value > sub_status[0]->get_status_signal().value) {
            return (*status_signals)[0];
        } else {
            return sub_status[0]->get_status_signal();
        }
    }

}

inline const SlvStatus::statusType& SlvStatus::get_type(const unsigned int i) const {
    return (*status_signals)[i].value;
}

inline const std::string& SlvStatus::get_message(const unsigned int i) const {
    return (*status_signals)[i].data;
}

inline SlvStatus::operator bool() const {

    return (get_type() == statusType::ok);
}

inline SlvStatus& SlvStatus::operator=(const SlvStatus& _status) {

    *status_signals = *_status.status_signals;
    clear_sub_status();

    for (const_iterator_sub it = _status.begin_sub(); it != _status.end_sub(); ++it) {
        add_sub_status(**it);
    }

    return *this;
}

inline SlvStatus& SlvStatus::operator+=(const SlvStatus& _status) {

    for (unsigned int i = 0; i < _status.size(); i++) {
        push(_status.get_type(i), _status.get_message(i));
    }

    for (const_iterator_sub it = _status.begin_sub(); it != _status.end_sub(); ++it) {
        add_sub_status(**it);
    }

    return *this;
}

inline size_t SlvStatus::size_sub() const {

    return sub_status.size();

}

inline bool SlvStatus::has_sub_status() const {

    return !sub_status.empty();

}

inline const SlvStatus& SlvStatus::get_sub_status(const unsigned int i) const {

    return *sub_status[i];

}

inline bool SlvStatus::sortStatus(const SlvStatus* _status1, const SlvStatus* _status2) {

    return _status1->get_type() > _status2->get_type();

}

inline void SlvStatus::add_sub_status(const SlvStatus& _status) {

    if (!_status) {
        sub_status.push_back(new SlvStatus(_status));
    }

    std::sort(sub_status.begin(), sub_status.end(), SlvStatus::sortStatus);

}

inline void SlvStatus::ostream(std::ostream& _os) const {

    _os << to_string(true);

}

inline std::string SlvStatus::to_string(bool _l_show_all) const {

    return to_string(_l_show_all, 0);

}

inline std::string SlvStatus::to_string(bool _l_show_all, int _depth) const {

    std::string message;
    if (!_l_show_all) {
        message = get_message();
    } else {

        std::string indent;
        if (_depth > 0) {
            if (_depth % 2 == 1) indent = "- ";
            else if (_depth % 2 == 0) indent = "* ";
        }

        for (SlvStatus::const_iterator it = begin(); it != end(); ++it) {
            if (it->value != SlvStatus::statusType::ok) {
                message += std::string(_depth * 4, ' ') + indent + slv::string::to_string(it->value) + " : " + it->data.c_str();
                if (std::next(it) != end()) {
                    message += "\n";
                }
            }
        }

        if (has_sub_status()) {
            message += "\n";
        }

        for (SlvStatus::const_iterator_sub it = begin_sub(); it != end_sub(); ++it) {
            message += (*it)->to_string(_l_show_all, _depth + 1);
            if (std::next(it) != end_sub()) {
                message += "\n";
            }
        }

    }

    return message;

}

inline std::string SlvFileMgr::get_extension(const std::string& _name) {

    size_t position = _name.find_last_of('.');

    if (position != std::string::npos) {
        std::string extension = _name.substr(position, _name.size() - position);
        if (extension != "./") {
            return extension;
        } else {
            return slv::string::str_void();
        }
    } else {
        return slv::string::str_void();
    }

}

inline std::string SlvFileMgr::remove_extension(const std::string& _name) {

    size_t position = _name.find_last_of('.');

    if (position != std::string::npos) {
        //few cases to avoid dots for directory, ex: ../test/test
        if (position > 0 && _name[position - 1] == '.') {
            return _name;
        } else if (position < _name.size() - 1 && _name[position + 1] == '/') {
            return _name;
        } else {
            return _name.substr(0, position);
        }
    } else {
        return _name;
    }

}

inline std::string SlvFileMgr::get_file_name_str(const std::string& _path, bool _l_extension) {

    std::string file_name;

    size_t position = _path.find_last_of('/');

    if (position != std::string::npos) {
        position++;
        file_name = _path.substr(position, _path.size() - position);
    } else {
        file_name = _path;
    }

    if (file_name == "..") {
        file_name.clear();
    }

    if (!_l_extension) {
        file_name = remove_extension(file_name);
    }

    return file_name;
}

inline std::string SlvFileMgr::get_directory_str(const std::string& _path) {

    std::string directory_path;

    std::string file_name = get_file_name_str(_path, true);
    directory_path = _path.substr(0, _path.size() - file_name.size());
    if (!directory_path.empty() && directory_path.back() != '/') {
        directory_path.push_back('/');
    }

    return directory_path;

}

inline std::string SlvFileMgr::get_path(const SlvDirectory& _directory) {

    if (_directory.is_relative()) {
        return SlvFileMgr::master_relative_path() + _directory.get_path();
    } else {
        return _directory.get_path();
    }

}

inline std::string SlvFileMgr::get_path(const SlvFile& _file) {

    return get_path(_file.get_directory()) + _file.get_name();

}

inline bool SlvFileMgr::is_path_relative(const std::string& _path) {

    bool l_relative;
#ifdef OS_WIN
    if (_path.size() >= 2) {
        l_relative = (_path[1] != ':');
    } else {
        l_relative = true;
    }
#else
    if (_path.size() >= 1) {
        l_relative = (_path[0] != '/');
    } else {
        l_relative = true;
    }
#endif
    return l_relative;
}

inline SlvStatus SlvFileMgr::open_file(std::ofstream& _file_stream, const SlvFile& _file) {

    return open_file(_file_stream, _file, std::ios::out, std::ios::trunc);

}

inline SlvStatus SlvFileMgr::open_file(std::ifstream& _file_stream, const SlvFile& _file) {

    return open_file(_file_stream, _file, std::ios::in);

}

inline std::string SlvFileMgr::replace_forbidden_file_characters(const std::string& _string, char _replacement, bool _l_consecutive, bool _l_extension) {

    std::string result = _string;
    for (std::string::iterator it = result.begin(); it != result.end();) {
        if (forbidden_file_characters().find(*it) != std::string::npos || (_l_extension && *it == ' ')) {
            if (std::next(it) != result.end() && (forbidden_file_characters().find(*std::next(it)) != std::string::npos || (_l_extension && *std::next(it) == ' '))) {
                it = result.erase(it);
            } else {
                *it = _replacement;
                ++it;
            }
        } else {
            ++it;
        }
    }
    return result;

}

inline bool SlvFileMgr::test_file(const SlvFile& _file, std::ios::openmode _io_mode) {

    bool l_opened;
    if (_io_mode == std::ios::in) {

        std::ifstream input_file;
        input_file.open(SlvFileMgr::get_path(_file).c_str(), _io_mode);
        l_opened = input_file.is_open();
        if (l_opened) input_file.close();
        return l_opened;

    } else if (_io_mode == std::ios::out) {

        // An empty directory is considered implicitly as ./
        return (_file.get_directory().get_path().empty() || _file.get_directory().exists()) && !_file.get_file_name().get_total_name().empty();

    } else {
        slv::flag::ISSUE(slv::flag::InvalidArgument, "_io_mode must be either std::ios::in or std::ios::out");
        return false;
    }

}

inline bool SlvFileMgr::mkdir(const std::string& _subpath, bool _l_force_parents) {

    std::string command = "mkdir ";
#ifndef OS_WIN
    if (_l_force_parents) command += "-p ";
#endif
    if (SlvFileMgr::is_path_relative(_subpath)) {
        command += SlvFileMgr::master_relative_path();
    }
    command += _subpath;
#ifdef OS_WIN
    std::replace(command.begin(), command.end(), '/', '\\');
#endif
    int code = system(command.c_str());

    if (code == 0) {
        return true;
    } else if (code == -1) {
        return false;
    } else {
        return false;
    }

}

#ifndef GLOVE_DISABLE_QT

inline GlvWidgetSaveLoad_base::GlvWidgetSaveLoad_base(const SlvFileExtensions& _allowed_extensions, Qt::Orientation _orientation, std::string _data_name) {

	allowed_extensions = _allowed_extensions;

	if (_orientation == Qt::Orientation::Horizontal) {
		main_layout = new QHBoxLayout;
	} else if (_orientation == Qt::Orientation::Vertical) {
		main_layout = new QVBoxLayout;
	}
	main_layout->setContentsMargins(0, 0, 0, 0);
	QPushButton* save_button = new QPushButton(QString(tr("Save")));
	save_button->setToolTip(tr("Save ") + glv::toQString(_data_name) + tr(" in a file."));
	main_layout->addWidget(save_button);
	QPushButton* load_button = new QPushButton(QString(tr("Load")));
	load_button->setToolTip(tr("Load ") + glv::toQString(_data_name) + tr(" from a file."));
	main_layout->addWidget(load_button);
	this->setLayout(main_layout);

	connect(save_button, SIGNAL(clicked()), this, SLOT(save_slot()));
	connect(load_button, SIGNAL(clicked()), this, SLOT(load_slot()));

	open_file = NULL;
}

inline GlvWidgetSaveLoad_base::~GlvWidgetSaveLoad_base() {

}

inline void GlvWidgetSaveLoad_base::set_orientation(Qt::Orientation _orientation) {

	QBoxLayout* new_layout = NULL;
	if (_orientation == Qt::Orientation::Vertical && dynamic_cast<QHBoxLayout*>(main_layout)) {
		new_layout = new QVBoxLayout;
		while (main_layout->count() > 0) {
			new_layout->addWidget(main_layout->itemAt(0)->widget());
		}
	} else if (_orientation == Qt::Orientation::Horizontal && dynamic_cast<QVBoxLayout*>(main_layout)) {
		new_layout = new QHBoxLayout;
		while (main_layout->count() > 0) {
			new_layout->addWidget(main_layout->itemAt(0)->widget());
		}
	}
	new_layout->setContentsMargins(0, 0, 0, 0);

	if (new_layout) {
		delete main_layout;
		main_layout = new_layout;
		setLayout(main_layout);
	}

}

inline SlvFileExtensions GlvWidgetSaveLoad_base::get_allowed_extensions() const {

	return allowed_extensions;

}

inline void GlvWidgetSaveLoad_base::set_allowed_extensions(const SlvFileExtensions& _allowed_extensions) {

	allowed_extensions = _allowed_extensions;

}

inline void GlvWidgetSaveLoad_base::paintEvent(QPaintEvent* _event) {

	QPainter painter(this);
	QWidget::paintEvent(_event);

}

inline void GlvWidgetSaveLoad_base::open_file_save() {

	if (!open_file) {
		open_file = new GlvOpenFile("", allowed_extensions);
	}
	open_file->getSaveFileName();

}

inline bool GlvWidgetSaveLoad_base::open_file_load() {

	if (!open_file) {
		open_file = new GlvOpenFile("", allowed_extensions);
	}
	return open_file->getOpenFileName();

}

inline bool GlvWidgetSaveLoad_base::is_ready(QIODevice::OpenMode _mode) {

	if (open_file) {
		return open_file->is_ready(_mode);
	} else {
		/*! open_file should be null is is_ready is called.*/
		return false;
	}

}

inline std::string GlvWidgetSaveLoad_base::get_file_name() const {

	if (open_file) {
		return open_file->get_file().get_path();
	} else {
		return "";
	}
}

inline void GlvWidgetSaveLoad_base::delete_open_file() {

	if (open_file) {
		delete open_file;
		open_file = NULL;
	}

}

inline void GlvWidgetSaveLoad_base::save_slot() {

	GlvWidgetSaveLoad_base::open_file_save();
	if (GlvWidgetSaveLoad_base::is_ready(QIODevice::WriteOnly)) {
		save(get_file_name());
	}
	GlvWidgetSaveLoad_base::delete_open_file();

}

inline void GlvWidgetSaveLoad_base::load_slot() {

	if (GlvWidgetSaveLoad_base::open_file_load()) {
		if (GlvWidgetSaveLoad_base::is_ready(QIODevice::ReadOnly)) {
			SlvStatus status = load(get_file_name());
			glv::flag::showQMessageBox(status, true, this);
		}
	}
	GlvWidgetSaveLoad_base::delete_open_file();

}

inline bool GlvWidgetSaveLoad_base::interactive_load_parameters(const std::string& _file_name, const SlvStatus& _status) {

	if (!_status) {

		QString message = tr("When loading file:") + "\n";
		message += glv::toQString(_file_name) + "\n";
		message += glv::toQString(_status.to_string(true));

		QMessageBox::StandardButtons buttons(QMessageBox::Ok);
		if (_status.get_type() != SlvStatus::statusType::critical) {
			message += "\n\n" + tr("Do you want to load the parameters anyway ?");
			buttons |= QMessageBox::Cancel;
		} else {
			message += "\n\n" + glv::toQString(SlvStatus::statusType::critical) + " : " + tr("Can not read file. Default parametrization will be set.");
		}

		QMessageBox::StandardButton result = QMessageBox::question(this, "Load parametrization from file", message, buttons);
		if (result == QMessageBox::Cancel) {
			return false;
		} else {
			return true;
		}

	} else {
		return true;
	}

}

inline GlvDescribedWidget_base::GlvDescribedWidget_base(const std::string& _data_name) :data_name(_data_name) {

	layout = new QGridLayout;
	layout->setContentsMargins(0, 0, 0, 0);

	if (!data_name.empty()) {
		data_name_label = new QLabel(glv::toQString(data_name));
		layout->addWidget(data_name_label, 0, 0);
	} else {
		data_name_label = NULL;
	}

	optional_text_label = NULL;

	this->setLayout(layout);

}

inline GlvDescribedWidget_base::~GlvDescribedWidget_base() {

}

inline void GlvDescribedWidget_base::set_data_widget(QWidget* _data_widget, const QString& _optional_text_str) {

	layout->addWidget(_data_widget, 1, 0);
	if (!_optional_text_str.isEmpty()) {
		if (!optional_text_label) {
			optional_text_label = new QLabel;
			layout->addWidget(optional_text_label, 1, 1);
		}
		optional_text_label->setText(_optional_text_str);
	} else {
		delete optional_text_label;
		optional_text_label = NULL;
	}

}

inline void GlvDescribedWidget_base::reclaim_widgets_ownership(QWidget* _data_widget) {

	if (!data_name.empty()) {
		layout->addWidget(data_name_label, 0, 0);
	}
	layout->addWidget(_data_widget, 1, 0);
	if (optional_text_label) {
		layout->addWidget(optional_text_label, 1, 1);
	}

}

inline GlvSaveLoad::GlvSaveLoad() {

    save_load_widget = NULL;

}

inline GlvSaveLoad::~GlvSaveLoad() {

}

inline bool GlvSaveLoad::delete_save_load_widget() {

    if (save_load_widget) {
        delete save_load_widget;
        save_load_widget = NULL;
        return true;
    } else {
        return false;
    }

}

inline GlvWidget_base::GlvWidget_base(QWidget* _parent) :QWidget(_parent) {

    data_widget = 0;
    connector = new GlvWidgetConnector(this);

    layout = new QHBoxLayout;
    layout->setContentsMargins(0, 0, 0, 0);
    this->setLayout(layout);

}

inline GlvWidget_base::~GlvWidget_base() {

    delete connector;
}

inline void GlvWidget_base::set_widget() {

    layout->addWidget(data_widget);

}

inline void GlvWidget_base::set_save_load_widget(GlvWidgetSaveLoad_base* _save_load_widget) {

    save_load_widget = _save_load_widget;
    if (save_load_widget) {
        layout->insertWidget(1, save_load_widget);// index 1 because of optional widgets
    }

}

inline void GlvWidget_base::add_optional_widget(QWidget* _widget) {

    optional_widgets.push_back(_widget);
    layout->addWidget(_widget);

}

inline std::vector<QWidget*>::iterator GlvWidget_base::delete_optional_widget(QWidget* _widget) {

    std::vector<QWidget*>::iterator it;

    if (_widget != data_widget) {// Forbid removal of main widget

        it = std::find(optional_widgets.begin(), optional_widgets.end(), _widget);

        if (it != optional_widgets.end()) {
            it = optional_widgets.erase(it);
            delete _widget;
            layout->removeWidget(_widget);
        }

    } else {
        it = optional_widgets.end();
    }

    return it;
}

inline void GlvWidget_base::delete_optional_widgets() {

    for (std::vector<QWidget*>::iterator it = optional_widgets.begin(); it != optional_widgets.end(); ) {
        it = delete_optional_widget(*it);
    }

}

inline void GlvWidget_base::resizeEvent(QResizeEvent* _resize_event) {

    emit sizeChanged();
    QWidget::resizeEvent(_resize_event);

}

inline GlvWidget_base::GlvWidgetConnector::GlvWidgetConnector(GlvWidget_base* _glvwidget) {
    glvwidget = _glvwidget;
    connect(this, SIGNAL(sizeChanged()), glvwidget, SIGNAL(sizeChanged()));
}

inline GlvWidget_base::GlvWidgetConnector::GlvWidgetConnector() {

}

inline GlvWidget_base::GlvWidgetConnector::~GlvWidgetConnector() {

}

inline void GlvWidget_base::GlvWidgetConnector::valueChanged_slot() {
    emit(glvwidget->valueChanged());/*emits neutral signal*/ /*Responsible of emit parameterChanged(std::string)*/
}

inline void GlvWidget_base::GlvWidgetConnector::valueChanged_slot(double _value) {
    emit(valueChanged(_value));/*emits same signal as original*/
    valueChanged_slot();
}

inline void GlvWidget_base::GlvWidgetConnector::valueChanged_slot(int _value) {
    emit(valueChanged(_value));/*emits same signal as original*/
    valueChanged_slot();
}

inline void GlvWidget_base::GlvWidgetConnector::valueChanged_slot(std::string _value) {
    emit(valueChanged(_value));/*emits same signal as original*/
    valueChanged_slot();
}

inline void GlvWidget_base::GlvWidgetConnector::valueChanged_slot(const QString& _value) {
    emit(valueChanged(_value));/*emits same signal as original*/
    valueChanged_slot();
}

inline void GlvWidget_base::GlvWidgetConnector::valueChanged_slot(const std::vector<int>& _coordinates) {
    emit(valueChanged(_coordinates));/*emits same signal as original*/
    valueChanged_slot();
}

#define Tdata int
inline GlvWidgetData<Tdata>::GlvWidgetData(QWidget* _parent) :QSpinBox(_parent) {
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Maximum);
    setMaximum(std::numeric_limits<int>::max());
    setMinimum(std::numeric_limits<int>::lowest());
}
inline GlvWidgetData<Tdata>::GlvWidgetData(const Tdata& _value, QWidget* _parent) : GlvWidgetData(_parent) {
    set_value(_value);
}
inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}
inline void GlvWidgetData<Tdata>::set_editable(bool l_editable) {
    QSpinBox::setReadOnly(!l_editable);
}
inline Tdata GlvWidgetData<Tdata>::get_value() const {
    return QSpinBox::value();
}
inline void GlvWidgetData<Tdata>::set_value(const Tdata& _value) {
    QSpinBox::setValue(_value);
}

#undef Tdata
#define Tdata unsigned int
inline GlvWidgetData<Tdata>::GlvWidgetData(QWidget* _parent) :QSpinBox(_parent) {
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Maximum);
    setMaximum(std::numeric_limits<int>::max());
    setMinimum(0);
}
inline GlvWidgetData<Tdata>::GlvWidgetData(const Tdata& _value, QWidget* _parent) : GlvWidgetData(_parent) {
    set_value(_value);
}
inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}
inline void GlvWidgetData<Tdata>::set_editable(bool l_editable) {
    QSpinBox::setReadOnly(!l_editable);
}
inline Tdata GlvWidgetData<Tdata>::get_value() const {
    return QSpinBox::value();
}
inline void GlvWidgetData<Tdata>::set_value(const Tdata& _value) {
    Tdata value = _value;
    if (value > (unsigned int)std::numeric_limits<int>::max()) {
        value = (unsigned int)std::numeric_limits<int>::max();
        slv::flag::WARNING("GlvWidgetData<unsigned int> : value is too high to be set in QSpinBox");
    }
    QSpinBox::setValue(value);
}

#undef Tdata
#define Tdata float
inline GlvWidgetData<Tdata>::GlvWidgetData(QWidget* _parent) :QDoubleSpinBox(_parent) {
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Maximum);
    setMaximum(std::numeric_limits<float>::max());
    setMinimum(std::numeric_limits<float>::lowest());
}
inline GlvWidgetData<Tdata>::GlvWidgetData(const Tdata& _value, QWidget* _parent) : GlvWidgetData(_parent) {
    unsigned int Ndecimals = slv::misc::get_Ndecimals(_value);
    Ndecimals = std::max((unsigned int)2, Ndecimals);
    setDecimals(Ndecimals);
    set_value(_value);
}
inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}
inline void GlvWidgetData<Tdata>::set_editable(bool l_editable) {
    QDoubleSpinBox::setReadOnly(!l_editable);
}
inline Tdata GlvWidgetData<Tdata>::get_value() const {
    return QDoubleSpinBox::value();
}
inline void GlvWidgetData<Tdata>::set_value(const Tdata& _value) {
    QDoubleSpinBox::setValue(_value);
}

#undef Tdata
#define Tdata double
inline GlvWidgetData<Tdata>::GlvWidgetData(QWidget* _parent) :QDoubleSpinBox(_parent) {
    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Maximum);
    setMaximum(std::numeric_limits<double>::max());
    setMinimum(std::numeric_limits<double>::lowest());
}
inline GlvWidgetData<Tdata>::GlvWidgetData(const Tdata& _value, QWidget* _parent) : GlvWidgetData(_parent) {
    unsigned int Ndecimals = slv::misc::get_Ndecimals(_value);
    Ndecimals = std::max((unsigned int)2, Ndecimals);
    setDecimals(Ndecimals);
    set_value(_value);
}
inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}
inline void GlvWidgetData<Tdata>::set_editable(bool l_editable) {
    QDoubleSpinBox::setReadOnly(!l_editable);
}
inline Tdata GlvWidgetData<Tdata>::get_value() const {
    return QDoubleSpinBox::value();
}
inline void GlvWidgetData<Tdata>::set_value(const Tdata& _value) {
    QDoubleSpinBox::setValue(_value);
}

#undef Tdata
#define Tdata bool
inline GlvWidgetData<Tdata>::GlvWidgetData(QWidget* _parent) :QCheckBox(_parent) {

}
inline GlvWidgetData<Tdata>::GlvWidgetData(const Tdata& _value, QWidget* _parent) : GlvWidgetData(_parent) {
    set_value(_value);
}
inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}
inline void GlvWidgetData<Tdata>::set_editable(bool l_editable) {
    QCheckBox::setEnabled(l_editable);
}
inline Tdata GlvWidgetData<Tdata>::get_value() const {
    return QCheckBox::isChecked();
}
inline void GlvWidgetData<Tdata>::set_value(const Tdata& _value) {
    QCheckBox::setChecked(_value);
}

#undef Tdata

#endif

inline SlvProportion::SlvProportion(Tvalue _value) {
    *this = _value;
}

inline SlvProportion::~SlvProportion() {

}

inline SlvProportion::operator Tvalue() const {

    return value;
}

inline SlvProportion& SlvProportion::operator=(const Tvalue& _value) {

    if (_value < 0. || _value > 1.) {
        slv::flag::ISSUE(slv::flag::FlagType::Warning, "can't set SlvProportion with value : ", _value);
    }

    value = std::max(0., std::min(1., _value));

    return *this;
}

inline bool SlvProportion::readB(std::ifstream& _input_file) {

    return slv::rw::readB(value, _input_file);
}

inline void SlvProportion::writeB(std::ofstream& _output_file) const {

    slv::rw::writeB(value, _output_file);
}

inline void SlvProportion::istream(std::istream& _is) {

    std::string tmp;
    _is >> tmp;

    try {
        value = std::stod(tmp);
        value /= 100.;
    } catch (const std::invalid_argument&) {
        
    }
    
}

inline void SlvProportion::ostream(std::ostream& _os) const {

    _os << value * 100. << "%";
}

#ifndef GLOVE_DISABLE_QT

inline GlvProportionWidget::GlvProportionWidget(SlvProportion _proportion, int _slider_size, QWidget* _parent) {
    
    QGridLayout* layout = new QGridLayout;
    layout->setContentsMargins(0, 0, 0, 0);
    
    value_widget = new QDoubleSpinBox;
    value_widget->setMaximum(100);
    value_widget->setMinimum(0);
    value_widget->setDecimals(2);

    layout->addWidget(value_widget, 0, 0);
    percentage_label = new QLabel("%");
    layout->addWidget(percentage_label, 0, 1);
    slider = new QSlider;
    slider->setMinimum(0);
    slider->setOrientation(Qt::Horizontal);
    layout->addWidget(slider, 1, 0);
    setLayout(layout);

    set_slider_size(_slider_size);

    connect(value_widget, SIGNAL(valueChanged(double)), this, SLOT(valueChanged_slot(double)));
    
    //sync spinbox and slider
    connect(slider, SIGNAL(valueChanged(int)), this, SLOT(set_value_to_spinbox(int)));
    connect(value_widget, SIGNAL(valueChanged(double)), this, SLOT(set_value_to_slider(double)));
    
    set_value(_proportion);
}

inline GlvProportionWidget::~GlvProportionWidget() {
    
}

inline void GlvProportionWidget::set_slider_size(int _slider_size) {

    slider_size = _slider_size;

    value_widget->setSingleStep(double(100) / slider_size);
    slider->setMaximum(slider_size);

    set_value_to_slider(value_widget->value());

}

inline SlvProportion GlvProportionWidget::get_value() const {
    
    return SlvProportion(value_widget->value() / 100);
}

inline void GlvProportionWidget::set_value(const SlvProportion& _proportion) {
    
    value_widget->setValue(_proportion * 100);
}

inline void GlvProportionWidget::set_editable(bool l_editable) {
    
    value_widget->setEnabled(l_editable);
    slider->setEnabled(l_editable);
    
}

inline void GlvProportionWidget::set_value_to_spinbox(int _value) {
    
    value_widget->setValue(double(_value) * double(100) / slider_size);
    
}

inline void GlvProportionWidget::set_value_to_slider(double _value) {

    slider->setValue(int(_value * slider_size / 100));
    
}

inline void GlvProportionWidget::valueChanged_slot(double _value) {
    
    emit valueChanged(_value);

}

#define Tdata SlvProportion

inline GlvWidgetData<Tdata>::GlvWidgetData(Tdata _ratio, QWidget* _parent) :GlvProportionWidget(_ratio, 100, _parent) {

}

inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}

#undef Tdata

#define Tdata std::string
inline GlvWidgetData<Tdata>::GlvWidgetData(QWidget* _parent) :QLineEdit(_parent) {

}
inline GlvWidgetData<Tdata>::GlvWidgetData(const Tdata& _value, QWidget* _parent) : GlvWidgetData(_parent) {
    set_value(_value);
}
inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}
inline void GlvWidgetData<Tdata>::set_editable(bool l_editable) {
    QLineEdit::setReadOnly(!l_editable);
}
inline Tdata GlvWidgetData<Tdata>::get_value() const {
    return QLineEdit::displayText().toStdString();
}
inline void GlvWidgetData<Tdata>::set_value(const Tdata& _value) {
    QLineEdit::setText(glv::toQString(_value));
}

#undef Tdata

#endif

inline SlvCLI::Arguments::Arguments(int _argc, char* _argv[]) {

	parse(_argc, _argv);

}

inline bool SlvCLI::has_glove(int _argc, char* _argv[]) {

	bool l_found = false;
	int i;
	for (i = 1; i < _argc && !l_found; i++) {
		l_found = !std::strcmp(_argv[i], "-glove");
	}

	return l_found;
}

inline bool SlvCLI::Arguments::is_empty() const {

	return parameter_arguments.empty() && solo_arguments.empty();

}

inline const std::vector<std::string>& SlvCLI::Arguments::get_solo_arguments() const {

	return solo_arguments;

}

inline const SlvCLI::Arguments::Tparameters& SlvCLI::Arguments::get_parameter_arguments() const {

	return parameter_arguments;

}

inline const std::string& SlvCLI::Arguments::get_glove_argument() const {

	return glove_argument;

}

inline void SlvCLI::Arguments::parse(int _argc, char* _argv[]) {

	parameter_arguments.clear();
	solo_arguments.clear();

	for (int i = 1; i < _argc; i++) {
		bool l_parameter = false;
		if (_argv[i][0] == '-') {
			if (i < _argc - 1 && _argv[i + 1][0] != '-') {
				if (std::strcmp(_argv[i], "-glove")) {
					parameter_arguments[_argv[i]].push_back(_argv[i + 1]);
				} else {
					glove_argument = _argv[i + 1];
				}
				l_parameter = true;
			}
		}

		if (!l_parameter) {
			if (std::strcmp(_argv[i], "-glove")) {
				solo_arguments.push_back(_argv[i]);
			}
		} else {
			i++;
		}
	}

}

inline void SlvCLI::Arguments::filter(const std::vector<std::string>& _arguments_remaining) {

	for (Tparameters::const_iterator it = parameter_arguments.begin(); it != parameter_arguments.end();) {

		if (!slv::vector::find(it->first, _arguments_remaining)) {
			it = parameter_arguments.erase(it);
		} else {
			++it;
		}

	}

	for (std::vector<std::string>::const_iterator it = solo_arguments.begin(); it != solo_arguments.end();) {

		if (!slv::vector::find(*it, _arguments_remaining)) {
			it = solo_arguments.erase(it);
		} else {
			++it;
		}

	}

}

inline std::pair<int, char**> SlvCLI::get_arguments(const std::vector< std::pair<std::string, std::string> >& _parameter_arguments, const std::vector<std::string>& _solo_arguments) {

	int Nfilled_parameters = 0;
	for (int i = 0; i < _parameter_arguments.size(); i++) {
		if (!_parameter_arguments[i].second.empty()) {
			Nfilled_parameters++;
		}
	}

	int argc = 2 * Nfilled_parameters + (int)_solo_arguments.size() + 1;
	char** argv = new char* [argc];

	int k_arg = 0;
	for (int i = 0; i < _parameter_arguments.size(); i++) {

		if (!_parameter_arguments[i].second.empty()) {

			argv[1 + k_arg] = new char[_parameter_arguments[i].first.size() + 1];
#ifdef COMPILER_GCC
			strcpy(argv[1 + k_arg], _parameter_arguments[i].first.c_str());
#else
			strcpy_s(argv[1 + k_arg], _parameter_arguments[i].first.size() + 1, _parameter_arguments[i].first.c_str());
#endif
			k_arg++;

			argv[1 + k_arg] = new char[_parameter_arguments[i].second.size() + 1];
#ifdef COMPILER_GCC
			strcpy(argv[1 + k_arg], _parameter_arguments[i].second.c_str());
#else
			strcpy_s(argv[1 + k_arg], _parameter_arguments[i].second.size() + 1, _parameter_arguments[i].second.c_str());
#endif
			k_arg++;

		}

	}

	for (int i = 0; i < _solo_arguments.size(); i++) {
		argv[1 + 2 * Nfilled_parameters + i] = new char[_solo_arguments[i].size() + 1];
#ifdef COMPILER_GCC
		strcpy(argv[1 + 2 * Nfilled_parameters + i], _solo_arguments[i].c_str());
#else
		strcpy_s(argv[1 + 2 * Nfilled_parameters + i], _solo_arguments[i].size() + 1, _solo_arguments[i].c_str());
#endif
	}

	return { argc, argv };

}

inline SlvParameter_base::SlvParameter_base(SlvParametrization_base* _parametrization) : parametrization(_parametrization) {

}

inline SlvParameter_base::~SlvParameter_base() {

}

inline bool SlvParameter_base::is_param_init_auto() const {

	return parametrization->is_param_init_auto();

}

inline SlvStatus SlvParameterRuleValidation<SlvFile>::is_valid(const SlvParameter<SlvFile>* _parameter) {
	if (!_parameter->get_value().get_path().empty()) {//if file is 'empty' then invalid status is being ignored. Assumption: the file was net at all.
		SlvFile::IO io_mode = _parameter->get_value().get_io_mode();
		if (io_mode == SlvFile::IO::Read && SlvFileMgr::test_file(_parameter->get_value(), std::ios::in)) {
			return SlvStatus();
		} else if (io_mode == SlvFile::IO::Write && SlvFileMgr::test_file(_parameter->get_value(), std::ios::out)) {
			return SlvStatus();
		} else if (io_mode == SlvFile::IO::Any) {// No test for Any
			return SlvStatus();
		} else {
			return SlvStatus(SlvStatus::statusType::warning, _parameter->get_name() + " : can't open file  " + SlvFileMgr::get_path(_parameter->get_value()));
		}
	} else {
		return SlvStatus();
	}
}

inline SlvStatus SlvParameterRuleValidation<SlvDirectory>::is_valid(const SlvParameter<SlvDirectory>* _parameter) {
	if (_parameter->get_value().exists() || _parameter->get_value().get_path().empty()) {//if directory is 'empty' then invalid status is being ignored.  Assumption: the directory was not set at all.
		return SlvStatus();
	} else {
		return SlvStatus(SlvStatus::statusType::warning, _parameter->get_name() + " : no such directory " + slv::string::to_string(_parameter->get_value()));
	}
}

#ifndef GLOVE_DISABLE_QT

inline GlvOpenFile::GlvOpenFile(SlvFile _file, QWidget* _parent) :io_mode(_file.get_io_mode()) {

    l_ready[QIODevice::ReadOnly] = false;
    l_ready[QIODevice::WriteOnly] = false;

    allowed_extensions = _file.get_allowed_extensions();
    set_file_filter(get_file_filter(_file));

    line_edit = new QLineEdit;
    push_button_read = new QPushButton(QString(tr("Open")));
    push_button_read->setToolTip(tr("Select existing file"));
    push_button_write = new QPushButton(QString(tr("Open")));
    push_button_write->setToolTip(tr("Enter file location"));
    push_button_write->hide();

    button_rw = new QPushButton("Read");
    button_rw->setCheckable(true);
    button_rw->setToolTip(tr("Toggle to change read/write mode."));

    QHBoxLayout* layout = new QHBoxLayout;
    layout->setContentsMargins(0, 0, 0, 0);
    layout->addWidget(line_edit);
    layout->addWidget(push_button_read);
    layout->addWidget(push_button_write);
    layout->addWidget(button_rw);

    this->setLayout(layout);

    connect(push_button_read, SIGNAL(clicked()), this, SLOT(getOpenFileName()));
    connect(push_button_write, SIGNAL(clicked()), this, SLOT(getSaveFileName()));
    connect(button_rw, SIGNAL(toggled(bool)), this, SLOT(change_mode(bool)));
    connect(line_edit, SIGNAL(textChanged(const QString&)), this, SLOT(file_changed_slot(const QString&)));

    read_status = new QLabel("Ok");
    read_status->setToolTip(tr("Is the file valid for reading."));
    layout->addWidget(read_status);
    write_status = new QLabel("Ok");
    write_status->setToolTip(tr("Is the file valid for writing."));
    layout->addWidget(write_status);
    write_status->hide();

    set_file(_file);

    if (io_mode == SlvFile::IO::Read) {
        button_rw->setChecked(false);//not necessary theoretically
        button_rw->hide();
    } else if (io_mode == SlvFile::IO::Write) {
        button_rw->setChecked(true);
        button_rw->hide();
    }

}

inline GlvOpenFile::GlvOpenFile(QString _default, QWidget* _parent) :GlvOpenFile(SlvFile(_default.toStdString()), _parent) {

}

inline GlvOpenFile::GlvOpenFile(const std::string& _description, const SlvFileExtensions& _allowed_extensions, QWidget* _parent) :GlvOpenFile(SlvFile(_description, _allowed_extensions), _parent) {

}

inline GlvOpenFile::~GlvOpenFile() {

}

inline SlvFile GlvOpenFile::get_file() const {

    SlvFile file(line_edit->text().toStdString(), io_mode);
    file.add_allowed_extensions(allowed_extensions);
    return file;
}

inline void GlvOpenFile::set_file(const SlvFile& _file) {

    file_filter = get_file_filter(_file);
    file_filters = get_file_filters(_file);

    QString file_string = glv::toQString(_file.get_path());

    line_edit->setText(file_string);

    file_changed_slot(line_edit->text());

}

inline void GlvOpenFile::update_readiness() {

    l_ready[QIODevice::ReadOnly] = is_valid_read_file(line_edit->text());
    l_ready[QIODevice::WriteOnly] = is_valid_write_file(line_edit->text());

}

inline bool GlvOpenFile::is_valid_read_file(const QString& _path) {

#ifdef QT_FILE_EXISTS
    QFileInfo file_info(_path);
    return file_info.exists() && file_info.isFile();
#else
    return SlvFile(_path.toStdString()).exists();
#endif

}

inline bool GlvOpenFile::is_valid_write_file(const QString& _path) {

    QFileInfo file_info(_path);
    return file_info.absoluteDir().exists() && !file_info.fileName().isEmpty() && QFileInfo(file_info.absoluteDir().path()).isWritable();

}

inline bool GlvOpenFile::is_ready(QIODevice::OpenMode _mode) const {

    return l_ready.at(_mode);

}

inline void GlvOpenFile::set_editable(bool l_editable) {

    line_edit->setReadOnly(!l_editable);
    if (l_editable) {
        if (button_rw->isChecked()) {
            push_button_write->show();
        } else {
            push_button_read->show();
        }
    } else {
        push_button_read->hide();
        push_button_write->hide();
    }

}

inline void GlvOpenFile::set_file_filter(QString _file_filter) {

    if (_file_filter == QString("*")) {
        set_file_filter();
    } else {
        file_filter = _file_filter;
    }

}

inline QString GlvOpenFile::get_file_filter(const SlvFile& _file) {

    return get_file_filter(_file.get_description(), _file.get_allowed_extensions());
}

inline QString GlvOpenFile::get_file_filter(const std::string& _description, const SlvFileExtensions& _allowed_extensions) {

    QString file_filter;
    if (_description.size() > 0) {
        file_filter += QString(_description.c_str()) + " (";
    }
    if (_allowed_extensions.get().size() > 0) {
        for (unsigned int i_ext = 0; i_ext < _allowed_extensions.get().size(); i_ext++) {
            file_filter += "*" + QString(_allowed_extensions.get()[i_ext].c_str()) + " ";
        }
    } else {
        file_filter += "*";
    }
    if (_description.size() > 0) {
        file_filter += ")";
    }

    return file_filter;

}

inline QStringList GlvOpenFile::get_file_filters(const SlvFile& _file) {

    QStringList file_filters;

    SlvFileExtensions allowed_extensions = _file.get_allowed_extensions();

    for (std::vector<SlvFileExtension>::const_iterator it = allowed_extensions.get().begin(); it != allowed_extensions.get().end(); ++it) {
        file_filters.push_back(glv::toQString(*it));
    }

    return file_filters;
}

inline bool GlvOpenFile::getOpenFileName() {

    SlvFile file = get_file();

    QString default_file_name = QString(SlvFileMgr::get_path(file).c_str());
    QFile default_file(default_file_name);
    QString file_name;
    if (default_file.open(QIODevice::ReadOnly)) {
        file_name = QFileDialog::getOpenFileName(this, tr("Open file"), default_file_name, file_filter);
    } else {

        QString default_directory_name = QString(SlvFileMgr::get_path(file.get_directory()).c_str());
        QDir default_directory(default_directory_name);
        if (default_directory.exists()) {
            file_name = QFileDialog::getOpenFileName(this, tr("Open file"), default_directory_name, file_filter);
        } else {
            file_name = QFileDialog::getOpenFileName(this, tr("Open file"), qApp->applicationDirPath(), file_filter);
        }

    }

    if (!file_name.isNull()) {
        QFile qfile(file_name);
        if (!qfile.open(QIODevice::ReadOnly)) {
            QMessageBox::information(this, tr("Unable to open file"), qfile.errorString());
            return false;
        } else {
            l_ready[QIODevice::ReadOnly] = true;
            line_edit->setText(file_name);
            qfile.close();
            return true;
        }
    } else {
        return false;
    }

}

inline void GlvOpenFile::getSaveFileName() {

    QString default_directory_name = QString(SlvFileMgr::get_path(get_file().get_directory()).c_str());
    QDir default_directory(default_directory_name);
    QString file_name;
    QFileDialog file_dialog;
    file_dialog.setFileMode(QFileDialog::FileMode::AnyFile);
    file_dialog.setAcceptMode(QFileDialog::AcceptMode::AcceptSave);
    file_dialog.setNameFilter(file_filter);
    if (!allowed_extensions.empty()) {
        file_dialog.setDefaultSuffix(glv::toQString(allowed_extensions[0]));
    }

    if (default_directory.exists()) {
        std::string file_path = SlvFileMgr::get_path(get_file());
        if (file_path == "./") {// convert empty path
            file_path = "";
        }
        file_dialog.setDirectory(glv::toQString(file_path));
    } else {
        file_dialog.setDirectory(qApp->applicationDirPath());
    }

    if (file_dialog.exec() == QDialog::Accepted) {
        file_name = file_dialog.selectedFiles().front();
        if (!file_name.isNull()) {
            if (is_valid_write_file(file_name)) {
                l_ready[QIODevice::WriteOnly] = true;
                line_edit->setText(file_name);
            } else {
                QMessageBox::information(this, tr("Unable to open file"), tr("Invalid file : ") + file_name);
            }
        }
    }

}

inline void GlvOpenFile::file_changed_slot(const QString& _file_name) {

    update_readiness();

    read_status->setEnabled(l_ready.at(QIODevice::ReadOnly));
    write_status->setEnabled(l_ready.at(QIODevice::WriteOnly));

    emit file_changed(_file_name);

}

inline void GlvOpenFile::change_mode(bool _l_write) {

    if (_l_write) {
        button_rw->setText(tr("Write"));
        push_button_read->hide();
        read_status->hide();
        push_button_write->show();
        write_status->show();
    } else {
        button_rw->setText(tr("Read"));
        push_button_write->hide();
        write_status->hide();
        push_button_read->show();
        read_status->show();
    }

}

#define Tdata SlvFile

inline GlvWidgetData<Tdata>::GlvWidgetData(Tdata _file, QWidget* _parent) :GlvOpenFile(_file, _parent) {

}

inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}

#undef Tdata

inline GlvVectorWidget_base::GlvVectorWidget_base(QWidget* _parent) : QWidget(_parent) {

    QString info;

    buttons_widget = new QWidget;
    QVBoxLayout* buttons_layout = new QVBoxLayout;
    buttons_widget->setLayout(buttons_layout);
    buttons_widget->setSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum);

    QWidget* pushpop_widget = new QWidget;
    QHBoxLayout* pushpop_layout = new QHBoxLayout;
    pushpop_widget->setLayout(pushpop_layout);
    button_push = new QPushButton(tr("Push"));
    info = QString(tr("Add a new element at the end of the vector"));
    button_push->setWhatsThis(info);
    button_push->setToolTip(info);
    pushpop_layout->addWidget(button_push);
    button_pop = new QPushButton(tr("Pop"));
    button_pop->setEnabled(false);
    info = QString(tr("Remove the element at the end of the vector"));
    button_pop->setWhatsThis(info);
    button_pop->setToolTip(info);
    pushpop_layout->addWidget(button_pop);
    buttons_layout->addWidget(pushpop_widget);

    QWidget* insert_widget = new QWidget;
    QHBoxLayout* insert_layout = new QHBoxLayout;
    insert_widget->setLayout(insert_layout);
    button_insert = new QPushButton(tr("Insert"));
    info = QString(tr("Insert an element at the specified index"));
    button_insert->setWhatsThis(info);
    button_insert->setToolTip(info);
    insert_layout->addWidget(button_insert);
    index_spinbox = new QSpinBox;
    info = QString(tr("Index where to insert an element"));
    index_spinbox->setWhatsThis(info);
    index_spinbox->setToolTip(info);
    insert_layout->addWidget(index_spinbox);
    buttons_layout->addWidget(insert_widget);
    buttons_layout->setContentsMargins(0, 9, 0, 0);

    pushpop_layout->setContentsMargins(0, 0, 0, 0);
    insert_layout->setContentsMargins(0, 0, 0, 0);

    index_spinbox->setMinimum(0);

    widget_scroll = new QWidget;
    layout_items = new QVBoxLayout;

    widget_scroll->setLayout(layout_items);
    connect(button_push, SIGNAL(clicked()), this, SLOT(pushValue()));
    connect(button_pop, SIGNAL(clicked()), this, SLOT(popValue()));
    connect(button_insert, SIGNAL(clicked()), this, SLOT(insertValue()));

    QWidget* widget_vector = new QWidget;
    QScrollArea* scroll_area = glv::widget::make_scrollable(widget_scroll, widget_vector);
    scroll_area->setFrameShape(QFrame::Panel);
    widget_vector->layout()->setContentsMargins(0, 0, 0, 0);

    QHBoxLayout* layout = new QHBoxLayout;
    layout->addWidget(widget_vector);
    layout->addWidget(buttons_widget, 0, Qt::AlignTop);
    setLayout(layout);

    layout->setContentsMargins(0, 0, 0, 0);
}

inline GlvVectorWidget_base::~GlvVectorWidget_base() {

}

inline void GlvVectorWidget_base::set_editable(bool l_editable) {
    QWidget::setEnabled(l_editable);
}

inline void GlvVectorWidget_base::insertValue() {

    insertValue(index_spinbox->value());

}

inline GlvVectorWidgetItem_base::GlvVectorWidgetItem_base() {

	layout = new QHBoxLayout;
	setLayout(layout);
	layout->setContentsMargins(0, 0, 0, 0);

}

inline GlvVectorWidgetItem_base::~GlvVectorWidgetItem_base() {

}

inline void GlvVectorWidgetItem_base::show_remove_button(bool _l_show) {

	if (_l_show) {
		remove_button->show();
	} else {
		remove_button->hide();
	}

}

template <>
inline QString glv::toQString<std::string>(const std::string& _value) {
	return QString(_value.c_str());
}
template <>
inline QString glv::toQString<double>(const double& _value) {
	return QString(slv::string::value_to_string(_value).c_str());
}
template <>
inline QString glv::toQString<float>(const float& _value) {
	return QString(slv::string::value_to_string(_value).c_str());
}
template <>
inline QString glv::toQString<int>(const int& _value) {
	return QString(slv::string::number_to_string_auto(_value).c_str());
}
template <>
inline QString glv::toQString<unsigned int>(const unsigned int& _value) {
	return QString(slv::string::number_to_string_auto(_value).c_str());
}
template <>
inline QString glv::toQString<unsigned long>(const unsigned long& _value) {
	return QString(slv::string::number_to_string_auto(_value).c_str());
}

inline GlvMapWidget_base::GlvMapWidget_base(QWidget* _parent) : QWidget(_parent) {

    QString info;

    QWidget* buttons_widget = new QWidget;
    QVBoxLayout* buttons_layout = new QVBoxLayout;
    buttons_widget->setLayout(buttons_layout);
    buttons_widget->setSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum);

    QWidget* insert_widget = new QWidget;
    insert_layout = new QHBoxLayout;
    insert_widget->setLayout(insert_layout);
    button_insert = new QPushButton(tr("Insert"));
    info = QString(tr("Insert an element at the specified key"));
    button_insert->setWhatsThis(info);
    button_insert->setToolTip(info);
    insert_layout->addWidget(button_insert);
    buttons_layout->addWidget(insert_widget);
    buttons_layout->setContentsMargins(0, 9, 0, 0);

    insert_layout->setContentsMargins(0, 0, 0, 0);

    widget_scroll = new QWidget;
    layout_items = new QVBoxLayout;

    widget_scroll->setLayout(layout_items);
    connect(button_insert, SIGNAL(clicked()), this, SLOT(insertValue()));

    QWidget* widget_vector = new QWidget;
    QScrollArea* scroll_area = glv::widget::make_scrollable(widget_scroll, widget_vector);
    scroll_area->setFrameShape(QFrame::Panel);
    widget_vector->layout()->setContentsMargins(0, 0, 0, 0);

    QHBoxLayout* layout = new QHBoxLayout;
    layout->addWidget(widget_vector);
    layout->addWidget(buttons_widget, 0, Qt::AlignTop);
    setLayout(layout);

    layout->setContentsMargins(0, 0, 0, 0);

}

inline GlvMapWidget_base::~GlvMapWidget_base() {

}

inline void GlvMapWidget_base::set_editable(bool l_editable) {
    QWidget::setEnabled(l_editable);
}

inline GlvMapWidgetItem_base::GlvMapWidgetItem_base() {

	layout = new QHBoxLayout;
	this->setLayout(layout);
	layout->setContentsMargins(0, 0, 0, 0);

}

inline GlvMapWidgetItem_base::~GlvMapWidgetItem_base() {

}

inline GlvOpenDirectory::GlvOpenDirectory(SlvDirectory _directory, QWidget* _parent) {

    l_ready = false;

    line_edit = new QLineEdit;
    push_button = new QPushButton(QString(tr("Open directory")));

    QHBoxLayout* layout = new QHBoxLayout;
    layout->setContentsMargins(0, 0, 0, 0);
    layout->addWidget(line_edit);
    layout->addWidget(push_button);

    this->setLayout(layout);

    connect(push_button, SIGNAL(clicked()), this, SLOT(getExistingDirectory()));
    connect(line_edit, SIGNAL(textChanged(const QString&)), this, SLOT(directory_changed_slot(const QString&)));

    status = new QLabel("Ok");
    status->setToolTip(tr("Does the directory exist."));
    layout->addWidget(status);

    set_directory(_directory);
}

inline GlvOpenDirectory::GlvOpenDirectory(QString _default, QWidget* _parent) :GlvOpenDirectory(SlvDirectory(_default.toStdString()), _parent) {

}

inline GlvOpenDirectory::~GlvOpenDirectory() {

}

inline SlvDirectory GlvOpenDirectory::get_directory() const {

    std::string directory_path = line_edit->text().toStdString();
    if (!directory_path.empty() && directory_path.back() != '/') {
        directory_path.push_back('/');
    }
    SlvDirectory directory(directory_path);
    return directory;

}

inline void GlvOpenDirectory::set_directory(const SlvDirectory& _directory) {

    QString directory_string = glv::toQString(_directory.get_path());

    QDir directory_dir(directory_string);
#ifdef QT_DIRECTORY_EXISTS
    l_ready = directory_dir.exists();
#else
    l_ready = SlvDirectory(directory_string.toStdString()).exists();
#endif

    line_edit->setText(directory_string);

    directory_changed_slot(line_edit->text());
}

inline bool GlvOpenDirectory::is_ready() const {

    return l_ready;

}

inline void GlvOpenDirectory::set_editable(bool l_editable) {

    line_edit->setReadOnly(!l_editable);
    if (l_editable) {
        push_button->show();
    } else {
        push_button->hide();
    }

}

inline void GlvOpenDirectory::getExistingDirectory() {

    SlvDirectory directory = get_directory();

    QString default_directory_name = QString(SlvFileMgr::get_path(directory).c_str());
    QDir default_directory(default_directory_name);
    QString new_directory_name;
    if (default_directory.exists()) {
        new_directory_name = QFileDialog::getExistingDirectory(this, tr("Open directory"), default_directory_name);
    } else {
        new_directory_name = QFileDialog::getExistingDirectory(this, tr("Open directory"), qApp->applicationDirPath());
    }

    if (!new_directory_name.isEmpty()) {
        QDir new_directory(new_directory_name);
        if (!new_directory.exists()) {
            QMessageBox::information(this, tr("Unable to open directory"), new_directory.path());
        } else {
            l_ready = true;
            if (!new_directory_name.endsWith('/')) {
                new_directory_name.push_back('/');
            }
            line_edit->setText(new_directory_name);
            directory = SlvDirectory(new_directory_name.toStdString());
        }
    }

}

inline void GlvOpenDirectory::directory_changed_slot(const QString& _directory_path) {

    update_readiness();

    status->setEnabled(l_ready);

    emit directory_changed(_directory_path);

}

inline void GlvOpenDirectory::update_readiness() {

    QDir directory(line_edit->text());

    l_ready = directory.exists();

}

#define Tdata SlvDirectory

inline GlvWidgetData<Tdata>::GlvWidgetData(Tdata _file, QWidget* _parent) :GlvOpenDirectory(_file, _parent) {

}

inline GlvWidgetData<Tdata>::~GlvWidgetData() {

}

#undef Tdata

#endif

inline SlvIFS::SlvIFS() {

}

inline SlvIFS::~SlvIFS() {

}

inline std::ifstream& operator>>(std::ifstream& _ifs, SlvIFS& _IFS) {

	_IFS.ifstream(_ifs);
	return _ifs;

}

inline SlvReadText::SlvReadText() {

}

inline SlvReadText::~SlvReadText() {

}

inline SlvStatus SlvReadText::read_text(std::string _file_path) {

    SlvStatus status;
    status = SlvFileMgr::read_text(*this, _file_path);

    return status;
}

inline SlvOFS::SlvOFS() {

}

inline SlvOFS::~SlvOFS() {

}

inline std::ofstream& operator<<(std::ofstream& _ofs, const SlvOFS& _OFS) {

	_OFS.ofstream(_ofs);
	return _ofs;

}

inline SlvWriteText::SlvWriteText() {

}

inline SlvWriteText::~SlvWriteText() {

}

inline SlvStatus SlvWriteText::write_text(std::string _file_path, std::ios::openmode _position) const {

    SlvStatus status;
    status = SlvFileMgr::write_text(*this, _file_path, _position);

    return status;
}

inline SlvName::SlvName(std::string _name) :name(_name) {

}

inline SlvName::~SlvName() {

}

inline const std::string& SlvName::get_name() const {
	return name;
}

inline void SlvName::set_name(const std::string& _name) {
	name = _name;
}

inline SlvWriteBinary::SlvWriteBinary() {

}

inline SlvWriteBinary::~SlvWriteBinary() {

}

inline SlvStatus SlvWriteBinary::write_binary(std::string _file_path, std::ios::openmode _position) const {

    SlvStatus status;
    status = SlvFileMgr::write_binary(*this, _file_path, _position);

    return status;
}

inline SlvReadBinary::SlvReadBinary() {

}

inline SlvReadBinary::~SlvReadBinary() {

}

inline SlvStatus SlvReadBinary::read_binary(std::string _file_path) {

    SlvStatus status;
    status = SlvFileMgr::read_binary(*this, _file_path);

    return status;
}

//#include "slv_string.h"

inline SlvTimer::SlvTimer(std::string _name) :SlvName(_name) {

    reset();
}

inline SlvTimer::~SlvTimer() {

}

inline void SlvTimer::reset() {

    check_times.clear();
    check_times.push_back(clock());//start time
}

inline void SlvTimer::check_display(std::string _message) {

    check_times.push_back(clock());

    std::cout << "(SlvTimer " << name << ", " << _message << ")" << std::endl;
    std::cout << "last check: ";
    time_display(check_times.back() - check_times[check_times.size() - 2]);
    std::cout << " ago " << std::endl;
    std::cout << "from start: ";
    time_display(check_times.back() - check_times.front());
    std::cout << std::endl;

}

inline std::string SlvTimer::get_string() const {

    std::string time;
    std::vector<int> time_vector = get_time(clock() - check_times[0]);
    if (time_vector[0] > 0) {
        time = slv::string::to_string(time_vector[0]) + " h ";
    }
    if (time_vector[1] > 0 || time_vector[0] > 0) {
        time += slv::string::to_string(time_vector[1]) + " min ";
    }
    if (time_vector[2] > 0 || time_vector[1] > 0 || time_vector[0] > 0) {
        time += slv::string::to_string(time_vector[2]) + " s ";
    }
    if (time_vector[3] > 0 || time_vector[2] > 0 || time_vector[1] > 0 || time_vector[0] > 0) {
        time += slv::string::to_string(time_vector[3]) + " ms ";
    }

    return time;
}

inline std::vector<int> SlvTimer::get_elasped_time() {

    check_times.push_back(clock());

    return get_time(check_times.back() - check_times[0]);

}

inline std::vector<int> SlvTimer::get_elasped_time_last() {

    check_times.push_back(clock());

    return get_time(check_times.back() - check_times.end()[-2]);

}

inline void SlvTimer::time_display(clock_t _time) const {

    std::vector<int> time_vector = get_time(_time);
    std::cout << time_vector[0] << " h " << time_vector[1] << " min " << time_vector[2] << " s " << time_vector[3] << " ms";

}

inline std::vector<int> SlvTimer::get_time(clock_t _time) const {

    std::vector<int> time_vector;

    double time = double(_time) / CLOCKS_PER_SEC;

    long int time_int = (long int)time;
    int n_milliseconds = int((time - double(time_int)) * 1000);

    int n_hours, n_minutes, n_seconds;

    n_hours = (time_int - time_int % 3600) / 3600;
    time_vector.push_back(n_hours);
    time_int -= n_hours * 3600;
    n_minutes = (time_int - time_int % 60) / 60;
    time_vector.push_back(n_minutes);
    time_int -= n_minutes * 60;
    n_seconds = (time_int - time_int % 1) / 1;
    time_vector.push_back(n_seconds);

    time_vector.push_back(n_milliseconds);

    return time_vector;
}

#define get_iterator_ptr_value \
iterator_type == IteratorType::Int ? *static_cast<int*>(iterator_ptr) : (\
iterator_type == IteratorType::UnsignedInt ? *static_cast<unsigned int*>(iterator_ptr) : (\
iterator_type == IteratorType::Size_t ? *static_cast<std::size_t*>(iterator_ptr) : (\
0)))
#define assign_iterator_ptr_value(value) \
iterator_type == IteratorType::Int ? *static_cast<int*>(iterator_ptr) = value : (\
iterator_type == IteratorType::UnsignedInt ? *static_cast<unsigned int*>(iterator_ptr) = value : (\
iterator_type == IteratorType::Size_t ? *static_cast<std::size_t*>(iterator_ptr) = value : (\
0)))

inline SlvProgressionQt::SlvProgressionQt(std::string _name, bool _l_recurrent) :SlvLblName(_name), l_recurrent(_l_recurrent) {

	clear();
}

inline SlvProgressionQt::SlvProgressionQt(const SlvProgressionQt& _progression) : SlvProgressionQt(_progression.get_name(), _progression.is_recurrent()) {

}

inline SlvProgressionQt::~SlvProgressionQt() {

	iterator_finish();
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	emit finished();
#endif

}

inline void SlvProgressionQt::clear() {

	clear_progress();
	message.clear();

}

inline void SlvProgressionQt::clear_progress() {

	iterator_ptr = NULL;
	l_iterating = false;
	l_was_canceled = false;

	iterator = 0;
	Niterations = 0;
	l_started = false;
	l_no_feedback_ended = false;

}

inline SlvProgressionQt& SlvProgressionQt::operator=(const SlvProgressionQt& _progression) {

	return *this;

}

inline void SlvProgressionQt::set_recurrent(bool _l_recurrent) {

	l_recurrent = _l_recurrent;

}

inline bool SlvProgressionQt::is_recurrent() const {

	return l_recurrent;

}

inline bool SlvProgressionQt::is_over() const {

	if (l_started) {
		if (iterator_ptr) {
			return is_iterator_ptr_over((unsigned int)(get_iterator_ptr_value), Niterations);
		} else if (l_iterating) {
			return is_iterator_over(iterator, Niterations);
		} else {
			return l_no_feedback_ended;
		}
	} else {
		return true;
	}

}

inline bool SlvProgressionQt::has_iterator_ptr() const {

	return iterator_ptr;

}

inline bool SlvProgressionQt::is_iterating() const {

	return l_iterating;

}

inline bool SlvProgressionQt::is_cancelable() const {

	return Niterations;

}

inline bool SlvProgressionQt::is_iterator_ptr_over(unsigned int _iterator_value, unsigned int _Niterations) {

	return _iterator_value >= _Niterations - 1;

}

inline bool SlvProgressionQt::is_iterator_over(std::size_t _iterator, unsigned int _Niterations) {

	return _iterator >= _Niterations;

}

inline void SlvProgressionQt::start() {

	clear_progress();
	l_started = true;
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	emit started();
#endif

}

inline void SlvProgressionQt::start(const unsigned int _Niterations) {

	clear_progress();

	start_pv(_Niterations);

}

template <>
inline void SlvProgressionQt::start(int* _iterator_ptr, const unsigned int _Niterations) {

	iterator_type = IteratorType::Int;

	clear_progress();

	iterator_ptr = _iterator_ptr;
	
	start_pv(_Niterations);

}

template <>
inline void SlvProgressionQt::start(unsigned int* _iterator_ptr, const unsigned int _Niterations) {

	iterator_type = IteratorType::UnsignedInt;

	clear_progress();

	iterator_ptr = _iterator_ptr;
	
	start_pv(_Niterations);

}

template <>
inline void SlvProgressionQt::start(std::size_t* _iterator_ptr, const unsigned int _Niterations) {

	iterator_type = IteratorType::Size_t;

	clear_progress();

	iterator_ptr = _iterator_ptr;
	
	start_pv(_Niterations);

}

inline void SlvProgressionQt::start_pv(const unsigned int _Niterations) {

	l_started = true;
	Niterations = _Niterations;

#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	emit started();
#endif

}

inline bool SlvProgressionQt::update() {

	if (Niterations) {
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
		int value = -1;
		if (iterator_ptr) {
			value = int(100 * (get_iterator_ptr_value + 1) / Niterations);
		} else if (l_iterating) {
			value = int(100 * (iterator) / Niterations);
		}
		if (value >= 0) {
			emit updated(value);
			if (is_over()) {
				end();
			}
			return true;
		} else {
			return false;
		}
#endif
	} else {
		return false;
	}

}

inline bool SlvProgressionQt::update(int _value) {

	if (Niterations) {
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
		int value = 100 * (_value + 1) / Niterations;
		if (value >= 0) {
			emit updated(value);
			if (is_iterator_ptr_over(_value, Niterations)) {
				end();
			}
			return true;
		} else {
			return false;
		}
#endif
	} else {
		return false;
	}

}

inline void SlvProgressionQt::end() {

	l_started = false;

	iterator_finish();
	if (!is_cancelable()) {
		l_no_feedback_ended = true;
	}
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	emit ended();
#endif

	iterator_ptr = NULL;
	l_iterating = false;
	Niterations = 0;

}

inline void SlvProgressionQt::finish() {

	iterator_finish();
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	emit finished();
#endif

	clear();

}

inline void SlvProgressionQt::cancel() {

	iterator_finish();
	l_was_canceled = true;

}

inline bool SlvProgressionQt::was_canceled() const {

	return l_was_canceled;

}

inline void SlvProgressionQt::iterator_finish() {

	/*! Triggers end of loop. If finished is called when the iterator has not reach Niterations yet, then it sets l_stopped = true. Means the progression has been stopped before then end.*/
	if (iterator_ptr) {
		if (get_iterator_ptr_value != Niterations) {
			assign_iterator_ptr_value(Niterations);
		}
	} else if (l_iterating) {
		if (iterator != Niterations) {
			iterator = Niterations;
		}
	}

}

inline SlvProgressionQt::operator std::size_t() const {

	return iterator;

}

inline SlvProgressionQt& SlvProgressionQt::operator=(const std::size_t _iterator) {

	clear_progress();

	l_started = true;

	iterator = _iterator;
	l_iterating = true;

#if OPTION_ENABLE_SLV_QT_PROGRESS==1
	emit started();
#endif
	return *this;
}

inline bool SlvProgressionQt::operator<<(std::size_t _Niterations) {

	if (l_iterating) {
		Niterations = (unsigned int)_Niterations;
		return iterator < _Niterations;
	} else {
		return false;
	}

}

inline bool SlvProgressionQt::operator<<(int _Niterations) {

	return *this << std::size_t(_Niterations);

}

inline bool SlvProgressionQt::operator<<(unsigned int _Niterations) {

	return *this << std::size_t(_Niterations);

}

inline bool SlvProgressionQt::operator<<=(std::size_t _Niterations) {

	if (l_iterating) {
		Niterations = (unsigned int)(_Niterations - 1);
		return iterator <= _Niterations;
	} else {
		return false;
	}

}

inline bool SlvProgressionQt::operator<<=(int _Niterations) {

	return *this <<= std::size_t(_Niterations);

}

inline bool SlvProgressionQt::operator<<=(unsigned int _Niterations) {

	return *this <<= std::size_t(_Niterations);

}

inline SlvProgressionQt& SlvProgressionQt::operator++() {

	if (l_iterating) {
		++iterator;
		update();
	}
	return *this;
}

inline SlvProgressionQt SlvProgressionQt::operator++(int) {

	if (l_iterating) {
		iterator++;
		update();
	}
	SlvProgressionQt progression = *this;
	return progression;
}

inline SlvProgression::SlvProgression(std::string _name, bool _l_recurrent): progression(_name) {

	progression.set_recurrent(_l_recurrent);

}

inline SlvProgression::SlvProgression(const SlvProgression& _progression) {

	*this = _progression;
}

inline SlvProgression::~SlvProgression() {

}

inline SlvProgressionQt* SlvProgression::get_progression() const {

	return const_cast<SlvProgressionQt*>(&progression);

}

inline SlvProgression& SlvProgression::operator=(const SlvProgression& _progression) {

	return *this;
}

inline SlvParametrization_base::SlvParametrization_base() {

	l_param_init_auto = true;

}

inline SlvParametrization_base::~SlvParametrization_base() {

}

inline bool SlvParametrization_base::is_param_init_auto() const {
	return l_param_init_auto;
}

inline void SlvParametrization_base::set_param_init_auto(bool _l_param_init_auto) {
	l_param_init_auto = _l_param_init_auto;
}

inline std::string SlvParametrization_base::get_id_str() const {
	return slv::string::to_string(get_vector_id_str());
}
inline std::string SlvParametrization_base::get_full_name() const {
	return get_name() + separator() + get_id_str();
}

inline bool SlvParametrization_base::has_rules() const {

	bool l_has_rules = false;

	for (int i = 0; i < parameters.size() && !l_has_rules; i++) {

		l_has_rules = (parameters[i]->get_Nrules() > 1);// 1 because a default rule is added for every parameter to manage recursive rules of parametrizations

	}

	return l_has_rules;
}

inline void SlvParametrization_base::param_init() {

}

inline std::vector<const SlvParameter_base*> SlvParametrization_base::find(std::string _parameter_name, bool _l_parametrizations) const {

	std::vector<const SlvParameter_base*> parameters_found;

	for (std::vector<const SlvParameter_base*>::const_iterator it = parameters.begin(); it != parameters.end(); ++it) {

		const SlvParametrization_base* parametrization_cast = (*it)->parametrization_cast();

		if ((_l_parametrizations || !parametrization_cast) && (*it)->get_name() == _parameter_name) {

			parameters_found.push_back(*it);

		} else if (parametrization_cast) {

			slv::vector::add(parameters_found, parametrization_cast->find(_parameter_name, _l_parametrizations));

		}

	}

	return parameters_found;
}

inline const SlvParameter_base* SlvParametrization_base::find_first(std::string _parameter_name, bool _l_parametrizations) const {

	std::vector<const SlvParameter_base*> parameters_found = find(_parameter_name, _l_parametrizations);
	if (!parameters_found.empty()) {
		return parameters_found.front();
	} else {
		return NULL;
	}

}

inline std::pair< std::map<std::string, int>, std::vector<std::string> > SlvParametrization_base::set_stream_values(const std::map<std::string, std::string>& _stream_values, bool _l_parametrizations) {

	std::pair< std::map<std::string, int>, std::vector<std::string> > conflicts_missing;

	for (std::map<std::string, std::string>::const_iterator it = _stream_values.begin(); it != _stream_values.end(); ++it) {

		std::vector<const SlvParameter_base*> parameters_found = find(it->first, _l_parametrizations);

		if (!parameters_found.empty()) {

			if (parameters_found.size() > 1) {
				conflicts_missing.first[it->first] = (int)parameters_found.size();
			}

			for (int p = 0; p < parameters_found.size(); p++) {
				const_cast<SlvParameter_base*>(parameters_found[p])->set_stream_value(it->second);
			}

		} else {

			conflicts_missing.second.push_back(it->first);

		}
		
	}

	return conflicts_missing;
}

inline SlvParametrization0::SlvParametrization0() {

}

inline SlvParametrization0::SlvParametrization0(const SlvParametrization0& _parametrization) {

}

inline SlvParametrization0::~SlvParametrization0() {

}

inline void SlvParametrization0::operator=(const SlvParametrization0& _parametrization) {

}

inline void SlvParametrization0::param_assign_rec(const SlvParametrization0& _parametrization) {

}

inline void SlvParametrization0::set_parameter_values(bool _l_param_only) {

}

inline SlvStatus SlvParametrization0::check_parameters() const {
	return SlvStatus();
}

inline bool SlvParametrization0::abide_rules() {
	return true;
}

inline bool SlvParametrization0::operator==(const SlvParametrization0& _parametrization) const {
	return true;
}

inline bool SlvParametrization0::operator!=(const SlvParametrization0& _parametrization) const {
	return !(*this == _parametrization);
}

inline std::vector<std::string> SlvParametrization0::get_vector_id_str(unsigned int _marker) const {
	std::vector<std::string> vector_id_str;
	return vector_id_str;
}

inline std::vector< std::pair<std::string, std::string> > SlvParametrization0::get_string_serialization(unsigned int _marker) const {
	std::vector< std::pair<std::string, std::string> > serialization;
	return serialization;
}

inline std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > SlvParametrization0::get_string_serialization_bool(unsigned int _marker) const {
	std::pair< std::vector< std::pair<std::string, std::string> >, std::vector<std::string> > serialization;
	return serialization;
}

inline void SlvParametrization0::ostream(std::ostream& _os) const {

}

inline void SlvParametrization0::istream_rec(std::istream& _is) {

}

inline void SlvParametrization0::istream(std::istream& _is) {

}

inline void SlvParametrization0::writeB(std::ofstream& _output_file) const {
	slv::rw::writeB(get_name(), _output_file);
}

inline bool SlvParametrization0::readB_rec(std::ifstream& _input_file) {
	std::string name;
	bool l_read = slv::rw::readB(name, _input_file);
	if (l_read && name != get_name()) {
		slv::flag::ISSUE(slv::flag::Warning, "In SlvParametrization0, static names are different : name = ", name, ", get_name() = ", get_name());
		return false;
	} else {
		return l_read;
	}
}

inline bool SlvParametrization0::readB(std::ifstream& _input_file) {
	return readB_rec(_input_file);
}

#if OPTION_USE_THIRDPARTY_JSON==1
inline void SlvParametrization0::writeJson(nlohmann::json& _json) const {
	_json[get_name()];
}

inline SlvStatus SlvParametrization0::readJson(const nlohmann::json& _json) {
	nlohmann::json::const_iterator it = _json.find(get_name());
	if (it != _json.end()) {
		return SlvStatus();
	} else {
		return SlvStatus(SlvStatus::statusType::critical, "Can not find parametrization : " + get_name() + "\nJson is not suited for this parametrization.");
	}
}
#endif

inline SlvParametrization0::Tparametrization& SlvParametrization0::param_cast() {
	return *this;
}

inline const SlvParametrization0::Tparametrization& SlvParametrization0::param_cast() const {
	return *this;
}

#ifndef GLOVE_DISABLE_QT

inline void glv::resize(QStandardItemModel* _model, unsigned int _Mrow, unsigned int _Ncol, const QModelIndex _index) {

	unsigned int current_rowCount = _model->rowCount(_index);
	unsigned int current_columnCount = _model->columnCount(_index);

	if (_Mrow >= current_rowCount) {
		_model->insertRows(current_rowCount, _Mrow - current_rowCount, _index);
	} else {
		_model->removeRows(_Mrow, current_rowCount - _Mrow, _index);
	}

	if (_Ncol >= current_columnCount) {
		_model->insertColumns(current_columnCount, _Ncol - current_columnCount, _index);
	} else {
		_model->removeColumns(_Ncol, current_columnCount - _Ncol, _index);
	}

}

inline void glv::resize_rows(QStandardItemModel* _model, unsigned int _Mrow, const QModelIndex _index) {

	unsigned int current_rowCount = _model->rowCount(_index);

	if (_Mrow >= current_rowCount) {
		_model->insertRows(current_rowCount, _Mrow - current_rowCount, _index);
	} else {
		_model->removeRows(_Mrow, current_rowCount - _Mrow, _index);
	}

}

inline void glv::resize_cols(QStandardItemModel* _model, unsigned int _Ncol, const QModelIndex _index) {

	unsigned int current_columnCount = _model->columnCount(_index);

	if (_Ncol >= current_columnCount) {
		_model->insertColumns(current_columnCount, _Ncol - current_columnCount, _index);
	} else {
		_model->removeColumns(_Ncol, current_columnCount - _Ncol, _index);
	}

}

inline GlvItemDelegate_base::GlvItemDelegate_base(GlvAbstractItemView* _abstract_view, QObject* _parent) :QStyledItemDelegate(_parent) {

    abstract_view = _abstract_view;
    l_dynamically_update_data = true;

}

inline GlvItemDelegate_base::~GlvItemDelegate_base() {

}

inline void GlvItemDelegate_base::resize_text_editor() {

    QLineEdit* text_editor = dynamic_cast<QLineEdit*>(sender());

    if (text_editor) {

        QString text = text_editor->text();
        QFontMetrics fm = text_editor->fontMetrics();
        int w = fm.boundingRect(text).width();
        w += 10;
        text_editor->setFixedSize(w, text_editor->height());

    } else {
        slv::flag::ISSUE(slv::flag::Critical, "Should not happen");
    }

}

inline void GlvItemDelegate_base::item_changed_slot(const QString& _text) {

    QWidget* editor_sending = dynamic_cast<QWidget*>(sender());
    if (editor_sending) {
        emit commitData(editor_sending);//triggers model writing
        editor_size_changed(editor_sending);//messes up resizing because resize_fit pb with QRect for basic QLineEdit
    }

}

inline void GlvItemDelegate_base::item_changed_slot() {

    QWidget* editor_sending = dynamic_cast<QWidget*>(sender());

    if (editor_sending) {
        editor_size_changed(editor_sending);
    }

}

inline void GlvItemDelegate_base::editor_size_changed(QWidget* _editor) const {

    if (_editor) {

        _editor->adjustSize();//to refresh editor's size
        QRect rect = _editor->geometry();
        QSize offset = abstract_view->get_view_offset();
        QPoint point(offset.width(), offset.height());
        QRect rect2(_editor->geometry().topLeft() + point, _editor->geometry().bottomRight() + point);
        abstract_view->item_delegate_changed(rect2, current_index, false);

    } else {
        abstract_view->item_delegate_changed(QRect(), QModelIndex(), false);
    }

    abstract_view->emit_sizeChanged();

}

inline void GlvItemDelegate_base::set_dynamically_update_data(bool _l_dynamically_update_data) {

    l_dynamically_update_data = _l_dynamically_update_data;

}

inline bool GlvItemDelegate_base::is_dynamically_updating_data() const {

    return l_dynamically_update_data;

}

inline void GlvItemDelegate_base::value_changed_slot_dynamic_check() {

    if (l_dynamically_update_data) {
        value_changed_slot();
    }

}

inline void GlvItemDelegate_base::value_changed_slot() {

    QWidget* editor_sending = dynamic_cast<QWidget*>(sender());

    if (editor_sending) {
        emit commitData(editor_sending);//triggers model writing
    }

}

inline bool GlvItemDelegate_base::is_mismatch_type(const QModelIndex& _index) {
    
    return static_cast<const QStandardItemModel*>(_index.model())->itemFromIndex(_index)->flags() & glv::tdata::type_mismatch_flag;

}

inline GlvAbstractItemView::GlvAbstractItemView(QAbstractItemView* _item_view) {

    l_fixed_size = false;
    item_view = _item_view;

    max_size = QSize(400, 300);

    delegate_rect = QRect();
    delegate_index = QModelIndex();

    l_check_dummy = false;

}

inline GlvAbstractItemView::~GlvAbstractItemView() {

}

inline QAbstractItemView* GlvAbstractItemView::get_item_view() {

    return item_view;
}

inline void GlvAbstractItemView::set_max_size(const QSize& _max_size) {

    max_size = _max_size;
}

inline void GlvAbstractItemView::set_fixed_size(bool _l_fixed_size) {

    l_fixed_size = _l_fixed_size;
}

inline void GlvAbstractItemView::item_delegate_changed(const QRect& _delegate_rect, const QModelIndex& _delegate_index, bool l_emit) {

    resize_fit(_delegate_rect, _delegate_index, l_emit);
}

inline void GlvAbstractItemView::item_delegate_changed(bool l_emit) {

    resize_fit(l_emit);
}

inline QSize GlvAbstractItemView::get_size(const QSize& _table_size, const QSize& _max_size, bool& l_scrollbar_vertical_x, bool& l_scrollbar_horizontal_y) {

    QSize new_size;

    int table_size_x = _table_size.width();
    int table_size_y = _table_size.height();

    int base_Max_x = _max_size.width();
    int base_Max_y = _max_size.height();
    int Max_x;
    int Max_y;

    int scrollbar_width_x = QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);//is minored by 1 after a scrollbar is actually created, I don't know why
    int scrollbar_height_y = QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);

    //stands for widget size
    int basic_size_x = table_size_x + mini_offset_x();//adds a little offset so that a scrollbar doesn't appear if not needed
    int basic_size_y = table_size_y + mini_offset_y();

    Max_x = base_Max_x;
    Max_y = base_Max_y;

    int basic_remain_x = basic_size_x - Max_x;
    if (basic_size_x > Max_x) {
        basic_size_x = Max_x;
        l_scrollbar_horizontal_y = true;
    } else {
        l_scrollbar_horizontal_y = false;
    }

    int basic_remain_y = basic_size_y - Max_y;
    if (basic_size_y > Max_y) {
        basic_size_y = Max_y;
        l_scrollbar_vertical_x = true;
    } else {
        l_scrollbar_vertical_x = false;
    }

    if (l_scrollbar_vertical_x) {
        basic_size_x += std::min(scrollbar_width_x, std::max(-scrollbar_width_x, -basic_remain_x));
    }

    if (l_scrollbar_horizontal_y) {
        basic_size_y += std::min(scrollbar_height_y, std::max(-scrollbar_height_y, -basic_remain_y));
    }

    if (basic_size_x > Max_x) {
        slv::flag::ISSUE(slv::flag::Critical, "Max_x = ", Max_x, ", basic_size_x = ", basic_size_x);
    }
    if (basic_size_y > Max_y) {
        slv::flag::ISSUE(slv::flag::Critical, "Max_y = ", Max_y, ", basic_size_y = ", basic_size_y);
    }

    new_size.setWidth(basic_size_x);
    new_size.setHeight(basic_size_y);

    return new_size;
}

inline QSize GlvAbstractItemView::get_size_with_delegate(const QSize& _tab_size, const QRect& _delegate_geometry, bool _l_scrollbar_vertical_x, bool _l_scrollbar_horizontal_y) {

    QSize delegate_offset;

    QSize delegate_corner;

    delegate_corner = get_delegate_corner(_delegate_geometry);

    QSize view_offset = get_view_offset();

    int usable_x = _tab_size.width();
    int usable_y = _tab_size.height();

    if (_l_scrollbar_vertical_x) {
        usable_x -= QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);
    }

    if (_l_scrollbar_horizontal_y) {
        usable_y -= QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);
    }

    int offset_x = delegate_corner.width() - usable_x;
    int offset_y = delegate_corner.height() - usable_y;

    delegate_offset.setWidth(offset_x);
    delegate_offset.setHeight(offset_y);

    return delegate_offset;
}

inline QSize GlvAbstractItemView::new_size_after_delegate_if_still_needs_scrollbars(const QSize& _new_size, const bool _l_scrollbar_vertical_x, const bool _l_scrollbar_horizontal_y) {

    //if doesn't need scrollbar anymore, then crop size

    QSize new_size = _new_size;

#define set_scrollbar_mode_blocked 1//should be 1

#if set_scrollbar_mode_blocked==0

    if (_l_scrollbar_vertical_x) {
        if (_new_size.width() > horizontalHeader()->length() + verticalHeader()->width()) {

            new_size.setWidth(new_size.width() - QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent));
        }
    }

    if (_l_scrollbar_horizontal_y) {
        if (_new_size.height() > verticalHeader()->length() + horizontalHeader()->height()) {

            new_size.setHeight(new_size.height() - QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent));
        }
    }

#elif set_scrollbar_mode_blocked==1

    if (_l_scrollbar_vertical_x) {
        if (new_size.height() > get_total_size(false).height()) {
            new_size.setWidth(new_size.width() - QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent));
        }
    }

    if (_l_scrollbar_horizontal_y) {
        if (new_size.width() > get_total_size(false).width()) {
            new_size.setHeight(new_size.height() - QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent));
        }
    }

#else

    if (_l_scrollbar_vertical_x) {
        setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
    } else {
        setVerticalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    }
    if (_l_scrollbar_horizontal_y) {
        setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOn);
    } else {
        setHorizontalScrollBarPolicy(Qt::ScrollBarAsNeeded);
    }

#endif

    return new_size;
}

inline void GlvAbstractItemView::resize_fit(bool _l_emit) {

    resize_fit(delegate_rect, delegate_index, _l_emit);

}

inline void GlvAbstractItemView::resize_fit(const QModelIndex& _index, bool _l_emit) {

    resize_fit(_l_emit);
}

inline void GlvAbstractItemView::resize_fit(const QModelIndex& _index) {

    resize_fit(QRect(), QModelIndex(), true);
}

inline void GlvAbstractItemView::resize_fit(const QRect& _delegate_rect, const QModelIndex& _delegate_index, bool _l_emit) {

    delegate_rect = _delegate_rect;
    delegate_index = _delegate_index;

    //_rect comes from delegate's geometry
    //whole method is designed so setFixedSize is called only once (avoid glitches)

    if (!l_check_dummy) {
        l_check_dummy = true;
        QSize table_size;
        table_size = get_total_size(true);

        QSize new_size;
        bool l_scrollbar_vertical_x;
        bool l_scrollbar_horizontal_y;
        new_size = get_size(table_size, max_size, l_scrollbar_vertical_x, l_scrollbar_horizontal_y);

        QSize delegate_offset;
        bool l_remove_dummy_column = false;
        bool l_remove_dummy_row = false;

        if (_delegate_rect != QRect()) {

            delegate_offset = get_size_with_delegate(new_size, _delegate_rect, l_scrollbar_vertical_x, l_scrollbar_horizontal_y);

            if (delegate_offset.width() > 0) {

                int usable_size_x = new_size.width();
                if (l_scrollbar_vertical_x) {
                    usable_size_x -= QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);
                }
                l_remove_dummy_column = manage_dummy_column(delegate_offset.width(), usable_size_x, delegate_index);
                new_size.setWidth(new_size.width() + delegate_offset.width());
                if (!l_remove_dummy_column) {
                    new_size.setWidth(new_size.width() + mini_offset_with_delegate_x());
                }

            } else {

                l_remove_dummy_column = true;
            }

            if (delegate_offset.height() > 0) {

                int usable_size_y = new_size.height();
                if (l_scrollbar_horizontal_y) {
                    usable_size_y -= QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);
                }
                l_remove_dummy_row = manage_dummy_row(delegate_offset.height(), usable_size_y, delegate_index);
                new_size.setHeight(new_size.height() + delegate_offset.height());
                if (!l_remove_dummy_row) {
                    new_size.setHeight(new_size.height() + mini_offset_with_delegate_y());
                }
            } else {

                l_remove_dummy_row = true;
            }

            new_size = new_size_after_delegate_if_still_needs_scrollbars(new_size, l_scrollbar_vertical_x, l_scrollbar_horizontal_y);

        } else {

            l_remove_dummy_column = true;
            l_remove_dummy_row = true;
        }

        manage_dummy_remove(l_remove_dummy_row, l_remove_dummy_column);

        if (l_fixed_size) {
            item_view->setFixedSize(new_size);
        }

        item_view->repaint();

        l_check_dummy = false;
        if (_l_emit) {
            emit_sizeChanged();
        }

    } else {
        glv::flag::BREAK("GlvTableView::resize_fit is runned twice at the same time, can cause problem with dummy management", item_view);
    }

}

inline void GlvAbstractItemView::reset() {

    if (delegate_rect == QRect()) {
        item_view->reset();
    }

}

inline GlvTableView_base::GlvTableView_base(QWidget* _parent) :QTableView(_parent), GlvAbstractItemView(this) {

    setEditTriggers(QAbstractItemView::CurrentChanged);

    // Works but slow if large number of data //////////////////
    //horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);// Do not use QHeaderView::Stretch
    //verticalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);// Do not use QHeaderView::Stretch
    ////////////////////////////////////////////////////////////

    connect(this, SIGNAL(cell_changed(const std::vector<int>&)), this, SIGNAL(valueChanged(const std::vector<int>&)));

    l_dummy_column = false;
    l_dummy_row = false;

    horizontalHeader()->setMinimumSectionSize(0);
    verticalHeader()->setMinimumSectionSize(0);

}

inline GlvTableView_base::~GlvTableView_base() {

}

inline void GlvTableView_base::commitData(QWidget* _editor) {

    if (!is_dynamically_upating_data()) {
        GlvTableView_base* editor_view = dynamic_cast<GlvTableView_base*>(_editor);
        if (editor_view) {
            editor_view->commitData();
        }
    }
    QAbstractItemView::commitData(_editor);
}

inline void GlvTableView_base::commitData() {

    commitData(indexWidget(currentIndex()));

}

inline void GlvTableView_base::setModel(QAbstractItemModel* _model) {

    if (model()) {
        disconnect(model(), SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&)), this, SIGNAL(cell_changed()));
    }
    reset_dummies();
    QTableView::setModel(_model);
    connect(model(), SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&)), this, SLOT(cell_changed_slot(const QModelIndex&)));

    GlvAbstractItemView::resize_fit(true);

}

inline void GlvTableView_base::set_editable(bool _l_edit) {

    if (_l_edit) {
        setEditTriggers(edit_triggers);
    } else {
        setEditTriggers(QAbstractItemView::NoEditTriggers);
    }
}

inline void GlvTableView_base::setEditTriggers(QAbstractItemView::EditTriggers _triggers) {

    if (_triggers != QAbstractItemView::NoEditTriggers) {
        edit_triggers = _triggers;
    }

    QAbstractItemView::setEditTriggers(_triggers);

}

inline void GlvTableView_base::select(const QModelIndex& _index) const {

    selectionModel()->select(_index, QItemSelectionModel::SelectCurrent);
}

inline void GlvTableView_base::reset_dummies() {

    l_dummy_row = false;
    l_dummy_column = false;
}

inline void GlvTableView_base::emit_sizeChanged() {

    emit sizeChanged();

}

inline void GlvTableView_base::showEvent(QShowEvent* _event) {

    QTableView::showEvent(_event);
    repaint();
    GlvAbstractItemView::resize_fit(true);

}

inline void GlvTableView_base::resize_fit(const QModelIndex& _index) {

    GlvAbstractItemView::resize_fit(_index);

}

inline void GlvTableView_base::resize_fit(bool _l_emit) {

    GlvAbstractItemView::resize_fit(_l_emit);

}

inline bool GlvTableView_base::manage_dummy_column(int _delegate_offset_x, int _default_size_x, const QModelIndex& _delegate_index) {

    //MANAGE DUMMY

    bool l_remove_dummy_column;

    //first, checks if delegate_offset is higher than headerview's size, and therefore need to create a dummy
    int column_index;
    column_index = _delegate_index.column();

    int remaining_size = 0;
    for (int i = column_index + 1; i < model()->columnCount() - l_dummy_column; i++) {
        remaining_size += horizontalHeader()->sectionSize(i);
    }

    //remaining_space is the space left on the right between selected cell and end of widget (ie visible)
    int remaining_space_right = _default_size_x - (columnViewportPosition(column_index) + horizontalHeader()->sectionSize(column_index) + verticalHeader()->width());
    remaining_space_right -= get_view_offset().width();
    remaining_size -= remaining_space_right;

    if (horizontalHeader()->length() + verticalHeader()->width() + mini_offset_with_delegate_x() < _default_size_x) {
        if (remaining_size < 0) {
            remaining_size = 0;
        }
    }

    //if needed, creates a dummy
    if (_delegate_offset_x > remaining_size) {
        if (!l_dummy_column) {
            l_dummy_column = true;
            model()->blockSignals(true);
            model()->insertColumn(model()->columnCount());
            model()->blockSignals(false);
            dynamic_cast<QStandardItemModel*>(model())->setHorizontalHeaderItem(model()->columnCount() - 1, new QStandardItem(""));
            horizontalHeader()->setSectionResizeMode(model()->columnCount() - 1, QHeaderView::Fixed);
        }
        int dummy_offset = _delegate_offset_x - remaining_size;
        horizontalHeader()->resizeSection(model()->columnCount() - 1, dummy_offset);
        l_remove_dummy_column = false;

    } else {
        l_remove_dummy_column = true;
    }

    return l_remove_dummy_column;

}

inline bool GlvTableView_base::manage_dummy_row(int _delegate_offset_y, int _default_size_y, const QModelIndex& _delegate_index) {

    bool l_remove_dummy_row;

    //first, checks if delegate_offset is higher than headerview's size, and therefore need to create a dummy
    int row_index;
    row_index = _delegate_index.row();

    int remaining_size = 0;
    for (int i = row_index + 1; i < model()->rowCount() - l_dummy_row; i++) {
        remaining_size += verticalHeader()->sectionSize(i);
    }

    //remaining_space is the space left on bottom between selected cell and end of widget (ie visible)
    int remaining_space_bottom = _default_size_y - (rowViewportPosition(row_index) + verticalHeader()->sectionSize(row_index) + horizontalHeader()->height());
    remaining_space_bottom -= get_view_offset().height();
    remaining_size -= remaining_space_bottom;

    if (verticalHeader()->length() + horizontalHeader()->height() + mini_offset_with_delegate_y() < _default_size_y) {
        if (remaining_size < 0) {
            remaining_size = 0;
        }
    }

    //if needed, creates a dummy
    if (_delegate_offset_y > remaining_size) {
        if (!l_dummy_row) {
            l_dummy_row = true;
            model()->blockSignals(true);
            model()->insertRow(model()->rowCount());
            model()->blockSignals(false);
            dynamic_cast<QStandardItemModel*>(model())->setVerticalHeaderItem(model()->rowCount() - 1, new QStandardItem(""));
            verticalHeader()->setSectionResizeMode(model()->rowCount() - 1, QHeaderView::Fixed);
        }
        int dummy_offset = _delegate_offset_y - remaining_size;
        verticalHeader()->resizeSection(model()->rowCount() - 1, dummy_offset);

        l_remove_dummy_row = false;

    } else {
        l_remove_dummy_row = true;
    }

    return l_remove_dummy_row;

}

inline void GlvTableView_base::manage_dummy_remove(bool l_remove_dummy_row, bool l_remove_dummy_column) {

    //TRIGGERS RESIZE EVENT, THUS GlvWidget_base::sizeChanged() signal is GlvTableView is inside a GlvWidgetData which is inside a GlvWidget
    if (l_remove_dummy_column) {
        if (l_dummy_column) {
            l_dummy_column = false;
            // Provided this table_view contains an item delegate opened, triggers updateEditorGeometry in GlvItemDelegate if editor is opened.*/
            model()->removeColumn(model()->columnCount() - 1);
            // Triggers GlvItemDelegate::destroyEditor, which can cause loop back here in this function
        } else {
            //slv::flag::ISSUE(slv::flag::Critical, "Should not remove dummy_column, when there is none");
        }
    }

    if (l_remove_dummy_row) {
        if (l_dummy_row) {
            l_dummy_row = false;
            // Provided this table_view contains an item delegate opened, triggers updateEditorGeometry in GlvItemDelegate if editor is opened
            model()->removeRow(model()->rowCount() - 1);
        } else {
            //slv::flag::ISSUE(slv::flag::Critical, "Should not remove dummy_row, when there is none");
        }
    }

}

inline QSize GlvTableView_base::get_total_size(bool _l_manage_dummy) const {

    QSize total_size;

    total_size.setWidth(horizontalHeader()->length() + verticalHeader()->sizeHint().width());//why sizeHint ??
    total_size.setHeight(verticalHeader()->length() + horizontalHeader()->sizeHint().height());

    if (_l_manage_dummy) {
        //if there are dummy column or row, need to remove their size to compute real table_size
        if (l_dummy_column) {
            total_size.setWidth(total_size.width() - horizontalHeader()->sectionSize(model()->columnCount() - 1));
        }
        if (l_dummy_row) {
            total_size.setHeight(total_size.height() - verticalHeader()->sectionSize(model()->rowCount() - 1));
        }
    }

    return total_size;
}

inline QSize GlvTableView_base::get_delegate_corner(const QRect& _delegate_rect) const {

    QSize delegate_corner;

    int delegate_corner_x = _delegate_rect.x() + _delegate_rect.width() + verticalHeader()->sizeHint().width();
    int delegate_corner_y = _delegate_rect.y() + _delegate_rect.height() + horizontalHeader()->sizeHint().height();
    delegate_corner.setWidth(delegate_corner_x);
    delegate_corner.setHeight(delegate_corner_y);

    return delegate_corner;

}

inline QSize GlvTableView_base::get_view_offset() {

    return QSize(QTableView::horizontalOffset(), QTableView::verticalOffset());

}

inline GlvTreeView_base::GlvTreeView_base(QWidget* _parent) :QTreeView(_parent), GlvAbstractItemView(this) {

    setHeaderHidden(true);

    delegate_rect = QRect();

    connect(this, SIGNAL(cell_changed()), this, SIGNAL(valueChanged()));
}

inline GlvTreeView_base::~GlvTreeView_base() {

}

inline void GlvTreeView_base::setModel(QAbstractItemModel* _model) {

    if (model()) {
        disconnect(model(), SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&)), this, SIGNAL(cell_changed()));
    }
    QTreeView::setModel(_model);
    connect(model(), SIGNAL(dataChanged(const QModelIndex&, const QModelIndex&)), this, SIGNAL(cell_changed()));

    resize_fit(true);
}

inline void GlvTreeView_base::select(const QModelIndex& _index) const {

}

inline void GlvTreeView_base::emit_sizeChanged() {

    emit sizeChanged();
}

inline void GlvTreeView_base::resize_fit(bool l_emit) {

    GlvAbstractItemView::resize_fit(l_emit);
}

inline void GlvTreeView_base::resize_fit(const QModelIndex& _index) {

    GlvAbstractItemView::resize_fit(_index);
}

inline QSize GlvTreeView_base::get_total_size(bool l_manage_dummy) const {

    QSize total_size;

    total_size.setWidth(300);
    total_size.setHeight(300);

    return total_size;
}

inline QSize GlvTreeView_base::get_delegate_corner(const QRect& _delegate_rect) const {

    QSize delegate_corner;

    int delegate_corner_x = _delegate_rect.x() + _delegate_rect.width();
    int delegate_corner_y = _delegate_rect.y() + _delegate_rect.height();
    delegate_corner.setWidth(delegate_corner_x);
    delegate_corner.setHeight(delegate_corner_y);

    return delegate_corner;
}

inline bool GlvTreeView_base::manage_dummy_column(int _delegate_offset_x, int _default_size_x, const QModelIndex& _delegate_index) {

    return true;
}

inline bool GlvTreeView_base::manage_dummy_row(int _delegate_offset_y, int _default_size_y, const QModelIndex& _delegate_index) {

    return true;
}

inline void GlvTreeView_base::manage_dummy_remove(bool l_remove_dummy_row, bool l_remove_dummy_column) {

}

inline QSize GlvTreeView_base::get_view_offset() {

    return QSize(QTreeView::horizontalOffset(), QTreeView::verticalOffset());

}

inline GlvParametrizationDialog_base::GlvParametrizationDialog_base(bool _l_dialog, bool _l_deny_invalid_parameters, QWidget* _parent) :QDialog(_parent, Qt::WindowContextHelpButtonHint | Qt::WindowCloseButtonHint) {

    if (_parent) this->setModal(true);
    //setWindowFlags(Qt::Dialog);
    //setWindowModality(Qt::ApplicationModal);

    l_dialog = _l_dialog;
    l_deny_invalid_parameters =_l_deny_invalid_parameters;
    parametrization_base = NULL;

    // To avoid sending message "setGeometry: Unable to set geometry"
    setMinimumSize(10, 10);

    m_layout = new QVBoxLayout;
    m_layout->setSizeConstraint(QLayout::SetMinimumSize);

    if (l_dialog) {
        button_box = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
        connect(button_box, SIGNAL(accepted()), this, SLOT(accept()));
        connect(button_box, SIGNAL(rejected()), this, SLOT(reject()));

        abide_rules_button = button_box->addButton(tr("Abide rules"), QDialogButtonBox::ButtonRole::ApplyRole);
        connect(abide_rules_button, SIGNAL(clicked(bool)), this, SLOT(abide_slot()));

        connect(this, SIGNAL(parametrizationChanged(std::string)), this, SLOT(check_parameters_slot()));

        m_layout->addWidget(button_box);
    } else {
        button_box = NULL;
        abide_rules_button = NULL;
    }

    this->setLayout(m_layout);
}

inline GlvParametrizationDialog_base::~GlvParametrizationDialog_base() {

    delete parametrization_base;

}

inline void GlvParametrizationDialog_base::enable_abide_rules_button(bool _l_enable) {

    if (abide_rules_button) {
        if (_l_enable) {
            abide_rules_button->show();
        } else {
            abide_rules_button->hide();
        }
    }

}

inline void GlvParametrizationDialog_base::set_parameters_widget_base(GlvParametersWidget_base* _parameters_widget_base) {

    parameters_widget_base = _parameters_widget_base;
    connect(parameters_widget_base, SIGNAL(heightChanged()), this, SLOT(maximum_height_slot()));

}

inline void GlvParametrizationDialog_base::parametrizationChanged_slot(std::string _parameter_name) {
    emit parametrizationChanged(_parameter_name);
}

inline const SlvParametrization_base* GlvParametrizationDialog_base::get_parametrization_base() const {

    return parametrization_base;

}

inline void GlvParametrizationDialog_base::addWidget(QWidget* _widget) {
    m_layout->insertWidget(m_layout->count() - 1, _widget);
}

inline void GlvParametrizationDialog_base::abide_slot() {

    bool l_abide_rules = abide_rules();

    if (!l_abide_rules) {
        QMessageBox::warning(this, tr("Abide rules"), tr("Rules have been abided."));
    }

}

inline void GlvParametrizationDialog_base::check_parameters_slot() {

    if (l_dialog && has_rules()) {
        const SlvParametrization_base* parametrization_tmp = new_parametrization_base();
        SlvStatus status = parametrization_tmp->check_parameters();
        if (status) {
            abide_rules_button->setEnabled(false);
            abide_rules_button->setToolTip(tr("Abide rules of each parameter (exceptions, dependencies..)\nDisabled if the parameterization complies with the rules."));
        } else {
            abide_rules_button->setEnabled(true);
            abide_rules_button->setToolTip(glv::toQString(status.get_message()));
        }

        delete parametrization_tmp;
    }
    
}

inline void GlvParametrizationDialog_base::resizeEvent(QResizeEvent* _event) {

    if (parameters_widget_base->is_fully_visible() && !parameters_widget_base->has_height_decreased()) {

        int height = parameters_widget_base->size().height();
        height += button_box->size().height();
        height += this->layout()->contentsMargins().top() + this->layout()->contentsMargins().bottom();
        height += m_layout->spacing();
        setMaximumHeight(height);

    }
}

inline void GlvParametrizationDialog_base::maximum_height_slot() {

    if (!parameters_widget_base->is_fully_visible()) {
        setMaximumHeight(QWIDGETSIZE_MAX);
    }

}

inline glvm_staticVariable_impl(const, int, GlvParametersWidget_base, layout_margin, QApplication::style()->pixelMetric(QStyle::PM_LayoutLeftMargin));

class GlvParametersWidget_base::ScrollArea : public QScrollArea {
public:
	bool eventFilter(QObject* object, QEvent* event) {
		if (object == widget() && event->type() == QEvent::Resize) {

			int min_width = widget()->sizeHint().width();
			int max_width = QGuiApplication::primaryScreen()->geometry().width() - 100;
			if (min_width > max_width) {
				min_width = max_width;
			}
			if (widget()->size().height() > QScrollArea::size().height()) {
				min_width += QApplication::style()->pixelMetric(QStyle::PM_ScrollBarExtent);
			}
			QScrollArea::setMinimumWidth(min_width);
		}
		return false;
	}
	bool is_expanded_vertically() const {
		return widget()->size().height() > QScrollArea::size().height();
	}
};

inline GlvParametersWidget_base::GlvParametersWidget_base() {

	main_layout = new QVBoxLayout;
	main_layout->setContentsMargins(layout_margin(), layout_margin(), 0, layout_margin());
	this->setLayout(main_layout);

	parameters_widget = new QWidget;
	parameters_widget->installEventFilter(this);
	vertical_layout = new QVBoxLayout;
	parameters_widget->setLayout(vertical_layout);
	parameters_widget->setSizePolicy(QSizePolicy::Preferred, QSizePolicy::Maximum);//here

	l_scrollable = false;
	scroll_area = NULL;
	main_layout->addWidget(parameters_widget);

	set_scrollable(true);

	l_height_decreased = false;
	l_adapt_max_height = false;

	save_load_widget = NULL;
}

inline GlvParametersWidget_base::~GlvParametersWidget_base() {

}

inline void GlvParametersWidget_base::set_layout_vertical() {

	set_layout_type(LayoutType::Vertical);

}

inline void GlvParametersWidget_base::set_layout_grid() {

	set_layout_type(LayoutType::Grid);

}

inline bool GlvParametersWidget_base::is_fully_visible() const {

	return !l_scrollable || !scroll_area->is_expanded_vertically();

}

inline void GlvParametersWidget_base::set_save_load_widget(GlvWidgetSaveLoad_base* _save_load_widget) {

	save_load_widget = _save_load_widget;
	if (save_load_widget) {
		save_load_widget->layout()->setContentsMargins(0, 0, layout_margin() - QApplication::style()->pixelMetric(QStyle::QStyle::PM_DefaultFrameWidth), 0);
		main_layout->addWidget(save_load_widget, 0, Qt::AlignRight | Qt::AlignBottom);
	}

}

inline void GlvParametersWidget_base::set_layout_type_protected(LayoutType _layout_type) {

	bool l_update_layout = false;
	if (layout_type != _layout_type) {
		l_update_layout = true;
	}
	layout_type = _layout_type;

	if (l_update_layout) {
		delete parameters_widget->layout();
		if (layout_type == LayoutType::Vertical) {
			vertical_layout = new QVBoxLayout;
			parameters_widget->setLayout(vertical_layout);
		} else if (layout_type == LayoutType::Grid) {
			grid_layout = new QGridLayout;
			grid_layout->setContentsMargins(0, 0, layout_margin(), 0);
			grid_layout->setHorizontalSpacing(grid_horizontal_spacing());
			parameters_widget->setLayout(grid_layout);
		}
	}

}

inline void GlvParametersWidget_base::add_parameter_widget_to_vertical_layout(QWidget* _parameter_widget) {

	vertical_layout->addWidget(_parameter_widget);

}

inline void GlvParametersWidget_base::add_parameter_widget_to_grid_layout(QWidget* _dataname_label, QWidget* _data_widget, QWidget* _optional_text_label, int i) {

	if (_dataname_label) {
		grid_layout->addWidget(_dataname_label, i, 0);
	}
	grid_layout->addWidget(_data_widget, i, 1);
	if (_optional_text_label) {
		grid_layout->addWidget(_optional_text_label, i, 2);
	}

}

inline void GlvParametersWidget_base::set_checkable_collapse(bool _l_checkable) {

	if (_l_checkable) {
		QGroupBox::setCheckable(true);
		connect(this, SIGNAL(toggled(bool)), this, SLOT(show_parameters(bool)));
		setChecked(false);
		this->setToolTip(tr("Show/hide nested parameters"));
	} else {
		setChecked(true);
		disconnect(this, SIGNAL(toggled(bool)));
		QGroupBox::setCheckable(false);
		this->setToolTip(tr(""));
	}
	

}

inline void GlvParametersWidget_base::set_scrollable(bool _l_scrollable) {

	if (!_l_scrollable && l_scrollable) {

		main_layout->insertWidget(0, parameters_widget);
		delete scroll_area;
		scroll_area = NULL;

	} else if (_l_scrollable && !l_scrollable) {

		scroll_area = new ScrollArea;
		scroll_area->setWidgetResizable(true);
		scroll_area->setWidget(parameters_widget);
		scroll_area->setFrameShape(QFrame::NoFrame);
		main_layout->addWidget(scroll_area, 0);

	}

	l_scrollable = _l_scrollable;

}

inline void GlvParametersWidget_base::set_adapt_max_height(bool _l_adapt) {

	l_adapt_max_height = _l_adapt;

}

inline void GlvParametersWidget_base::show_parameters(bool _l_show) {

	parameters_widget->setVisible(_l_show);

	if (save_load_widget) {
		save_load_widget->setVisible(_l_show);
	}

}

inline bool GlvParametersWidget_base::has_height_decreased() const {

	return l_height_decreased;

}

inline bool GlvParametersWidget_base::eventFilter(QObject* object, QEvent* _event) {

	if (object == parameters_widget && _event->type() == QEvent::Resize) {

		QResizeEvent* resize_event = dynamic_cast<QResizeEvent*>(_event);
		if (resize_event->size().height() < resize_event->oldSize().height()) {
			l_height_decreased = true;
			emit heightChanged();
		} else if (resize_event->size().height() > resize_event->oldSize().height()) {
			l_height_decreased = false;
			emit heightChanged();
		} else if (l_adapt_max_height) {
			l_height_decreased = false;
		}

	}
	return false;

}

inline bool glv::flag::showQMessageBox(const SlvStatus& _status, bool _l_show_all, QWidget* _parent) {

	return showQMessageBox("", _status, _l_show_all, _parent);
}

inline bool glv::flag::showQMessageBox(const QString& _message, const SlvStatus& _status, bool _l_show_all, QWidget* _parent) {

	QString message;
	if (_status.get_type() != SlvStatus::statusType::ok) {
		if (!_message.isEmpty()) {
			message = _message;
			message += "\n";
		}
		message += glv::toQString(_status.to_string(_l_show_all));
	}

	QMessageBox::StandardButton button = QMessageBox::StandardButton::NoButton;
	if (_status.get_type() == SlvStatus::statusType::information) {
		button = QMessageBox::information(_parent, "", message);
	} else if (_status.get_type() == SlvStatus::statusType::warning) {
		button = QMessageBox::warning(_parent, "", message);
	} else if (_status.get_type() == SlvStatus::statusType::critical) {
		button = QMessageBox::critical(_parent, "", message);
	}

	return (button == QMessageBox::StandardButton::Ok);
}

inline void glv::flag::BREAK(std::string warning_message, QWidget* _parent) {

	showQMessageBox(SlvStatus(SlvStatus::statusType::critical, warning_message), false, _parent);
	slv::flag::ISSUE(slv::flag::Critical, warning_message);

}

inline void glv::flag::INFO(std::string warning_message, QWidget* _parent) {

	showQMessageBox(SlvStatus(SlvStatus::statusType::information, warning_message), false, _parent);

}

inline GlvProgressMgr::GlvProgressMgr(QWidget* _parent) :QWidget(_parent) {

    m_layout = new QVBoxLayout;
    this->setLayout(m_layout);
    m_layout->setSpacing(0);
    m_layout->setContentsMargins(0, 0, 0, 0);
    m_layout->setAlignment(Qt::AlignTop);

    // Add dummy widget so that when all progressions are being removed, GlvProgressMgr instance is not empty and does not send message "setGeometry: Unable to set geometry"
    QWidget* widget = new QWidget;
    widget->setFixedHeight(2);
    m_layout->addWidget(widget, 0, Qt::AlignTop);

    l_close = false;
}

inline GlvProgressMgr::~GlvProgressMgr() {

}

inline GlvProgression* GlvProgressMgr::add_progression(SlvProgressionQt* _progression, bool _l_hide_when_over) {

    unsigned int i = 0;
    while (i < progressions.size() && _progression != progressions[i]->get_progression()) {
        i++;
    }

    if (i == progressions.size()) {

        GlvProgression* progression = new GlvProgression(this, _progression, _l_hide_when_over, false);
        progression->setMinimumDuration(0);
        m_layout->addWidget(progression, 0, Qt::AlignTop);
        progressions.push_back(progression);
        if (!progression->is_showable()) {
            progression->hide();
        }
        
        connect(_progression, SIGNAL(ended()), this, SLOT(check_close()));

        return progression;

    } else {

        std::cout << "_progression already exists" << std::endl;
        return progressions[i];

    }

}

inline void GlvProgressMgr::clear() {

    for (unsigned int i = 0; i < progressions.size(); i++) {
        delete progressions[i];
    }
    progressions.clear();
}

inline void GlvProgressMgr::remove_progression(GlvProgression* _progression) {

    unsigned int i = 0;
    while (i < progressions.size() && _progression != progressions[i]) {
        i++;
    }

    if (i < progressions.size()) {

        glv::widget::remove_widget(m_layout, progressions[i]);
        progressions.erase(progressions.begin() + i);

    } else {
        std::cout << "This progression index doesn't exist" << std::endl;
    }

}

inline void GlvProgressMgr::closeEvent(QCloseEvent* _event) {

    cancel();
    l_close = true;

    if (is_over()) {
        QWidget::closeEvent(_event);
    } else {
        _event->ignore();
    }

}

inline bool GlvProgressMgr::is_over() const {

    bool l_over = true;
    for (std::vector<GlvProgression*>::const_iterator it = progressions.begin(); it != progressions.end(); ++it) {
        if (!(*it)->is_over()) {
            l_over = false;
        }
    }

    return l_over;
}

inline void GlvProgressMgr::check_close() {

    if (l_close && is_over()) {
        close();
    }

}

inline void GlvProgressMgr::cancel() {

    for (std::vector<GlvProgression*>::const_iterator it = progressions.begin(); it != progressions.end(); ++it) {

        (*it)->cancel();

    }

}

inline void GlvProgressMgr::paintEvent(QPaintEvent* _event) {

    int count = 0;
    GlvProgression* hint = NULL;
    int max_width = 0;
    for (int i = 0; i < progressions.size(); i++) {
        if (!progressions[i]->is_showable()) {
            progressions[i]->hide();
        } else if (progressions[i]->isVisible()) {
            count++;
            hint = progressions[i];
            if (progressions[i]->sizeHint().width() > max_width) {
                max_width = progressions[i]->sizeHint().width();
            }
        }
    }

    if (count > 0) {
        int height = hint->sizeHint().height() * count;
        height += layout()->spacing() * (count - 1);
        height += contentsMargins().top() + contentsMargins().bottom();
        height += layout()->itemAt(0)->widget()->height();
        setFixedHeight(height);
        if (minimumWidth() != maximumWidth()) {// If fixed width is not set
            setMinimumWidth(max_width);
        }
    }

}

inline GlvStatusMgr::GlvStatusMgr() {

	connect(this, SIGNAL(display()), this, SLOT(show_status()));

	l_continue = true;

}

inline GlvStatusMgr::~GlvStatusMgr() {

}

inline void GlvStatusMgr::clear() {

	statuses.clear();

}

inline void GlvStatusMgr::add(const SlvStatus* _status) {

	if (!slv::vector::find(_status, statuses)) {

		statuses.push_back(_status);

	}

}

inline void GlvStatusMgr::set_frozen() {

	l_continue = false;

}

inline bool  GlvStatusMgr::proceeed() const {

	return l_continue;

}

inline void GlvStatusMgr::show_status() {

	bool l_ok = true;
	for (std::vector<const SlvStatus*>::const_iterator it = statuses.begin(); it != statuses.end(); ++it) {
		l_ok &= glv::flag::showQMessageBox(**it, true);
	}

	l_continue = l_ok;
}

inline glvm_staticVariable_impl(, SlvPoolFactory<SlvProgressionQt COMMA slv::lbl::Name>, GlvApp, progressions, {});

inline SlvProgressionQt* GlvApp::get_progression(const slv::lbl::Name& _name) {

	return progressions().get(_name);;

}

inline void GlvApp::show(const SlvStatus& _status, bool _l_wait) {

	status() = _status;

	if (status_mgr()) {

		/*! Check if a QApplication was instantiated. So that method can still be used even if GLOVE_APP is not used.*/
		QApplication* application = qobject_cast<QApplication*>(QCoreApplication::instance());
		if (application) {
			// Freeze status mgr in this thread. Too slow to freeze in slot connected to display otherwise.
			if (_l_wait) {
				status_mgr()->set_frozen();
			}
			status_mgr()->display();
		}

		while (!status_mgr()->proceeed()) {}

	}

}

inline GlvListDialog_base::GlvListDialog_base(QWidget* _parent, bool _l_dialog) :QDialog(_parent) {

    if (_parent) this->setModal(true);

    l_dialog = _l_dialog;

    layout = new QVBoxLayout;

    QWidget* configuration_widget = new QWidget();
    list_layout = new QGridLayout();
    list_layout->setContentsMargins(0, 0, 0, 0);

    text_widget = NULL;

    list_name_widget = new QLabel;
    list_layout->addWidget(list_name_widget, 1, 0);

    combo_list = new QComboBox;;
    list_layout->addWidget(combo_list, 2, 0);

    configuration_widget->setLayout(list_layout);

    layout->addWidget(configuration_widget);

    if (l_dialog) {
        button_box = new QDialogButtonBox(QDialogButtonBox::Ok | QDialogButtonBox::Cancel);
        connect(button_box, SIGNAL(accepted()), this, SLOT(accept()));
        connect(button_box, SIGNAL(rejected()), this, SLOT(reject()));
        layout->addWidget(button_box);
    }

    this->setLayout(layout);
}

inline GlvListDialog_base::~GlvListDialog_base() {

}

inline void GlvListDialog_base::addWidget(QWidget* _widget) {
    layout->insertWidget(layout->count() - l_dialog, _widget);
}

inline std::string GlvListDialog_base::get_currentText() {

    return combo_list->currentText().toStdString();
}

inline bool GlvListDialog_base::set_currentText(const std::string& _name) {

    int index = combo_list->findText(glv::toQString(_name));
    combo_list->setCurrentIndex(index);

    return (index != -1);
}

inline void GlvListDialog_base::enable_combo_items() {

    for (int i = 0; i < combo_list->count(); i++) {
        qobject_cast<QStandardItemModel*>(combo_list->model())->item(i)->setEnabled(true);
    }

}

inline void GlvListDialog_base::set_text(const QString& _text) {

    if (!text_widget) {
        text_widget = new QLabel;
        list_layout->addWidget(text_widget, 0, 0);
    }

    text_widget->setText(_text);

}

inline void GlvListDialog_base::accept() {

    if (l_dialog) QDialog::accept();

}

inline void GlvListDialog_base::reject() {

    if (l_dialog) QDialog::reject();

}

inline void GlvListDialog_base::setOkButtonEnabled(bool _l_enable) {

    button_box->button(QDialogButtonBox::Ok)->setEnabled(_l_enable);

}

inline GlvListDialog::GlvListDialog(const std::vector<std::string>& _names, const std::string _list_name, QWidget* _parent, bool _l_dialog) :GlvListDialog_base(_parent, _l_dialog) {

    list_name_widget->setText(glv::toQString(_list_name + " :"));
    glv::toQComboBox(combo_list, _names);

}

inline GlvListDialog::~GlvListDialog() {

}

inline void GlvParamListDialog_Filtering::update_current_item(QComboBox* _combo_list) {

    int i = 0;
    while (i < _combo_list->count() && !qobject_cast<QStandardItemModel*>(_combo_list->model())->item(i)->isEnabled()) {
        i++;
    }

    if (i < _combo_list->count()) {
        _combo_list->setCurrentIndex(i);
    } else {
        //all items are deactivated
    }

}

inline GlvParamListDialog_base::GlvParamListDialog_base(const std::vector<std::string>& _names, const std::string _list_name, QWidget* _parent, bool _l_dialog, bool _l_visible_config) :\
GlvListDialog(_names, _list_name, _parent, _l_dialog) {

	l_visible_config = _l_visible_config;

	parametrization_dialog = NULL;

	if (l_visible_config) {
		QPushButton* configure_button = new QPushButton(QString(tr("Configure")));
		configure_button->setMinimumHeight(23);
		list_layout->addWidget(configure_button, 2, 1);

		connect(configure_button, SIGNAL(clicked()), this, SLOT(make_parametrization_dialog()));
	} else {
		//auto open config when combo selection changes
		connect(combo_list, SIGNAL(currentIndexChanged(const QString&)), this, SLOT(make_parametrization_dialog(const QString&)));
	}
}

inline GlvParamListDialog_base::~GlvParamListDialog_base() {
	if (parametrization_dialog) {
		delete parametrization_dialog;
	}
}

inline void GlvParamListDialog_base::delete_parametrization_dialog() {

	if (parametrization_dialog) {
		delete parametrization_dialog;
		parametrization_dialog = NULL;
	}

}

inline GlvParametrizationDialog_base* GlvParamListDialog_base::get_parametrization_dialog_base() {

	return parametrization_dialog;

}

inline const SlvParametrization_base* GlvParamListDialog_base::get_parametrization_base() const {

	if (parametrization_dialog) {
		return parametrization_dialog->get_parametrization_base();
	} else {
		// Reasons can be : List wasn't accepted, or Tlist is empty
		return NULL;
	}

}

#endif

#if __cplusplus > 201402L

template <>
inline bool slv::rw::readB<std::filesystem::path>(std::filesystem::path& _dat, std::ifstream& _input_file) {
    
    std::string path_str;
    bool l_read = slv::rw::readB(path_str, _input_file);
    if (l_read) _dat = path_str;

    return l_read;
}

template <>
inline void slv::rw::writeB<std::filesystem::path>(const std::filesystem::path& _dat, std::ofstream& _output_file) {
    
    slv::rw::writeB(_dat.generic_string(), _output_file);

}

#endif

#ifndef GLOVE_DISABLE_QT

//specialized with double because "Function template partial specialization is not allowed.."
template <>
inline void slv::rw::writeB<QModelIndex>(const QModelIndex& _index, std::ofstream& _output_file) {

    slv::flag::WIP();
}

template <>
inline bool slv::rw::readB<QModelIndex>(QModelIndex& _index, std::ifstream& _input_file) {

    slv::flag::WIP();
    return false;
}

//specialized with double because "Function template partial specialization is not allowed ..."
template <>
inline void slv::rw::writeB< QVector<double> >(const QVector<double>& _vector, std::ofstream& _output_file) {

    slv::rw::writeB(std::vector<double>(_vector.begin(), _vector.end()), _output_file);
}

template <>
inline bool slv::rw::readB< QVector<double> >(QVector<double>& _vector, std::ifstream& _input_file) {

    std::vector<double> _std_vector;
    bool l_read = slv::rw::readB(_std_vector, _input_file);
    _vector = QVector<double>(_std_vector.begin(), _std_vector.end());
    return l_read;

}

#endif

//const std::string end_of_file_str() = "end of file";

template <>
inline bool slv::rw::readB<int>(int* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(int));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<unsigned int>(unsigned int* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(unsigned int));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<long unsigned int>(long unsigned int* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(long unsigned int));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<unsigned long long>(unsigned long long* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(unsigned long long));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<float>(float* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(float));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<double>(double* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(double));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<bool>(bool* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(bool));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

template <>
inline bool slv::rw::readB<char>(char* _dat, std::ifstream& _input_file) {
    if (!_input_file.eof()) {
        _input_file.read((char*)&(*_dat), sizeof(char));
        return true;
    } else {
        slv::flag::ISSUE(slv::flag::EndOfFile, end_of_file_str());
        return false;
    }
}

#ifndef GLOVE_DISABLE_QT

inline GlvProgression::GlvProgression(GlvProgressMgr* _progress_mgr, SlvProgressionQt* _progression, bool _l_auto_hide, bool _l_show_before_start, QWidget* _parent) :QProgressDialog(_parent), l_auto_hide(_l_auto_hide), l_show_before_start(_l_show_before_start) {
    
    setValue(0);
    setMaximum(100);

    l_has_started = false;
    l_cancel_requested = false;

    progress_mgr = _progress_mgr;

    QProgressDialog::setAutoReset(false);
    QProgressDialog::setAutoClose(false);

    progression = NULL;
    set_progression(_progression);

    cancel_button = new QPushButton(tr("Cancel"));
    QProgressDialog::setCancelButton(cancel_button);
    cancel_button->setEnabled(false);

    setSizePolicy(QSizePolicy::Policy::MinimumExpanding, QSizePolicy::Policy::MinimumExpanding);

}

inline GlvProgression::~GlvProgression() {

}

inline void GlvProgression::set_progression(SlvProgressionQt* _progression) {

    if (_progression) {

        if (progression) {
#if OPTION_ENABLE_SLV_QT_PROGRESS==1
            progression->disconnect();
#endif
        }

        QProgressDialog::setLabelText(glv::toQString(_progression->get_name()));

        progression = _progression;

#if OPTION_ENABLE_SLV_QT_PROGRESS==1
        connect(progression, SIGNAL(started()), this, SLOT(start()));
        // thread safe. In case executed slot doesn't have time to go through.
        connect(progression, SIGNAL(updated(int)), this, SLOT(setValue(int)), Qt::BlockingQueuedConnection);
        connect(progression, SIGNAL(ended()), this, SLOT(end()));
        connect(progression, SIGNAL(finished()), this, SLOT(final()));
#endif

    }

}

inline const SlvProgressionQt* GlvProgression::get_progression() const {

    return progression;
}

inline bool GlvProgression::is_showable() const {

    return l_has_started || l_show_before_start;

}

inline bool GlvProgression::is_over() const {

    return progression->is_over();
}

inline void GlvProgression::start() {

    QProgressDialog::reset();//to reset wasCanceled
    setValue(0);

    l_has_started = true;

    std::string text = progression->get_name();
    if (!text.empty() && !progression->get_message().empty()) {
        text += " : ";
    }
    // Update QProgressDialog::text with message.
    text += progression->get_message();

    QProgressDialog::setLabelText(glv::toQString(text));

    if (progression->has_iterator_ptr() || progression->is_iterating()) {
        cancel_button->setEnabled(true);
        setMaximum(100);
        connect(this, SIGNAL(canceled()), this, SLOT(cancel()), Qt::ConnectionType::UniqueConnection);
    } else {
        cancel_button->hide();
        setMaximum(0);
        findChild<QProgressBar*>()->setTextVisible(false);
        disconnect(this, SIGNAL(canceled()), this, SLOT(cancel()));
    }

    show();
}

inline void GlvProgression::end() {

    if (!QProgressDialog::wasCanceled() && l_cancel_requested) {
        QProgressDialog::cancel();
        l_cancel_requested = false;
    }

    if (l_auto_hide) {
        hide();
    }

}

inline void GlvProgression::final() {

    progress_mgr->remove_progression(this);

}

inline void GlvProgression::cancel() {

    // Since QProgressDialog::cancel() is not virtual, QProgressDialog::canceled() signal will trigger both QProgressDialog::cancel() and GlvProgression::cancel()
    if (!QProgressDialog::wasCanceled()) {
        if (progression->is_cancelable()) {// if control on progress is possible
            QProgressDialog::cancel();
            end();
        } else {
            l_cancel_requested = true;
        }
    }
    
    progression->cancel();

}

inline QTreeView* glv::view::toQTreeView(QStandardItemModel* _model) {

	QTreeView* view = new QTreeView;
	view->setEditTriggers(QAbstractItemView::NoEditTriggers);
	view->setModel(_model);
	return view;
}

namespace glv {
	namespace view {
		namespace {
			void get_tree_expansions(QTreeView* _tree_view, QModelIndex _index, Ttree_expansions& _expansions, const std::vector<unsigned int>& _expansion_element) {

				QAbstractItemModel* model = _tree_view->model();
				if (_index.model() == model && model) {

					std::vector<unsigned int> expansion_element;
					for (int i = 0; i < model->rowCount(_index); i++) {

						expansion_element = _expansion_element;
						expansion_element.push_back(i);

						get_tree_expansions(_tree_view, model->index(i, 0, _index), _expansions, expansion_element);

						if (_tree_view->isExpanded(model->index(i, 0, _index))) {

							_expansions.push_back(expansion_element);
						}
					}
				}

			}

		}
	}
}

inline glv::view::Ttree_expansions glv::view::get_tree_expansions(QTreeView* _tree_view) {

	Ttree_expansions expansions;//coordinates
	std::vector<unsigned int> expansion_element;

	QAbstractItemModel* model = _tree_view->model();
	QModelIndex index;
	for (int i = 0; i < model->rowCount(); i++) {

		index = model->index(i, 0);

		expansion_element.clear();
		expansion_element.push_back(i);
		get_tree_expansions(_tree_view, index, expansions, expansion_element);

		if (_tree_view->isExpanded(index)) {

			expansions.push_back(expansion_element);
		}

	}

	return expansions;
}

inline void glv::view::set_tree_expansions(QTreeView* _tree_view, const Ttree_expansions& _expansions) {

	_tree_view->collapseAll();

	QAbstractItemModel* model = _tree_view->model();

	for (unsigned int i = 0; i < _expansions.size(); i++) {

		QModelIndex index = model->index(_expansions[i][0], 0);
		for (unsigned int j = 1; j < _expansions[i].size(); j++) {
			index = model->index(_expansions[i][j], 0, index);
		}
		_tree_view->setExpanded(index, true);
	}

}

inline QString glv::view::get_string(const GlvTableView_base* _table_view, unsigned int i, unsigned j) {

	return dynamic_cast<QStandardItemModel*>(_table_view->model())->item(i, j)->text();
}

inline void glv::view::set_string(GlvTableView_base* _table_view, const QString& _string, unsigned int i, unsigned j) {

	dynamic_cast<QStandardItemModel*>(_table_view->model())->item(i, j)->setText(_string);
}

inline QScrollArea* glv::widget::make_scrollable(QWidget* _widget_scroll, QWidget* _widget_over, int _left_m, int _top_m, int _right_m, int _bottom_m) {

	QScrollArea* scroll_area = new QScrollArea;
	scroll_area->setWidgetResizable(true);
	QBoxLayout* layout = new QHBoxLayout;
	layout->setContentsMargins(_left_m, _top_m, _right_m, _bottom_m);

	scroll_area->setWidget(_widget_scroll);
	layout->addWidget(scroll_area);

	_widget_over->setLayout(layout);

	return scroll_area;
}

inline QScrollArea* glv::widget::make_scrollable(QLayout* _layout_scroll, QWidget* _widget_over) {

	QWidget* widget_scroll = new QWidget;
	widget_scroll->setLayout(_layout_scroll);

	return make_scrollable(widget_scroll, _widget_over);

}

inline void glv::widget::clear(QWidget* _widget) {

	QLayout* layout = _widget->layout();
	if (layout) {
		clear(layout);
		delete layout;
	}

}

inline void glv::widget::clear(QLayout* _layout, unsigned int _start_index, bool _l_recursive) {

	if (_layout) {
		QLayoutItem* item;
		while ((item = _layout->takeAt(_start_index))) {
			if (_l_recursive && item->layout()) {
				clear(item->layout(), 0);
				delete item->layout();
			}
			if (item->widget()) {
				delete item->widget();
			}
			delete item;
		}
	}

}

inline void glv::widget::remove_widget(QLayout* _layout, QWidget* _widget, bool _l_delete) {

	if (_widget) {
		_layout->removeWidget(_widget);
		if (_l_delete) {
			delete _widget;
		} else {
			_widget->setParent(NULL);
		}
	} else {
		slv::flag::ISSUE(slv::flag::Critical, "no _widget");
	}

}

inline void glv::widget::remove_widget(QLayout* _layout, int _index, bool _l_delete) {

	QLayoutItem* item = _layout->takeAt(_index);
	if (item) {
		glv::widget::remove_widget(_layout, item->widget(), _l_delete);
		if (_l_delete) {
			delete item;
		}
	} else {
		slv::flag::ISSUE(slv::flag::Critical, "no item");
	}

}

inline std::ostream& operator<<(std::ostream& _os, const QModelIndex& _index) {

    _os << "(" << _index.row() << "," << _index.column() << ")(" << _index.isValid() << ")";

    return _os;
}

inline std::istream& operator>>(std::istream& _is, QModelIndex& _index) {

    slv::flag::WIP();

    return _is;
}

#endif

